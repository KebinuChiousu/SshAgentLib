<?xml version="1.0"?>
<doc>
    <assembly>
        <name>qyoto-qtsvg</name>
    </assembly>
    <members>
        <member name="P:QtSvg.Global.QVersion">
            <summary>
                <para>Returns the version number of Qt at run-time as a string (for example, "4.1.2"). This may be a different version than the version the application was compiled against.</para>
                <para>See also QT_VERSION_STR.</para>
            </summary>
        </member>
        <member name="P:QtSvg.Global.Qrand">
            <summary>
                <para>Thread-safe version of the standard C++ rand() function.</para>
                <para>Returns a value between 0 and RAND_MAX (defined in &lt;cstdlib&gt; and &lt;stdlib.h&gt;), the next number in the current sequence of pseudo-random integers.</para>
                <para>Use qsrand() to initialize the pseudo-random number generator with a seed value.</para>
                <para>This function was introduced in Qt 4.2.</para>
                <para>See also qsrand().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.Write(QtCore.QDataStream,System.Collections.Generic.List{System.String})">
            <summary>
                <para>Writes the given string list to the specified out stream.</para>
                <para>See also Serializing Qt Data Types.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.Read(QtCore.QDataStream,System.Collections.Generic.List{System.String})">
            <summary>
                <para>Reads a string list from the given in stream into the specified list.</para>
                <para>See also Serializing Qt Data Types.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QAcos(System.Double)">
            <summary>
                <para>Returns the arccosine of v as an angle in radians. Arccosine is the inverse operation of cosine.</para>
                <para>See also qAtan(), qAsin(), and qCos().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QAsin(System.Double)">
            <summary>
                <para>Returns the arcsine of v as an angle in radians. Arcsine is the inverse operation of sine.</para>
                <para>See also qSin(), qAtan(), and qAcos().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QAtan(System.Double)">
            <summary>
                <para>Returns the arctangent of v as an angle in radians. Arctangent is the inverse operation of tangent.</para>
                <para>See also qTan(), qAcos(), and qAsin().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QAtan2(System.Double,System.Double)">
            <summary>
                <para>Returns the arctangent of a point specified by the coordinates x and y. This function will return the angle and its direction.</para>
                <para>See also qAtan().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QCeil(System.Double)">
            <summary>
                <para>Return the ceiling of the value v.</para>
                <para>The ceiling is the smallest integer that is not less than v. For example, if v is 41.2, then the ceiling is 42.</para>
                <para>See also qFloor().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QCos(System.Double)">
            <summary>
                <para>Returns the cosine of an angle v in radians.</para>
                <para>See also qSin() and qTan().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawBorderPixmap(QtGui.QPainter,QtCore.QRect,QtCore.QMargins,QtGui.QPixmap)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The qDrawBorderPixmap function is for drawing a pixmap into the margins of a rectangle.</para>
                <para>Draws the given pixmap into the given target rectangle, using the given painter. The pixmap will be split into nine segments and drawn according to the margins structure.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawPlainRect(QtGui.QPainter,QtCore.QRect,QtGui.QColor,System.Int32,QtGui.QBrush)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Draws the plain rectangle specified by rect using the given painter, lineColor and lineWidth. The rectangle's interior is filled with the fill brush unless fill is 0.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a plain rectangle:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::Box | QFrame::Plain);</para>
                <para>See also qDrawShadeRect() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawPlainRect(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QColor,System.Int32,QtGui.QBrush)">
            <summary>
                <para>Draws the plain rectangle beginning at (x, y) with the given width and height, using the specified painter, lineColor and lineWidth. The rectangle's interior is filled with the fill brush unless fill is 0.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a plain rectangle:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::Box | QFrame::Plain);</para>
                <para>See also qDrawShadeRect() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawShadeLine(QtGui.QPainter,QtCore.QPoint,QtCore.QPoint,QtGui.QPalette,System.Boolean,System.Int32,System.Int32)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Draws a horizontal or vertical shaded line between p1 and p2 using the given painter. Note that nothing is drawn if the line between the points would be neither horizontal nor vertical.</para>
                <para>The provided palette specifies the shading colors (light, dark and middle colors). The given lineWidth specifies the line width for each of the lines; it is not the total line width. The given midLineWidth specifies the width of a middle line drawn in the QPalette::mid() color.</para>
                <para>The line appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded line:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::HLine | QFrame::Sunken);</para>
                <para>See also qDrawShadeRect(), qDrawShadePanel(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawShadeLine(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,System.Int32,System.Int32)">
            <summary>
                <para>Draws a horizontal (y1 == y2) or vertical (x1 == x2) shaded line using the given painter. Note that nothing is drawn if y1 != y2 and x1 != x2 (i.e. the line is neither horizontal nor vertical).</para>
                <para>The provided palette specifies the shading colors (light, dark and middle colors). The given lineWidth specifies the line width for each of the lines; it is not the total line width. The given midLineWidth specifies the width of a middle line drawn in the QPalette::mid() color.</para>
                <para>The line appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded line:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::HLine | QFrame::Sunken);</para>
                <para>See also qDrawShadeRect(), qDrawShadePanel(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawShadePanel(QtGui.QPainter,QtCore.QRect,QtGui.QPalette,System.Boolean,System.Int32,QtGui.QBrush)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Draws the shaded panel at the rectangle specified by rect using the given painter and the given lineWidth.</para>
                <para>The given palette specifies the shading colors (light, dark and middle colors). The panel's interior is filled with the fill brush unless fill is 0.</para>
                <para>The panel appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded panel:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle( QFrame::Panel | QFrame::Sunken);</para>
                <para>See also qDrawWinPanel(), qDrawShadeLine(), qDrawShadeRect(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawShadePanel(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,System.Int32,QtGui.QBrush)">
            <summary>
                <para>Draws the shaded panel beginning at (x, y) with the given width and height using the provided painter and the given lineWidth.</para>
                <para>The given palette specifies the shading colors (light, dark and middle colors). The panel's interior is filled with the fill brush unless fill is 0.</para>
                <para>The panel appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded panel:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle( QFrame::Panel | QFrame::Sunken);</para>
                <para>See also qDrawWinPanel(), qDrawShadeLine(), qDrawShadeRect(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawShadeRect(QtGui.QPainter,QtCore.QRect,QtGui.QPalette,System.Boolean,System.Int32,System.Int32,QtGui.QBrush)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Draws the shaded rectangle specified by rect using the given painter.</para>
                <para>The provide palette specifies the shading colors (light, dark and middle colors. The given lineWidth specifies the line width for each of the lines; it is not the total line width. The midLineWidth specifies the width of a middle line drawn in the QPalette::mid() color. The rectangle's interior is filled with the fill brush unless fill is 0.</para>
                <para>The rectangle appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded rectangle:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::Box | QFrame::Raised);</para>
                <para>See also qDrawShadeLine(), qDrawShadePanel(), qDrawPlainRect(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawShadeRect(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,System.Int32,System.Int32,QtGui.QBrush)">
            <summary>
                <para>Draws the shaded rectangle beginning at (x, y) with the given width and height using the provided painter.</para>
                <para>The provide palette specifies the shading colors (light, dark and middle colors. The given lineWidth specifies the line width for each of the lines; it is not the total line width. The midLineWidth specifies the width of a middle line drawn in the QPalette::mid() color. The rectangle's interior is filled with the fill brush unless fill is 0.</para>
                <para>The rectangle appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded rectangle:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::Box | QFrame::Raised);</para>
                <para>See also qDrawShadeLine(), qDrawShadePanel(), qDrawPlainRect(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawWinButton(QtGui.QPainter,QtCore.QRect,QtGui.QPalette,System.Boolean,QtGui.QBrush)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Draws the Windows-style button at the rectangle specified by rect using the given painter with a line width of 2 pixels. The button's interior is filled with the fill brush unless fill is 0.</para>
                <para>The given palette specifies the shading colors (light, dark and middle colors).</para>
                <para>The button appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style()-&gt; Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>See also qDrawWinPanel() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawWinButton(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,QtGui.QBrush)">
            <summary>
                <para>Draws the Windows-style button specified by the given point (x, y}, width and height using the provided painter with a line width of 2 pixels. The button's interior is filled with the fill brush unless fill is 0.</para>
                <para>The given palette specifies the shading colors (light, dark and middle colors).</para>
                <para>The button appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style()-&gt; Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>See also qDrawWinPanel() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QDrawWinPanel(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,QtGui.QBrush)">
            <summary>
                <para>Draws the Windows-style panel specified by the given point(x, y), width and height using the provided painter with a line width of 2 pixels. The button's interior is filled with the fill brush unless fill is 0.</para>
                <para>The given palette specifies the shading colors. The panel appears sunken if sunken is true, otherwise raised.</para>
                <para>Warning: This function does not look at QWidget::style() or QApplication::style(). Use the drawing functions in QStyle to make widgets that follow the current GUI style.</para>
                <para>Alternatively you can use a QFrame widget and apply the QFrame::setFrameStyle() function to display a shaded panel:</para>
                <para> QFrame frame:</para>
                <para> frame.setFrameStyle(QFrame::WinPanel | QFrame::Raised);</para>
                <para>See also qDrawShadePanel(), qDrawWinButton(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QExp(System.Double)">
            <summary>
                <para>Returns the exponential function of e to the power of v.</para>
                <para>See also qLn().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QFloor(System.Double)">
            <summary>
                <para>Return the floor of the value v.</para>
                <para>The floor is the largest integer that is not greater than v. For example, if v is 41.2, then the floor is 41.</para>
                <para>See also qCeil().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QFuzzyCompare(System.Double,System.Double)">
            <summary>
                <para>Compares the floating point value p1 and p2 and returns true if they are considered equal, otherwise false.</para>
                <para>Note that comparing values where either p1 or p2 is 0.0 will not work. The solution to this is to compare against values greater than or equal to 1.0.</para>
                <para>         // Instead of comparing with 0.0</para>
                <para>                 qFuzzyCompare(0.0,1.0e-200); // This will return false</para>
                <para>         // Compare adding 1 to both values will fix the problem</para>
                <para>                 qFuzzyCompare(1 + 0.0, 1 + 1.0e-200); // This will return true</para>
                <para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</para>
                <para>Note: This function is thread-safe.</para>
                <para>This function was introduced in Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QFuzzyCompare(System.Single,System.Single)">
            <summary>
                <para>Compares the floating point value p1 and p2 and returns true if they are considered equal, otherwise false.</para>
                <para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</para>
                <para>Note: This function is thread-safe.</para>
                <para>This function was introduced in Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(QtCore.QBitArray)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(QtCore.QByteArray)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(QtCore.QChar)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.Byte)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.String)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.UInt16)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(NativeLong)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.Int64)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.UInt64)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.Char)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.Int16)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(NativeULong)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.UInt32)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QHash(System.Int32)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QInstallMsgHandler(QtSvg.Global.ActionQtMsgTypeString)">
            <summary>
                <para>Installs a Qt message handler which has been defined previously. Returns a pointer to the previous message handler (which may be 0).</para>
                <para>The message handler is a function that prints out debug messages, warnings, critical and fatal error messages. The Qt library (debug mode) contains hundreds of warning messages that are printed when internal errors (usually invalid function arguments) occur. Qt built in release mode also contains such warnings unless QT_NO_WARNING_OUTPUT and/or QT_NO_DEBUG_OUTPUT have been set during compilation. If you implement your own message handler, you get total control of these messages.</para>
                <para>The default message handler prints the message to the standard output under X11 or to the debugger under Windows. If it is a fatal message, the application aborts immediately.</para>
                <para>Only one message handler can be defined, since this is usually done on an application-wide basis to control debug output.</para>
                <para>To restore the message handler, call qInstallMsgHandler(0).</para>
                <para>Example:</para>
                <para> #include &lt;qapplication.h&gt;</para>
                <para> #include &lt;stdio.h&gt;</para>
                <para> #include &lt;stdlib.h&gt;</para>
                <para>
                </para>
                <para> void myMessageOutput(QtMsgType type, const char *msg)</para>
                <para> {</para>
                <para>     switch (type) {</para>
                <para>     case QtDebugMsg:</para>
                <para>         fprintf(stderr, "Debug: %s\\n", msg);</para>
                <para>         break;</para>
                <para>     case QtWarningMsg:</para>
                <para>         fprintf(stderr, "Warning: %s\\n", msg);</para>
                <para>         break;</para>
                <para>     case QtCriticalMsg:</para>
                <para>         fprintf(stderr, "Critical: %s\\n", msg);</para>
                <para>         break;</para>
                <para>     case QtFatalMsg:</para>
                <para>         fprintf(stderr, "Fatal: %s\\n", msg);</para>
                <para>         abort();</para>
                <para>     }</para>
                <para> }</para>
                <para>
                </para>
                <para> int main(int argc, char **argv)</para>
                <para> {</para>
                <para>     qInstallMsgHandler(myMessageOutput);</para>
                <para>     QApplication app(argc, argv);</para>
                <para>     ...</para>
                <para>     return app.exec();</para>
                <para> }</para>
                <para>See also qDebug(), qWarning(), qCritical(), qFatal(), QtMsgType, and Debugging Techniques.</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QLn(System.Double)">
            <summary>
                <para>Returns the natural logarithm of v. Natural logarithm uses base e.</para>
                <para>See also qExp().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QPow(System.Double,System.Double)">
            <summary>
                <para>Returns the value of x raised to the power of y. That is, x is the base and y is the exponent.</para>
                <para>See also qSqrt().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QRound(System.Double)">
            <summary>
                <para>Rounds value to the nearest integer.</para>
                <para>Example:</para>
                <para> qreal valueA = 2.3;</para>
                <para> qreal valueB = 2.7;</para>
                <para>
                </para>
                <para> int roundedValueA = qRound(valueA);</para>
                <para> // roundedValueA = 2</para>
                <para> int roundedValueB = qRound(valueB);</para>
                <para> // roundedValueB = 3</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QRound64(System.Double)">
            <summary>
                <para>Rounds value to the nearest 64-bit integer.</para>
                <para>Example:</para>
                <para> qreal valueA = 42949672960.3;</para>
                <para> qreal valueB = 42949672960.7;</para>
                <para>
                </para>
                <para> int roundedValueA = qRound(valueA);</para>
                <para> // roundedValueA = 42949672960</para>
                <para> int roundedValueB = qRound(valueB);</para>
                <para> // roundedValueB = 42949672961</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QSin(System.Double)">
            <summary>
                <para>Returns the sine of the angle v in radians.</para>
                <para>See also qCos() and qTan().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QSqrt(System.Double)">
            <summary>
                <para>Returns the square root of v. This function returns a NaN if v is a negative number.</para>
                <para>See also qPow().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QTan(System.Double)">
            <summary>
                <para>Returns the tangent of an angle v in radians.</para>
                <para>See also qSin() and qCos().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.Qgetenv(System.String)">
            <summary>
                <para>Returns the value of the environment variable with name varName. To get the variable string, use QByteArray::constData().</para>
                <para>Note: qgetenv() was introduced because getenv() from the standard C library was deprecated in VC2005 (and later versions). qgetenv() uses the new replacement function in VC, and calls the standard C library's implementation on all other platforms.</para>
                <para>See also qputenv().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.Qputenv(System.String,QtCore.QByteArray)">
            <summary>
                <para>This function sets the value of the environment variable named varName. It will create the variable if it does not exist. It returns 0 if the variable could not be set.</para>
                <para>Note: qputenv() was introduced because putenv() from the standard C library was deprecated in VC2005 (and later versions). qputenv() uses the replacement function in VC, and calls the standard C library's implementation on all other platforms.</para>
                <para>See also qgetenv().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.Qsrand(System.UInt32)">
            <summary>
                <para>Thread-safe version of the standard C++ srand() function.</para>
                <para>Sets the argument seed to be used to generate a new random number sequence of pseudo random integers to be returned by qrand().</para>
                <para>The sequence of random numbers generated is deterministic per thread. For example, if two threads call qsrand(1) and subsequently calls qrand(), the threads will get the same random number sequence.</para>
                <para>This function was introduced in Qt 4.2.</para>
                <para>See also qrand().</para>
            </summary>
        </member>
        <member name="M:QtSvg.Global.QtTrId(System.String,System.Int32)">
            <summary>
                <para>The qtTrId function finds and returns a translated string.</para>
                <para>Returns a translated string identified by id. If no matching string is found, the id itself is returned. This should not happen under normal conditions.</para>
                <para>If n &gt;= 0, all occurrences of %n in the resulting string are replaced with a decimal representation of n. In addition, depending on n's value, the translation text may vary.</para>
                <para>Meta data and comments can be passed as documented for QObject::tr(). In addition, it is possible to supply a source string template like that:</para>
                <para>//% &lt;C string&gt;</para>
                <para>or</para>
                <para>/*% &lt;C string&gt; */</para>
                <para>Example:</para>
                <para>     //% "%n fooish bar(s) found.\\n"</para>
                <para>     //% "Do you want to continue?"</para>
                <para>     QString text = qtTrId("qtn_foo_bar", n);</para>
                <para>Creating QM files suitable for use with this function requires passing the -idbased option to the lrelease tool.</para>
                <para>Warning: This method is reentrant only if all translators are installed before calling this method. Installing or removing translators while performing translations is not supported. Doing so will probably result in crashes or other undesirable behavior.</para>
                <para>Note: This function is reentrant.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also QObject::tr(), QCoreApplication::translate(), and Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QGraphicsSvgItem">
            <summary>
            The QGraphicsSvgItem class is a QGraphicsItem that can be used to render the contents of SVG files.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QGraphicsSvgItem provides a way of rendering SVG files onto QGraphicsView. QGraphicsSvgItem can be created by passing the SVG file to be rendered to its constructor or by explicit setting a shared QSvgRenderer on it.</para>
                <para>Note that setting QSvgRenderer on a QGraphicsSvgItem doesn't make the item take ownership of the renderer, therefore if using setSharedRenderer() method one has to make sure that the lifetime of the QSvgRenderer object will be at least as long as that of the QGraphicsSvgItem.</para>
                <para>QGraphicsSvgItem provides a way of rendering only parts of the SVG files via the setElementId. If setElementId() method is called, only the SVG element (and its children) with the passed id will be renderer. This provides a convenient way of selectively rendering large SVG files that contain a number of discrete elements. For example the following code renders only jokers from a SVG file containing a whole card deck:</para>
                <para> QSvgRenderer *renderer = new QSvgRenderer(QLatin1String("SvgCardDeck.svg"));</para>
                <para> QGraphicsSvgItem *black = new QGraphicsSvgItem();</para>
                <para> QGraphicsSvgItem *red   = new QGraphicsSvgItem();</para>
                <para>
                </para>
                <para> black-&gt;setSharedRenderer(renderer);</para>
                <para> black-&gt;setElementId(QLatin1String("black_joker"));</para>
                <para>
                </para>
                <para> red-&gt;setSharedRenderer(renderer);</para>
                <para> red-&gt;setElementId(QLatin1String("red_joker"));</para>
                <para>Size of the item can be set via the setSize() method of the bounding rectangle or via direct manipulation of the items transformation matrix.</para>
                <para>By default the SVG rendering is cached using QGraphicsItem::DeviceCoordinateCache mode to speedup the display of items. Caching can be disabled by passing QGraphicsItem::NoCache to the QGraphicsItem::setCacheMode() method.</para>
                <para>
                </para>
                <para>See also QSvgWidget, QtSvg Module, QGraphicsItem, and QGraphicsView.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.#ctor(QtGui.IQGraphicsItem)">
            <summary>
                <para>Constructs a new SVG item with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.#ctor(System.String,QtGui.IQGraphicsItem)">
            <summary>
                <para>Constructs a new item with the given parent and loads the contents of the SVG file with the specified fileName.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.BoundingRect">
            <summary>
                <para>Reimplemented from QGraphicsItem::boundingRect().</para>
                <para>Returns the bounding rectangle of this item.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.IsCachingEnabled">
            <summary>
                <para>Use QGraphicsItem::cacheMode() instead.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.Renderer">
            <summary>
                <para>Returns the currently use QSvgRenderer.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.Type">
            <summary>
                <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.ElementId">
            <summary>
                <para>This property holds the element's XML ID.</para>
                <para>This property was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.MaximumCacheSize">
            <summary>
                <para>This property holds the maximum size of the device coordinate cache for this item.</para>
                <para>This property was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.Paint(QtGui.QPainter,QtGui.QStyleOptionGraphicsItem,QtGui.QWidget)">
            <summary>
                <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.SetCachingEnabled(System.Boolean)">
            <summary>
                <para>Use QGraphicsItem::setCacheMode() instead. Passing true to this function is equivalent to QGraphicsItem::setCacheMode(QGraphicsItem::DeviceCoordinateCache).</para>
                <para>See also isCachingEnabled().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.SetSharedRenderer(QtSvg.QSvgRenderer)">
            <summary>
                <para>Sets renderer to be a shared QSvgRenderer on the item. By using this method one can share the same QSvgRenderer on a number of items. This means that the SVG file will be parsed only once. QSvgRenderer passed to this method has to exist for as long as this item is used.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QSvgGenerator">
            <summary>
            The QSvgGenerator class provides a paint device that is used to create SVG drawings.
            </summary>
            <remarks>
                <para>
                </para>
                <para>This paint device represents a Scalable Vector Graphics (SVG) drawing. Like QPrinter, it is designed as a write-only device that generates output in a specific format.</para>
                <para>To write an SVG file, you first need to configure the output by setting the fileName or outputDevice properties. It is usually necessary to specify the size of the drawing by setting the size property, and in some cases where the drawing will be included in another, the viewBox property also needs to be set.</para>
                <para>     QSvgGenerator generator;</para>
                <para>     generator.setFileName(path);</para>
                <para>     generator.setSize(QSize(200, 200));</para>
                <para>     generator.setViewBox(QRect(0, 0, 200, 200));</para>
                <para>     generator.setTitle(tr("SVG Generator Example Drawing"));</para>
                <para>     generator.setDescription(tr("An SVG drawing created by the SVG Generator "</para>
                <para>                                 "Example provided with Qt."));</para>
                <para>Other meta-data can be specified by setting the title, description and resolution properties.</para>
                <para>As with other QPaintDevice subclasses, a QPainter object is used to paint onto an instance of this class:</para>
                <para>     QPainter painter;</para>
                <para>     painter.begin(&amp;generator);</para>
                <para>     ...</para>
                <para>     painter.end();</para>
                <para>Painting is performed in the same way as for any other paint device. However, it is necessary to use the QPainter::begin() and end() to explicitly begin and end painting on the device.</para>
                <para>The SVG Generator Example shows how the same painting commands can be used for painting a widget and writing an SVG file.</para>
                <para>
                </para>
                <para>See also QSvgRenderer, QSvgWidget, and About SVG.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QSvgGenerator.#ctor">
            <summary>
                <para>Constructs a new generator.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.ViewBox">
            <summary>
                <para>Returns viewBoxF().toRect().</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.PaintEngine">
            <summary>
                <para>Reimplemented from QPaintDevice::paintEngine().</para>
                <para>Returns the paint engine used to render graphics to be converted to SVG format information.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgGenerator.Metric(QtGui.QPaintDevice.PaintDeviceMetric)">
            <summary>
                <para>Reimplemented from QPaintDevice::metric().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgGenerator.Finalize">
            <summary>
                <para>Destroys the generator.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QSvgRenderer">
            <summary>
            The QSvgRenderer class is used to draw the contents of SVG files onto paint devices.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Using QSvgRenderer, Scalable Vector Graphics (SVG) can be rendered onto any QPaintDevice subclass, including QWidget, QImage, and QGLWidget.</para>
                <para>QSvgRenderer provides an API that supports basic features of SVG rendering, such as loading and rendering of static drawings, and more interactive features like animation. Since the rendering is performed using QPainter, SVG drawings can be rendered on any subclass of QPaintDevice.</para>
                <para>SVG drawings are either loaded when an QSvgRenderer is constructed, or loaded later using the load() functions. Data is either supplied directly as serialized XML, or indirectly using a file name. If a valid file has been loaded, either when the renderer is constructed or at some later time, isValid() returns true; otherwise it returns false. QSvgRenderer provides the render() slot to render the current document, or the current frame of an animated document, using a given painter.</para>
                <para>The defaultSize() function provides information about the amount of space that is required to render the currently loaded SVG file. This is useful for paint devices, such as QWidget, that often need to supply a size hint to their parent layout. The default size of a drawing may differ from its visible area, found using the viewBox property.</para>
                <para>Animated SVG drawings are supported, and can be controlled with a simple collection of functions and properties:</para>
                <para>
                </para>
                <para>The animated() function indicates whether a drawing contains animation information.</para>
                <para>The framesPerSecond property contains the rate at which the animation plays.</para>
                <para>
                </para>
                <para>Finally, the QSvgRenderer class provides the repaintNeeded() signal which is emitted whenever the rendering of the document needs to be updated.</para>
                <para>
                </para>
                <para>See also QSvgWidget, QtSvg Module, SVG Viewer Example, and QPicture.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(QtCore.QObject)">
            <summary>
                <para>Constructs a new renderer with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(QtCore.QByteArray,QtCore.QObject)">
            <summary>
                <para>Constructs a new renderer with the given parent and loads the SVG data from the byte array specified by contents.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(QtCore.QXmlStreamReader,QtCore.QObject)">
            <summary>
                <para>Constructs a new renderer with the given parent and loads the SVG data using the stream reader specified by contents.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(System.String,QtCore.QObject)">
            <summary>
                <para>Constructs a new renderer with the given parent and loads the contents of the SVG file with the specified filename.</para>
            </summary>
        </member>
        <member name="E:QtSvg.QSvgRenderer.RepaintNeeded">
            <summary>
                <para>This signal is emitted whenever the rendering of the document needs to be updated, usually for the purposes of animation.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.Animated">
            <summary>
                <para>Returns true if the current document contains animated elements; otherwise returns false.</para>
                <para>See also framesPerSecond().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.DefaultSize">
            <summary>
                <para>Returns the default size of the document contents.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.IsValid">
            <summary>
                <para>Returns true if there is a valid current document; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.ViewBox">
            <summary>
                <para>This property holds the rectangle specifying the visible area of the document in logical coordinates.</para>
                <para>This property was introduced in Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.FramesPerSecond">
            <summary>
                <para>This property holds the number of frames per second to be shown.</para>
                <para>The number of frames per second is 0 if the current document is not animated.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.BoundsOnElement(System.String)">
            <summary>
                <para>Returns bounding rectangle of the item with the given id. The transformation matrix of parent elements is not affecting the bounds of the element.</para>
                <para>This function was introduced in Qt 4.2.</para>
                <para>See also matrixForElement().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.ElementExists(System.String)">
            <summary>
                <para>Returns true if the element with the given id exists in the currently parsed SVG file and is a renderable element.</para>
                <para>Note: this method returns true only for elements that can be rendered. Which implies that elements that are considered part of the fill/stroke style properties, e.g. radialGradients even tough marked with "id" attributes will not be found by this method.</para>
                <para>This function was introduced in Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Load(QtCore.QByteArray)">
            <summary>
                <para>Loads the specified SVG format contents, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Load(QtCore.QXmlStreamReader)">
            <summary>
                <para>Loads the specified SVG in contents, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>The reader will be used from where it currently is positioned. If contents is null, behavior is undefined.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Load(System.String)">
            <summary>
                <para>Loads the SVG file specified by filename, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.MatrixForElement(System.String)">
            <summary>
                <para>Returns the transformation matrix for the element with the given id. The matrix is a product of the transformation of the element's parents. The transformation of the element itself is not included.</para>
                <para>To find the bounding rectangle of the element in logical coordinates, you can apply the matrix on the rectangle returned from boundsOnElement().</para>
                <para>This function was introduced in Qt 4.2.</para>
                <para>See also boundsOnElement().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter)">
            <summary>
                <para>Renders the current document, or the current frame of an animated document, using the given painter.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter,QtCore.QRectF)">
            <summary>
                <para>Renders the current document, or the current frame of an animated document, using the given painter on the specified bounds within the painter. If the bounding rectangle is not specified the SVG file is mapped to the whole paint device.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter,System.String)">
            <summary>
                <para>Renders the given element with elementId using the given painter on the specified bounds. If the bounding rectangle is not specified the SVG element is mapped to the whole paint device.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter,System.String,QtCore.QRectF)">
            <summary>
                <para>Renders the given element with elementId using the given painter on the specified bounds. If the bounding rectangle is not specified the SVG element is mapped to the whole paint device.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.OnRepaintNeeded">
            <summary>
                <para>This signal is emitted whenever the rendering of the document needs to be updated, usually for the purposes of animation.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Finalize">
            <summary>
                <para>Destroys the renderer.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QSvgWidget">
            <summary>
            The QSvgWidget class provides a widget that is used to display the contents of Scalable Vector Graphics (SVG) files.
            </summary>
            <remarks>
                <para>
                </para>
                <para>This class enables developers to display SVG drawings alongside standard widgets, and is used in much the same way as QLabel is used for displaying text and bitmap images.</para>
                <para>Since QSvgWidget is a subclass of QWidget, SVG drawings are rendered using the properties of the display. More control can be exercised over the rendering process with the QSvgRenderer class, as this can be used to paint onto other paint devices, such as QImage and QGLWidget. The renderer used by the widget can be obtained with the renderer() function.</para>
                <para>Each QSvgWidget can be constructed with the file name of a SVG file, or they can be constructed without a specific file to render and one can be supplied later. The load() functions provide two different ways to load an SVG file: they accept either the file name of an SVG file or a QByteArray containing the serialized XML representation of an SVG file.</para>
                <para>By default, the widget provides a size hint to reflect the size of the drawing that it displays. If no data has been loaded, the widget provides the default QWidget size hint. Subclass this class and reimplement sizeHint() if you need to customize this behavior.</para>
                <para>
                </para>
                <para>See also QSvgRenderer, QtSvg Module, and QPicture.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QSvgWidget.#ctor(QtGui.QWidget)">
            <summary>
                <para>Constructs a new SVG display widget with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.#ctor(System.String,QtGui.QWidget)">
            <summary>
                <para>Constructs a new SVG display widget with the given parent and loads the contents of the specified file.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgWidget.Renderer">
            <summary>
                <para>Returns the renderer used to display the contents of the widget.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgWidget.SizeHint">
            <summary>
                <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.Load(QtCore.QByteArray)">
            <summary>
                <para>Loads the specified SVG format contents and updates the widget.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.Load(System.String)">
            <summary>
                <para>Loads the contents of the specified SVG file and updates the widget.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
                <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.Finalize">
            <summary>
                <para>Destroys the widget.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QtMsgType">
            <summary>
                <para>This enum describes the messages that can be sent to a message handler (QtMsgHandler). You can use the enum to identify and associate the various message types with the appropriate actions.</para>
                <para>See also QtMsgHandler and qInstallMsgHandler().</para>
            </summary>
        </member>
        <member name="F:QtSvg.QtMsgType.QtCriticalMsg">
            <summary>
                <para>A message generated by the qCritical() function.</para>
            </summary>
        </member>
        <member name="F:QtSvg.QtMsgType.QtDebugMsg">
            <summary>
                <para>A message generated by the qDebug() function.</para>
            </summary>
        </member>
        <member name="F:QtSvg.QtMsgType.QtFatalMsg">
            <summary>
                <para>A message generated by the qFatal() function.</para>
            </summary>
        </member>
        <member name="F:QtSvg.QtMsgType.QtWarningMsg">
            <summary>
                <para>A message generated by the qWarning() function.</para>
            </summary>
        </member>
        <member name="M:QtSvg.IQSvgRendererSignals.RepaintNeeded">
            <summary>
                <para>This signal is emitted whenever the rendering of the document needs to be updated, usually for the purposes of animation.</para>
            </summary>
        </member>
    </members>
</doc>
