<?xml version="1.0"?>
<doc>
    <assembly>
        <name>qyoto-qtwebkit</name>
    </assembly>
    <members>
        <member name="T:QtWebKit.QWebDatabase">
            <summary>
            The QWebDatabase class provides access to HTML 5 databases created with JavaScript.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The upcoming HTML 5 standard includes support for SQL databases that web sites can create and access on a local computer through JavaScript. QWebDatabase is the C++ interface to these databases.</para>
                <para>Databases are grouped together in security origins. To get access to all databases defined by a security origin, use QWebSecurityOrigin::databases(). Each database has an internal name(), as well as a user-friendly name, provided by displayName(). These names are specified when creating the database in the JavaScript code.</para>
                <para>WebKit uses SQLite to create and access the local SQL databases. The location of the database file in the local file system is returned by fileName(). You can access the database directly through the QtSql database module.</para>
                <para>For each database the web site can define an expectedSize(). The current size of the database in bytes is returned by size().</para>
                <para>For more information refer to the HTML5 Web SQL Database Draft Standard.</para>
                <para>
                </para>
                <para>See also QWebSecurityOrigin.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebDatabase.#ctor(QtWebKit.QWebDatabase)">
            <summary>
                <para>Constructs a web database from other.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebDatabase.DisplayName">
            <summary>
                <para>Returns the name of the database in a format that is suitable for display to the user.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebDatabase.ExpectedSize">
            <summary>
                <para>Returns the expected size of the database in bytes as defined by the web author.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebDatabase.FileName">
            <summary>
                <para>Returns the file name of the web database.</para>
                <para>The name can be used to access the database through the QtSql database module, for example:</para>
                <para> QWebDatabase webdb = ...</para>
                <para> QSqlDatabase sqldb = QSqlDatabase::addDatabase("QSQLITE", "myconnection");</para>
                <para> sqldb.setDatabaseName(webdb.fileName());</para>
                <para> if (sqldb.open()) {</para>
                <para>     QStringList tables = sqldb.tables();</para>
                <para>     ...</para>
                <para> }</para>
                <para>Note: Concurrent access to a database from multiple threads or processes is not very efficient because SQLite is used as WebKit's database backend.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebDatabase.Name">
            <summary>
                <para>Returns the name of the database.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebDatabase.Origin">
            <summary>
                <para>Returns the databases's security origin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebDatabase.Size">
            <summary>
                <para>Returns the current size of the database in bytes.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebDatabase.RemoveAllDatabases">
            <summary>
                <para>Deletes all web databases in the configured offline storage path.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also QWebSettings::setOfflineStoragePath().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebDatabase.RemoveDatabase(QtWebKit.QWebDatabase)">
            <summary>
                <para>Removes the database db from its security origin. All data stored in the database db will be destroyed.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebDatabase.Finalize">
            <summary>
                <para>Destroys the web database object. The data within this database is \\b not destroyed.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebElement">
            <summary>
            The QWebElement class provides convenient access to DOM elements in a QWebFrame.
            </summary>
            <remarks>
                <para>
                </para>
                <para>A QWebElement object allows easy access to the document model, represented by a tree-like structure of DOM elements. The root of the tree is called the document element and can be accessed using QWebFrame::documentElement().</para>
                <para>Specific elements can be accessed using findAll() and findFirst(). These elements are identified using CSS selectors. The code snippet below demonstrates the use of findAll().</para>
                <para>     QWebElement document = frame-&gt;documentElement();</para>
                <para>     /* Assume the document has the following structure:</para>
                <para>
                </para>
                <para>        &lt;p class=intro&gt;</para>
                <para>          &lt;span&gt;Intro&lt;/span&gt;</para>
                <para>          &lt;span&gt;Snippets&lt;/span&gt;</para>
                <para>        &lt;/p&gt;</para>
                <para>        &lt;p&gt;</para>
                <para>          &lt;span&gt;Content&lt;/span&gt;</para>
                <para>          &lt;span&gt;Here&lt;/span&gt;</para>
                <para>        &lt;/p&gt;</para>
                <para>     */</para>
                <para>
                </para>
                <para>     QWebElementCollection allSpans = document.findAll("span");</para>
                <para>     QWebElementCollection introSpans = document.findAll("p.intro span");</para>
                <para>The first list contains all span elements in the document. The second list contains span elements that are children of p, classified with intro.</para>
                <para>Using findFirst() is more efficient than calling findAll(), and extracting the first element only in the list returned.</para>
                <para>Alternatively you can traverse the document manually using firstChild() and nextSibling():</para>
                <para>     frame-&gt;setHtml("&lt;html&gt;&lt;body&gt;&lt;p&gt;First Paragraph&lt;/p&gt;&lt;p&gt;Second Paragraph&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;");</para>
                <para>     QWebElement doc = frame-&gt;documentElement();</para>
                <para>     QWebElement body = doc.firstChild();</para>
                <para>     QWebElement firstParagraph = body.firstChild();</para>
                <para>     QWebElement secondParagraph = firstParagraph.nextSibling();</para>
                <para>Individual elements can be inspected or changed using methods such as attribute() or setAttribute(). For examle, to capture the user's input in a text field for later use (auto-completion), a browser could do something like this:</para>
                <para>     QWebElement firstTextInput = document.findFirst("input[type=text]");</para>
                <para>     QString storedText = firstTextInput.attribute("value");</para>
                <para>When the same page is later revisited, the browser can fill in the text field automatically by modifying the value attribute of the input element:</para>
                <para>     QWebElement firstTextInput = document.findFirst("input[type=text]");</para>
                <para>     textInput.setAttribute("value", storedText);</para>
                <para>Another use case is to emulate a click event on an element. The following code snippet demonstrates how to call the JavaScript DOM method click() of a submit button:</para>
                <para>     QWebElement document = frame-&gt;documentElement();</para>
                <para>     /* Assume that the document has the following structure:</para>
                <para>
                </para>
                <para>         &lt;form name="myform" action="submit_form.asp" method="get"&gt;</para>
                <para>             &lt;input type="text" name="myfield"&gt;</para>
                <para>             &lt;input type="submit" value="Submit"&gt;</para>
                <para>         &lt;/form&gt;</para>
                <para>
                </para>
                <para>      */</para>
                <para>
                </para>
                <para>     QWebElement button = document.findFirst("input[type=submit]");</para>
                <para>     button.evaluateJavaScript("this.click()");</para>
                <para>The underlying content of QWebElement is explicitly shared. Creating a copy of a QWebElement does not create a copy of the content. Instead, both instances point to the same element.</para>
                <para>The contents of child elements can be converted to plain text with toPlainText(); to XHTML using toInnerXml(). To include the element's tag in the output, use toOuterXml().</para>
                <para>It is possible to replace the contents of child elements using setPlainText() and setInnerXml(). To replace the element itself and its contents, use setOuterXml().</para>
                <para>
                </para>
                <para>Examples</para>
                <para>The DOM Traversal Example shows one way to traverse documents in a running example.</para>
                <para>The Simple Selector Example can be used to experiment with the searching features of this class and provides sample code you can start working with.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebElement.#ctor">
            <summary>
                <para>Constructs a null web element.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.#ctor(QtWebKit.QWebElement)">
            <summary>
                <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebElement.StyleResolveStrategy">
            <summary>
                <para>This enum describes how QWebElement's styleProperty resolves the given property name.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebElement.StyleResolveStrategy.CascadedStyle">
            <summary>
                <para>The property's value is determined using the inheritance and importance rules defined in the document's stylesheet.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebElement.StyleResolveStrategy.ComputedStyle">
            <summary>
                <para>The property's value is the absolute value of the style property resolved from the environment.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebElement.StyleResolveStrategy.InlineStyle">
            <summary>
                <para>Return the property value as it is defined in the element, without respecting style inheritance and other CSS rules.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.Classes">
            <summary>
                <para>Returns the list of classes of this element.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.Clone">
            <summary>
                <para>Returns a clone of this element.</para>
                <para>The clone may be inserted at any point in the document.</para>
                <para>See also appendInside(), prependInside(), prependOutside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.Document">
            <summary>
                <para>Returns the document which this element belongs to.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.FirstChild">
            <summary>
                <para>Returns the element's first child.</para>
                <para>See also lastChild(), previousSibling(), and nextSibling().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.Geometry">
            <summary>
                <para>Returns the geometry of this element, relative to its containing frame.</para>
                <para>See also tagName().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.HasAttributes">
            <summary>
                <para>Returns true if the element has any attributes defined; otherwise returns false;</para>
                <para>See also attribute() and setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.HasFocus">
            <summary>
                <para>Returns true if the element has keyboard input focus; otherwise, returns false</para>
                <para>See also setFocus().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.IsNull">
            <summary>
                <para>Returns true if the element is a null element; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.LastChild">
            <summary>
                <para>Returns the element's last child.</para>
                <para>See also firstChild(), previousSibling(), and nextSibling().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.LocalName">
            <summary>
                <para>Returns the local name of the element. If the element does not use namespaces, an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.NamespaceUri">
            <summary>
                <para>Returns the namespace URI of this element. If the element has no namespace URI, an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.NextSibling">
            <summary>
                <para>Returns the element's next sibling.</para>
                <para>See also firstChild(), previousSibling(), and lastChild().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.Parent">
            <summary>
                <para>Returns the parent element of this elemen. If this element is the root document element, a null element is returned.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.Prefix">
            <summary>
                <para>Returns the namespace prefix of the element. If the element has no namespace prefix, empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.PreviousSibling">
            <summary>
                <para>Returns the element's previous sibling.</para>
                <para>See also firstChild(), nextSibling(), and lastChild().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.TagName">
            <summary>
                <para>Returns the tag name of this element.</para>
                <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElement.WebFrame">
            <summary>
                <para>Returns the web frame which this element is a part of. If the element is a null element, null is returned.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AddClass(System.String)">
            <summary>
                <para>Adds the specified class with the given name to the element.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AppendInside(QtWebKit.QWebElement)">
            <summary>
                <para>Appends the given element as the element's last child.</para>
                <para>If element is the child of another element, it is re-parented to this element. If element is a child of this element, then its position in the list of children is changed.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also prependInside(), prependOutside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AppendInside(System.String)">
            <summary>
                <para>Appends the result of parsing markup as the element's last child.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also prependInside(), prependOutside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AppendOutside(QtWebKit.QWebElement)">
            <summary>
                <para>Inserts the given element after this element.</para>
                <para>If element is the child of another element, it is re-parented to the parent of this element.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also appendInside(), prependInside(), and prependOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AppendOutside(System.String)">
            <summary>
                <para>Inserts the result of parsing markup after this element.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also appendInside(), prependInside(), and prependOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.Attribute(System.String,System.String)">
            <summary>
                <para>Returns the attribute with the given name. If the attribute does not exist, defaultValue is returned.</para>
                <para>See also setAttribute(), setAttributeNS(), and attributeNS().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AttributeNS(System.String,System.String,System.String)">
            <summary>
                <para>Returns the attribute with the given name in namespaceUri. If the attribute does not exist, defaultValue is returned.</para>
                <para>See also setAttributeNS(), setAttribute(), and attribute().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.AttributeNames(System.String)">
            <summary>
                <para>Return the list of attributes for the namespace given as namespaceUri.</para>
                <para>See also attribute() and setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.EncloseContentsWith(QtWebKit.QWebElement)">
            <summary>
                <para>Encloses the contents of this element with element. This element becomes the child of the deepest descendant within element.</para>
                <para>### illustration</para>
                <para>See also encloseWith().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.EncloseContentsWith(System.String)">
            <summary>
                <para>Encloses the contents of this element with the result of parsing markup. This element becomes the child of the deepest descendant within markup.</para>
                <para>See also encloseWith().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.EncloseWith(QtWebKit.QWebElement)">
            <summary>
                <para>Encloses this element with element. This element becomes the child of the deepest descendant within element.</para>
                <para>See also replace().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.EncloseWith(System.String)">
            <summary>
                <para>Encloses this element with the result of parsing markup. This element becomes the child of the deepest descendant within markup.</para>
                <para>See also replace().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.EvaluateJavaScript(System.String)">
            <summary>
                <para>Executes scriptSource with this element as this object.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.FindAll(System.String)">
            <summary>
                <para>Returns a new list of child elements matching the given CSS selector selectorQuery. If there are no matching elements, an empty list is returned.</para>
                <para>Standard CSS2 selector syntax is used for the query.</para>
                <para>Note: This search is performed recursively.</para>
                <para>See also findFirst().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.FindFirst(System.String)">
            <summary>
                <para>Returns the first child element that matches the given CSS selector selectorQuery.</para>
                <para>Standard CSS2 selector syntax is used for the query.</para>
                <para>Note: This search is performed recursively.</para>
                <para>See also findAll().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.HasAttribute(System.String)">
            <summary>
                <para>Returns true if this element has an attribute with the given name; otherwise returns false.</para>
                <para>See also attribute() and setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.HasAttributeNS(System.String,System.String)">
            <summary>
                <para>Returns true if this element has an attribute with the given name, in namespaceUri; otherwise returns false.</para>
                <para>See also attributeNS() and setAttributeNS().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.HasClass(System.String)">
            <summary>
                <para>Returns true if this element has a class with the given name; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.PrependInside(QtWebKit.QWebElement)">
            <summary>
                <para>Prepends element as the element's first child.</para>
                <para>If element is the child of another element, it is re-parented to this element. If element is a child of this element, then its position in the list of children is changed.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also appendInside(), prependOutside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.PrependInside(System.String)">
            <summary>
                <para>Prepends the result of parsing markup as the element's first child.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also appendInside(), prependOutside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.PrependOutside(QtWebKit.QWebElement)">
            <summary>
                <para>Inserts the given element before this element.</para>
                <para>If element is the child of another element, it is re-parented to the parent of this element.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also appendInside(), prependInside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.PrependOutside(System.String)">
            <summary>
                <para>Inserts the result of parsing markup before this element.</para>
                <para>Calling this function on a null element does nothing.</para>
                <para>See also appendInside(), prependInside(), and appendOutside().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.RemoveAllChildren">
            <summary>
                <para>Removes all children from this element.</para>
                <para>See also removeFromDocument() and takeFromDocument().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.RemoveAttribute(System.String)">
            <summary>
                <para>Removes the attribute with the given name from this element.</para>
                <para>See also attribute(), setAttribute(), and hasAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.RemoveAttributeNS(System.String,System.String)">
            <summary>
                <para>Removes the attribute with the given name, in namespaceUri, from this element.</para>
                <para>See also attributeNS(), setAttributeNS(), and hasAttributeNS().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.RemoveClass(System.String)">
            <summary>
                <para>Removes the specified class with the given name from the element.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.RemoveFromDocument">
            <summary>
                <para>Removes this element from the document and makes it a null element.</para>
                <para>See also removeAllChildren() and takeFromDocument().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.Render(QtGui.QPainter)">
            <summary>
                <para>Render the element into painter .</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.Render(QtGui.QPainter,QtCore.QRect)">
            <summary>
                <para>Render the element into painter clipping to clip.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.Replace(QtWebKit.QWebElement)">
            <summary>
                <para>Replaces this element with element.</para>
                <para>This method will not replace the &lt;html&gt;, &lt;head&gt; or &lt;body&gt; elements.</para>
                <para>See also encloseWith().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.Replace(System.String)">
            <summary>
                <para>Replaces this element with the result of parsing markup.</para>
                <para>This method will not replace the &lt;html&gt;, &lt;head&gt; or &lt;body&gt; elements.</para>
                <para>See also encloseWith().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetAttribute(System.String,System.String)">
            <summary>
                <para>Adds an attribute with the given name and value. If an attribute with the same name exists, its value is replaced by value.</para>
                <para>See also attribute(), attributeNS(), and setAttributeNS().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetAttributeNS(System.String,System.String,System.String)">
            <summary>
                <para>Adds an attribute with the given name in namespaceUri with value. If an attribute with the same name exists, its value is replaced by value.</para>
                <para>See also attributeNS(), attribute(), and setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetFocus">
            <summary>
                <para>Gives keyboard input focus to this element</para>
                <para>See also hasFocus().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetInnerXml(System.String)">
            <summary>
                <para>Replaces the contents of this element with markup. The string may contain HTML or XML tags, which is parsed and formatted before insertion into the document.</para>
                <para>Note: This is currently implemented for (X)HTML elements only.</para>
                <para>See also toInnerXml(), toOuterXml(), and setOuterXml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetOuterXml(System.String)">
            <summary>
                <para>Replaces the contents of this element as well as its own tag with markup. The string may contain HTML or XML tags, which is parsed and formatted before insertion into the document.</para>
                <para>Note: This is currently only implemented for (X)HTML elements.</para>
                <para>See also toOuterXml(), toInnerXml(), and setInnerXml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetPlainText(System.String)">
            <summary>
                <para>Replaces the existing content of this element with text.</para>
                <para>This is equivalent to setting the HTML innerText property.</para>
                <para>See also toPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.SetStyleProperty(System.String,System.String)">
            <summary>
                <para>Sets the value of the inline style with the given name to value.</para>
                <para>Setting a value, does not necessarily mean that it will become the applied value, due to the fact that the style property's value might have been set earlier with a higher priority in external or embedded style declarations.</para>
                <para>In order to ensure that the value will be applied, you may have to append "!important" to the value.</para>
                <para>See also styleProperty().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.StyleProperty(System.String,QtWebKit.QWebElement.StyleResolveStrategy)">
            <summary>
                <para>Returns the value of the style with the given name using the specified strategy. If a style with name does not exist, an empty string is returned.</para>
                <para>In CSS, the cascading part depends on which CSS rule has priority and is thus applied. Generally, the last defined rule has priority. Thus, an inline style rule has priority over an embedded block style rule, which in return has priority over an external style rule.</para>
                <para>If the "!important" declaration is set on one of those, the declaration receives highest priority, unless other declarations also use the "!important" declaration. Then, the last "!important" declaration takes predecence.</para>
                <para>See also setStyleProperty().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.TakeFromDocument">
            <summary>
                <para>Removes this element from the document and returns a reference to it.</para>
                <para>The element is still valid after removal, and can be inserted into other parts of the document.</para>
                <para>See also removeAllChildren() and removeFromDocument().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.ToInnerXml">
            <summary>
                <para>Returns the XML content between the element's start and end tags.</para>
                <para>Note: This is currently implemented for (X)HTML elements only.</para>
                <para>Note: The format of the markup returned will obey the namespace of the document containing the element. This means the return value will obey XML formatting rules, such as self-closing tags, only if the document is 'text/xhtml+xml'.</para>
                <para>See also setInnerXml(), setOuterXml(), and toOuterXml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.ToOuterXml">
            <summary>
                <para>Returns this element converted to XML, including the start and the end tags as well as its attributes.</para>
                <para>Note: This is currently implemented for (X)HTML elements only.</para>
                <para>Note: The format of the markup returned will obey the namespace of the document containing the element. This means the return value will obey XML formatting rules, such as self-closing tags, only if the document is 'text/xhtml+xml'.</para>
                <para>See also setOuterXml(), setInnerXml(), and toInnerXml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.ToPlainText">
            <summary>
                <para>Returns the text between the start and the end tag of this element.</para>
                <para>This is equivalent to reading the HTML innerText property.</para>
                <para>See also setPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.ToggleClass(System.String)">
            <summary>
                <para>Adds the specified class with the given name if it is not present. If the class is already present, it will be removed.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.Finalize">
            <summary>
                <para>Destroys the element. However, the underlying DOM element is not destroyed.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.op_Inequality(QtWebKit.QWebElement,QtWebKit.QWebElement)">
            <summary>
                <para>Returns true if this element points to a different underlying DOM object than o; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElement.op_Equality(QtWebKit.QWebElement,QtWebKit.QWebElement)">
            <summary>
                <para>Returns true if this element points to the same underlying DOM object as o; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebElementCollection">
            <summary>
            The QWebElementCollection class represents a collection of web elements.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Elements in a document can be selected using QWebElement::findAll() or using the QWebElement constructor. The collection is composed by choosing all elements in the document that match a specified CSS selector expression.</para>
                <para>The number of selected elements is provided through the count() property. Individual elements can be retrieved by index using at().</para>
                <para>It is also possible to iterate through all elements in the collection using Qt's foreach macro:</para>
                <para> QWebElementCollection collection = document.findAll("p");</para>
                <para> foreach (QWebElement paraElement, collection) {</para>
                <para>     ...</para>
                <para> }</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.#ctor">
            <summary>
                <para>Constructs an empty collection.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.#ctor(QtWebKit.QWebElementCollection)">
            <summary>
                <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.#ctor(QtWebKit.QWebElement,System.String)">
            <summary>
                <para>Constructs a collection of elements from the list of child elements of contextElement that match the specified CSS selector query.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebElementCollection.iterator">
            <summary>
            The QWebElementCollection::iterator class provides an STL-style iterator for QWebElementCollection.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebElementCollection provides STL style iterators for fast low-level access to the elements.</para>
                <para>QWebElementCollection::iterator allows you to iterate over a QWebElementCollection.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.iterator.#ctor(QtWebKit.QWebElementCollection.iterator)">
            <summary>
                <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElementCollection.ConstBegin">
            <summary>
                <para>Returns an STL-style iterator pointing to the first element in the collection.</para>
                <para>See also end().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElementCollection.ConstEnd">
            <summary>
                <para>Returns an STL-style iterator pointing to the imaginary element after the last element in the list.</para>
                <para>See also begin().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElementCollection.Count">
            <summary>
                <para>Returns the number of elements in the collection.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElementCollection.First">
            <summary>
                <para>Returns the first element in the collection.</para>
                <para>See also last(), operator[](), at(), and count().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebElementCollection.Last">
            <summary>
                <para>Returns the last element in the collection.</para>
                <para>See also first(), operator[](), at(), and count().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.Append(QtWebKit.QWebElementCollection)">
            <summary>
                <para>Extends the collection by appending all items of other.</para>
                <para>The resulting collection may include duplicate elements.</para>
                <para>See also operator+=().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.At(System.Int32)">
            <summary>
                <para>Returns the element at index position i in the collection.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.Begin">
            <summary>
                <para>Returns an STL-style iterator pointing to the first element in the collection.</para>
                <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.End">
            <summary>
                <para>Returns an STL-style iterator pointing to the imaginary element after the last element in the list.</para>
                <para>See also begin().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.ToList">
            <summary>
                <para>Returns a QList object with the elements contained in this collection.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.Finalize">
            <summary>
                <para>Destroys the collection.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebElementCollection.op_Addition(QtWebKit.QWebElementCollection,QtWebKit.QWebElementCollection)">
            <summary>
                <para>Returns a collection that contains all the elements of this collection followed by all the elements in the other collection. Duplicates may occur in the result.</para>
                <para>See also operator+=().</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebFrame">
            <summary>
            The QWebFrame class represents a frame in a web page.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebFrame represents a frame inside a web page. Each QWebPage object contains at least one frame, the main frame, obtained using QWebPage::mainFrame(). Additional frames will be created for HTML &lt;frame&gt; or &lt;iframe&gt; elements.</para>
                <para>A frame can be loaded using load() or setUrl(). Alternatively, if you have the HTML content readily available, you can use setHtml() instead.</para>
                <para>The page() function returns a pointer to the web page object. See Elements of QWebView for an explanation of how web frames are related to a web page and web view.</para>
                <para>The QWebFrame class also offers methods to retrieve both the URL currently loaded by the frame (see url()) as well as the URL originally requested to be loaded (see requestedUrl()). These methods make possible the retrieval of the URL before and after a DNS resolution or a redirection occurs during the load process. The requestedUrl() also matches to the URL added to the frame history (QWebHistory) if load is successful.</para>
                <para>The title of an HTML frame can be accessed with the title() property. Additionally, a frame may also specify an icon, which can be accessed using the icon() property. If the title or the icon changes, the corresponding titleChanged() and iconChanged() signals will be emitted. The zoomFactor() property can be used to change the overall size of the content displayed in the frame.</para>
                <para>QWebFrame objects are created and controlled by the web page. You can connect to the web page's frameCreated() signal to be notified when a new frame is created.</para>
                <para>There are multiple ways to programmatically examine the contents of a frame. The hitTestContent() function can be used to find elements by coordinate. For access to the underlying DOM tree, there is documentElement(), findAllElements() and findFirstElement().</para>
                <para>A QWebFrame can be printed onto a QPrinter using the print() function. This function is marked as a slot and can be conveniently connected to QPrintPreviewDialog's paintRequested() signal.</para>
                <para>
                </para>
                <para>See also QWebPage.</para>
            </remarks>
        </member>
        <member name="T:QtWebKit.QWebFrame.RenderLayer">
            <summary>
                <para>This enum describes the layers available for rendering using render(). The layers can be OR-ed together from the following list:</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebFrame.RenderLayer.AllLayers">
            <summary>
                <para>Includes all the above layers</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebFrame.RenderLayer.ContentsLayer">
            <summary>
                <para>The web content of the frame</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebFrame.RenderLayer.PanIconLayer">
            <summary>
                <para>The icon used when panning the frame</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebFrame.RenderLayer.ScrollBarLayer">
            <summary>
                <para>The scrollbars of the frame</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.JavaScriptWindowObjectCleared">
            <summary>
                <para>This signal is emitted whenever the global window object of the JavaScript environment is cleared, e.g., before starting a new load.</para>
                <para>If you intend to add QObjects to a QWebFrame using addToJavaScriptWindowObject(), you should add them in a slot connected to this signal. This ensures that your objects remain accessible when loading new URLs.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.TitleChanged">
            <summary>
                <para>This signal is emitted whenever the title of the frame changes. The title string specifies the new title.</para>
                <para>See also title().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.UrlChanged">
            <summary>
                <para>This signal is emitted with the URL of the frame when the frame's title is received. The new URL is specified by url.</para>
                <para>See also url().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.InitialLayoutCompleted">
            <summary>
                <para>This signal is emitted when the frame is laid out the first time. This is the first time you will see contents displayed on the frame.</para>
                <para>Note: A frame can be laid out multiple times.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.IconChanged">
            <summary>
                <para>This signal is emitted when the icon ("favicon") associated with the frame has been loaded.</para>
                <para>See also icon().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.ContentsSizeChanged">
            <summary>
                <para>This signal is emitted when the frame's contents size changes to size.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also contentsSize().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.LoadStarted">
            <summary>
                <para>This signal is emitted when a new load of this frame is started.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also loadFinished().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.LoadFinished">
            <summary>
                <para>This signal is emitted when a load of this frame is finished. ok will indicate whether the load was successful or any error occurred.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also loadStarted().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebFrame.PageChanged">
            <summary>
                <para>This signal is emitted when this frame has been moved to a different QWebPage.</para>
                <para>This function was introduced in Qt 4.7.</para>
                <para>See also page().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.ChildFrames">
            <summary>
                <para>Returns a list of all frames that are direct children of this frame.</para>
                <para>See also parentFrame().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.DocumentElement">
            <summary>
                <para>Returns the document element of this frame.</para>
                <para>The document element provides access to the entire structured content of the frame.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.FrameName">
            <summary>
                <para>The name of this frame as defined by the parent frame.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.Geometry">
            <summary>
                <para>Return the geometry of the frame relative to it's parent frame.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.MetaData">
            <summary>
                <para>Returns the meta data in this frame as a QMultiMap</para>
                <para>The meta data consists of the name and content attributes of the of the &lt;meta&gt; tags in the HTML document.</para>
                <para>For example:</para>
                <para> &lt;html&gt;</para>
                <para>     &lt;head&gt;</para>
                <para>         &lt;meta name="description" content="This document is a tutorial about Qt development"&gt;</para>
                <para>         &lt;meta name="keywords" content="Qt, WebKit, Programming"&gt;</para>
                <para>     &lt;/head&gt;</para>
                <para>     ...</para>
                <para> &lt;/html&gt;</para>
                <para>Given the above HTML code the metaData() function will return a map with two entries:</para>
                <para>
                </para>
                <para>KeyValue</para>
                <para>"description"	"This document is a tutorial about Qt development"</para>
                <para>"keywords"	"Qt, WebKit, Programming"</para>
                <para>
                </para>
                <para>This function returns a multi map to support multiple meta tags with the same attribute name.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.Page">
            <summary>
                <para>The web page that contains this frame.</para>
                <para>See also pageChanged().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.ParentFrame">
            <summary>
                <para>Returns the parent frame of this frame, or 0 if the frame is the web pages main frame.</para>
                <para>This is equivalent to qobject_cast&lt;QWebFrame*&gt;(frame-&gt;parent()).</para>
                <para>See also childFrames().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.Pos">
            <summary>
                <para>Returns the position of the frame relative to it's parent frame.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.RenderTreeDump">
            <summary>
                <para>Returns a dump of the rendering tree. This is mainly useful for debugging html.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.SecurityOrigin">
            <summary>
                <para>Returns the frame's security origin.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.ZoomFactor">
            <summary>
                <para>This property holds the zoom factor for the frame.</para>
                <para>This property was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.Title">
            <summary>
                <para>This property holds the title of the frame as defined by the HTML &lt;title&gt; element.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.Url">
            <summary>
                <para>This property holds the url of the frame currently viewed.</para>
                <para>Setting this property clears the view and loads the URL.</para>
                <para>By default, this property contains an empty, invalid URL.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.BaseUrl">
            <summary>
                <para>This property holds the base URL of the frame, can be used to resolve relative URLs.</para>
                <para>This property was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.Icon">
            <summary>
                <para>This property holds the icon associated with this frame.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.ContentsSize">
            <summary>
                <para>This property holds the size of the contents in this frame.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebFrame.ScrollPosition">
            <summary>
                <para>This property holds the position the frame is currently scrolled to.</para>
                <para>This property was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.AddToJavaScriptWindowObject(System.String,QtCore.QObject)">
            <summary>
                <para>Make object available under name from within the frame's JavaScript context. The object will be inserted as a child of the frame's window object.</para>
                <para>Qt properties will be exposed as JavaScript properties and slots as JavaScript methods. The interaction between C++ and JavaScript is explained in the documentation of the QtWebKit bridge.</para>
                <para>If you want to ensure that your QObjects remain accessible after loading a new URL, you should add them in a slot connected to the javaScriptWindowObjectCleared() signal.</para>
                <para>If Javascript is not enabled for this page, then this method does nothing.</para>
                <para>The object will never be explicitly deleted by QtWebKit.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.AddToJavaScriptWindowObject(System.String,QtCore.QObject,QtScript.QScriptEngine.ValueOwnership)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Make object available under name from within the frame's JavaScript context. The object will be inserted as a child of the frame's window object.</para>
                <para>Qt properties will be exposed as JavaScript properties and slots as JavaScript methods. The interaction between C++ and JavaScript is explained in the documentation of the QtWebKit bridge.</para>
                <para>If you want to ensure that your QObjects remain accessible after loading a new URL, you should add them in a slot connected to the javaScriptWindowObjectCleared() signal.</para>
                <para>If Javascript is not enabled for this page, then this method does nothing.</para>
                <para>The ownership of object is specified using own.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnContentsSizeChanged(QtCore.QSize)">
            <summary>
                <para>This signal is emitted when the frame's contents size changes to size.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also contentsSize().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.EvaluateJavaScript(System.String)">
            <summary>
                <para>Evaluates the JavaScript defined by scriptSource using this frame as context and returns the result of the last executed statement.</para>
                <para>See also addToJavaScriptWindowObject() and javaScriptWindowObjectCleared().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnEvent(QtCore.QEvent)">
            <summary>
                <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.FindAllElements(System.String)">
            <summary>
                <para>Returns a new list of elements matching the given CSS selector selectorQuery. If there are no matching elements, an empty list is returned.</para>
                <para>Standard CSS2 selector syntax is used for the query.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also QWebElement::findAll().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.FindFirstElement(System.String)">
            <summary>
                <para>Returns the first element in the frame's document that matches the given CSS selector selectorQuery. If there is no matching element, a null element is returned.</para>
                <para>Standard CSS2 selector syntax is used for the query.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also QWebElement::findFirst().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.HitTestContent(QtCore.QPoint)">
            <summary>
                <para>Performs a hit test on the frame contents at the given position pos and returns the hit test result.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnIconChanged">
            <summary>
                <para>This signal is emitted when the icon ("favicon") associated with the frame has been loaded.</para>
                <para>See also icon().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnInitialLayoutCompleted">
            <summary>
                <para>This signal is emitted when the frame is laid out the first time. This is the first time you will see contents displayed on the frame.</para>
                <para>Note: A frame can be laid out multiple times.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnJavaScriptWindowObjectCleared">
            <summary>
                <para>This signal is emitted whenever the global window object of the JavaScript environment is cleared, e.g., before starting a new load.</para>
                <para>If you intend to add QObjects to a QWebFrame using addToJavaScriptWindowObject(), you should add them in a slot connected to this signal. This ensures that your objects remain accessible when loading new URLs.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Load(QtCore.QUrl)">
            <summary>
                <para>Loads url into this frame.</para>
                <para>Note: The view remains the same until enough data has arrived to display the new url.</para>
                <para>See also setUrl(), setHtml(), and setContent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Load(QtNetwork.QNetworkRequest,QtNetwork.QNetworkAccessManager.Operation)">
            <summary>
                <para>Loads a network request, req, into this frame, using the method specified in operation.</para>
                <para>body is optional and is only used for POST operations.</para>
                <para>Note: The view remains the same until enough data has arrived to display the new content.</para>
                <para>See also setUrl().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Load(QtNetwork.QNetworkRequest,QtNetwork.QNetworkAccessManager.Operation,QtCore.QByteArray)">
            <summary>
                <para>Loads a network request, req, into this frame, using the method specified in operation.</para>
                <para>body is optional and is only used for POST operations.</para>
                <para>Note: The view remains the same until enough data has arrived to display the new content.</para>
                <para>See also setUrl().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnLoadFinished(System.Boolean)">
            <summary>
                <para>This signal is emitted when a load of this frame is finished. ok will indicate whether the load was successful or any error occurred.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also loadStarted().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnLoadStarted">
            <summary>
                <para>This signal is emitted when a new load of this frame is started.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnPageChanged">
            <summary>
                <para>This signal is emitted when this frame has been moved to a different QWebPage.</para>
                <para>This function was introduced in Qt 4.7.</para>
                <para>See also page().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Print(QtGui.QPrinter)">
            <summary>
                <para>Prints the frame to the given printer.</para>
                <para>See also render().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Render(QtGui.QPainter)">
            <summary>
                <para>Render the frame into painter.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Render(QtGui.QPainter,QtGui.QRegion)">
            <summary>
                <para>Render the frame into painter clipping to clip.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Render(QtGui.QPainter,QtWebKit.QWebFrame.RenderLayer)">
            <summary>
                <para>Render the layer of the frame using painter clipping to clip.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also print().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Render(QtGui.QPainter,QtWebKit.QWebFrame.RenderLayer,QtGui.QRegion)">
            <summary>
                <para>Render the layer of the frame using painter clipping to clip.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also print().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.Scroll(System.Int32,System.Int32)">
            <summary>
                <para>Scrolls the frame dx pixels to the right and dy pixels downward. Both dx and dy may be negative.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also QWebFrame::scrollPosition.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ScrollBarGeometry(QtCore.Qt.Orientation)">
            <summary>
                <para>Returns the geometry for the scrollbar with orientation orientation.</para>
                <para>If the scrollbar does not exist an empty rect is returned.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ScrollBarMaximum(QtCore.Qt.Orientation)">
            <summary>
                <para>Returns the maximum value for the scrollbar with orientation orientation, or 0 if no scrollbar is found for orientation.</para>
                <para>See also scrollBarMinimum().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ScrollBarMinimum(QtCore.Qt.Orientation)">
            <summary>
                <para>Returns the minimum value for the scrollbar with orientation orientation.</para>
                <para>The minimum value is always 0.</para>
                <para>See also scrollBarMaximum().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ScrollBarPolicy(QtCore.Qt.Orientation)">
            <summary>
                <para>Returns the scrollbar policy for the scrollbar defined by orientation.</para>
                <para>See also setScrollBarPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ScrollBarValue(QtCore.Qt.Orientation)">
            <summary>
                <para>Returns the current value for the scrollbar with orientation orientation, or 0 if no scrollbar is found for orientation.</para>
                <para>See also setScrollBarValue(), scrollBarMinimum(), and scrollBarMaximum().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ScrollToAnchor(System.String)">
            <summary>
                <para>Scrolls the frame to the given anchor name.</para>
                <para>This function was introduced in Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetContent(QtCore.QByteArray,System.String)">
            <summary>
                <para>Sets the content of this frame to the specified content data. If the mimeType argument is empty it is currently assumed that the content is HTML but in future versions we may introduce auto-detection.</para>
                <para>External objects referenced in the content are located relative to baseUrl.</para>
                <para>The data is loaded immediately; external objects are loaded asynchronously.</para>
                <para>Note: This method will not affect session or global history for the frame.</para>
                <para>See also toHtml() and setHtml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetContent(QtCore.QByteArray,System.String,QtCore.QUrl)">
            <summary>
                <para>Sets the content of this frame to the specified content data. If the mimeType argument is empty it is currently assumed that the content is HTML but in future versions we may introduce auto-detection.</para>
                <para>External objects referenced in the content are located relative to baseUrl.</para>
                <para>The data is loaded immediately; external objects are loaded asynchronously.</para>
                <para>Note: This method will not affect session or global history for the frame.</para>
                <para>See also toHtml() and setHtml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetFocus">
            <summary>
                <para>Gives keyboard input focus to this frame.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also hasFocus().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetHtml(System.String)">
            <summary>
                <para>Sets the content of this frame to html. baseUrl is optional and used to resolve relative URLs in the document, such as referenced images or stylesheets.</para>
                <para>The html is loaded immediately; external objects are loaded asynchronously.</para>
                <para>If a script in the html runs longer than the default script timeout (currently 10 seconds), for example due to being blocked by a modal JavaScript alert dialog, this method will return as soon as possible after the timeout and any subsequent html will be loaded asynchronously.</para>
                <para>When using this method WebKit assumes that external resources such as JavaScript programs or style sheets are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. It is also possible for the encoding to be specified by web server.</para>
                <para>This is a convenience function equivalent to setContent(html, "text/html", baseUrl).</para>
                <para>Note: This method will not affect session or global history for the frame.</para>
                <para>Warning: This function works only for HTML, for other mime types (i.e. XHTML, SVG) setContent() should be used instead.</para>
                <para>See also toHtml(), setContent(), and load().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetHtml(System.String,QtCore.QUrl)">
            <summary>
                <para>Sets the content of this frame to html. baseUrl is optional and used to resolve relative URLs in the document, such as referenced images or stylesheets.</para>
                <para>The html is loaded immediately; external objects are loaded asynchronously.</para>
                <para>If a script in the html runs longer than the default script timeout (currently 10 seconds), for example due to being blocked by a modal JavaScript alert dialog, this method will return as soon as possible after the timeout and any subsequent html will be loaded asynchronously.</para>
                <para>When using this method WebKit assumes that external resources such as JavaScript programs or style sheets are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. It is also possible for the encoding to be specified by web server.</para>
                <para>This is a convenience function equivalent to setContent(html, "text/html", baseUrl).</para>
                <para>Note: This method will not affect session or global history for the frame.</para>
                <para>Warning: This function works only for HTML, for other mime types (i.e. XHTML, SVG) setContent() should be used instead.</para>
                <para>See also toHtml(), setContent(), and load().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetScrollBarPolicy(QtCore.Qt.Orientation,QtCore.Qt.ScrollBarPolicy)">
            <summary>
                <para>Sets the scrollbar policy for the scrollbar defined by orientation to policy.</para>
                <para>See also scrollBarPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.SetScrollBarValue(QtCore.Qt.Orientation,System.Int32)">
            <summary>
                <para>Sets the current value for the scrollbar with orientation orientation.</para>
                <para>The scrollbar forces the value to be within the legal range: minimum &lt;= value &lt;= maximum.</para>
                <para>Changing the value also updates the thumb position.</para>
                <para>See also scrollBarValue(), scrollBarMinimum(), and scrollBarMaximum().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnTitleChanged(System.String)">
            <summary>
                <para>This signal is emitted whenever the title of the frame changes. The title string specifies the new title.</para>
                <para>See also title().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ToHtml">
            <summary>
                <para>Returns the frame's content as HTML, enclosed in HTML and BODY tags.</para>
                <para>See also setHtml() and toPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.ToPlainText">
            <summary>
                <para>Returns the content of this frame converted to plain text, completely stripped of all HTML formatting.</para>
                <para>See also toHtml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebFrame.OnUrlChanged(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted with the URL of the frame when the frame's title is received. The new URL is specified by url.</para>
                <para>See also url().</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebHistory">
            <summary>
            The QWebHistory class represents the history of a QWebPage
            </summary>
            <remarks>
                <para>
                </para>
                <para>Each QWebPage instance contains a history of visited pages that can be accessed by QWebPage::history(). QWebHistory represents this history and makes it possible to navigate it.</para>
                <para>The history uses the concept of a current item, dividing the pages visited into those that can be visited by navigating back and forward using the back() and forward() functions. The current item can be obtained by calling currentItem(), and an arbitrary item in the history can be made the current item by passing it to goToItem().</para>
                <para>A list of items describing the pages that can be visited by going back can be obtained by calling the backItems() function; similarly, items describing the pages ahead of the current page can be obtained with the forwardItems() function. The total list of items is obtained with the items() function.</para>
                <para>Just as with containers, functions are available to examine the history in terms of a list. Arbitrary items in the history can be obtained with itemAt(), the total number of items is given by count(), and the history can be cleared with the clear() function.</para>
                <para>QWebHistory's state can be saved to a QDataStream using the &gt;&gt; operator and loaded by using the &lt;&lt; operator.</para>
                <para>
                </para>
                <para>See also QWebHistoryItem, QWebHistoryInterface, and QWebPage.</para>
            </remarks>
        </member>
        <member name="P:QtWebKit.QWebHistory.MaximumItemCount">
            <summary>
                <para>Returns the maximum number of items in the history.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>Sets the maximum number of items in the history to count.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.BackItem">
            <summary>
                <para>Returns the item before the current item in the history.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.CanGoBack">
            <summary>
                <para>Returns true if there is an item preceding the current item in the history; otherwise returns false.</para>
                <para>See also canGoForward().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.CanGoForward">
            <summary>
                <para>Returns true if we have an item to go forward to; otherwise returns false.</para>
                <para>See also canGoBack().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.Count">
            <summary>
                <para>Returns the total number of items in the history.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.CurrentItem">
            <summary>
                <para>Returns the current item in the history.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.CurrentItemIndex">
            <summary>
                <para>Returns the index of the current item in history.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.ForwardItem">
            <summary>
                <para>Returns the item after the current item in the history.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistory.Items">
            <summary>
                <para>Returns a list of all items currently in the history.</para>
                <para>See also count() and clear().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.Back">
            <summary>
                <para>Set the current item to be the previous item in the history and goes to the corresponding page; i.e., goes back one history item.</para>
                <para>See also forward() and goToItem().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.BackItems(System.Int32)">
            <summary>
                <para>Returns the list of items in the backwards history list. At most maxItems entries are returned.</para>
                <para>See also forwardItems().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.Clear">
            <summary>
                <para>Clears the history.</para>
                <para>See also count() and items().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.Forward">
            <summary>
                <para>Sets the current item to be the next item in the history and goes to the corresponding page; i.e., goes forward one history item.</para>
                <para>See also back() and goToItem().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.ForwardItems(System.Int32)">
            <summary>
                <para>Returns the list of items in the forward history list. At most maxItems entries are returned.</para>
                <para>See also backItems().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.GoToItem(QtWebKit.QWebHistoryItem)">
            <summary>
                <para>Sets the current item to be the specified item in the history and goes to the page.</para>
                <para>See also back() and forward().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistory.ItemAt(System.Int32)">
            <summary>
                <para>Returns the item at index i in the history.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebHistoryInterface">
            <summary>
            The QWebHistoryInterface class provides an interface to implement link history.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The QWebHistoryInterface is an interface that can be used to keep track of visited links. It contains two pure virtual methods that are called by the WebKit engine: addHistoryEntry() is used to add urls that have been visited to the interface, while historyContains() is used to query whether the given url has been visited by the user. By default the QWebHistoryInterface is not set, so WebKit does not keep track of visited links.</para>
                <para>Note: The history tracked by QWebHistoryInterface is not specific to an instance of QWebPage but applies to all pages.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebHistoryInterface.#ctor(QtCore.QObject)">
            <summary>
                <para>Constructs a new QWebHistoryInterface with parent parent.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryInterface.DefaultInterface">
            <summary>
                <para>Returns the default interface that will be used by WebKit. If no default interface has been set, WebKit will not keep track of visited links and a null pointer will be returned.</para>
                <para>Sets a new default interface, defaultInterface, that will be used by all of WebKit to keep track of visited links.</para>
                <para>If an interface without a parent has already been set, the old interface will be deleted. When the application exists QWebHistoryInterface will automatically delete the defaultInterface if it does not have a parent.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistoryInterface.AddHistoryEntry(System.String)">
            <summary>
                <para>Called by WebKit to add another url to the list of visited pages.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistoryInterface.HistoryContains(System.String)">
            <summary>
                <para>Called by the WebKit engine to query whether a certain url has been visited by the user already. Returns true if the url is part of the history of visited links; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistoryInterface.Finalize">
            <summary>
                <para>Destroys the interface. If this is currently the default interface it will be unset.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebHistoryItem">
            <summary>
            The QWebHistoryItem class represents one item in the history of a QWebPage
            </summary>
            <remarks>
                <para>
                </para>
                <para>Each QWebHistoryItem instance represents an entry in the history stack of a Web page, containing information about the page, its location, and when it was last visited.</para>
                <para>The following table shows the properties of the page held by the history item, and the functions used to access them.</para>
                <para>
                </para>
                <para>FunctionDescription</para>
                <para>title()	The page title.</para>
                <para>url()	The location of the page.</para>
                <para>originalUrl()	The URL used to access the page.</para>
                <para>lastVisited()	The date and time of the user's last visit to the page.</para>
                <para>icon()	The icon associated with the page that was provided by the server.</para>
                <para>userData()	The user specific data that was stored with the history item.</para>
                <para>
                </para>
                <para>Note: QWebHistoryItem objects are value based, but explicitly shared. Changing a QWebHistoryItem instance by calling setUserData() will change all copies of that instance.</para>
                <para>
                </para>
                <para>See also QWebHistory, QWebPage::history(), and QWebHistoryInterface.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebHistoryItem.#ctor(QtWebKit.QWebHistoryItem)">
            <summary>
                <para>Constructs a history item from other. The new item and other will share their data, and modifying either this item or other will modify both instances.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.UserData">
            <summary>
                <para>Returns the user specific data that was stored with the history item.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>Stores user specific data userData with the history item.</para>
                <para>Note: All copies of this item will be modified.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.Icon">
            <summary>
                <para>Returns the icon associated with the history item.</para>
                <para>See also title(), url(), and lastVisited().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.IsValid">
            <summary>
                <para>Returns whether this is a valid history item.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.LastVisited">
            <summary>
                <para>Returns the date and time that the page associated with the item was last visited.</para>
                <para>See also title(), icon(), and url().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.OriginalUrl">
            <summary>
                <para>Returns the original URL associated with the history item.</para>
                <para>See also url().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.Title">
            <summary>
                <para>Returns the title of the page associated with the history item.</para>
                <para>See also icon(), url(), and lastVisited().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHistoryItem.Url">
            <summary>
                <para>Returns the URL associated with the history item.</para>
                <para>See also originalUrl(), title(), and lastVisited().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHistoryItem.Finalize">
            <summary>
                <para>Destroys the history item.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebHitTestResult">
            <summary>
            The QWebHitTestResult class provides information about the web page content after a hit test.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebHitTestResult is returned by QWebFrame::hitTestContent() to provide information about the content of the web page at the specified position.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebHitTestResult.#ctor">
            <summary>
                <para>Constructs a null hit test result.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHitTestResult.#ctor(QtWebKit.QWebHitTestResult)">
            <summary>
                <para>Constructs a hit test result from other.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.AlternateText">
            <summary>
                <para>Returns the alternate text of the element. This corresponds to the HTML alt attribute.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.BoundingRect">
            <summary>
                <para>Returns the bounding rect of the element.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.Element">
            <summary>
                <para>Returns the underlying DOM element as QWebElement.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.EnclosingBlockElement">
            <summary>
                <para>Returns the block element that encloses the element hit.</para>
                <para>A block element is an element that is rendered using the CSS "block" style. This includes for example text paragraphs.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.Frame">
            <summary>
                <para>Returns the frame the hit test was executed in.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.ImageUrl">
            <summary>
                <para>Returns the url of the image.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.IsContentEditable">
            <summary>
                <para>Returns true if the content is editable by the user; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.IsContentSelected">
            <summary>
                <para>Returns true if the content tested is part of the selection; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.IsNull">
            <summary>
                <para>Returns true if the hit test result is null; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.LinkElement">
            <summary>
                <para>Returns the element that represents the link.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also linkTargetFrame().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.LinkTargetFrame">
            <summary>
                <para>Returns the frame that will load the link if it is activated.</para>
                <para>See also linkElement().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.LinkText">
            <summary>
                <para>Returns the text of the link.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.LinkTitle">
            <summary>
                <para>Returns the title of the link.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.LinkUrl">
            <summary>
                <para>Returns the url to which the link points to.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.Pixmap">
            <summary>
                <para>Returns a QPixmap containing the image. A null pixmap is returned if the element being tested is not an image.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.Pos">
            <summary>
                <para>Returns the position where the hit test occured.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebHitTestResult.Title">
            <summary>
                <para>Returns the title of the nearest enclosing HTML element.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebHitTestResult.Finalize">
            <summary>
                <para>Destructor.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebInspector">
            <summary>
            The QWebInspector class allows the placement and control of a QWebPage's inspector. The inspector can display a page's hierarchy, its loading statistics and the current state of its individual elements. It is mostly used by web developers.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The QWebPage to be inspected must be specified using the setPage() method.</para>
                <para>A typical use of QWebInspector follows:</para>
                <para>     // ...</para>
                <para>     QWebPage *page = new QWebPage;</para>
                <para>     // ...</para>
                <para>
                </para>
                <para>     QWebInspector *inspector = new QWebInspector;</para>
                <para>     inspector-&gt;setPage(page);</para>
                <para>A QWebInspector can be made visible either programmatically using setVisible(), or by the user through the attached QWebPage's context menu.</para>
                <para>Note: A QWebInspector will display a blank widget if either:</para>
                <para>
                </para>
                <para>page() is null</para>
                <para>QWebSettings::DeveloperExtrasEnabled is false</para>
                <para>
                </para>
                <para>
                </para>
                <para>Resources</para>
                <para>This class acts mostly as a container and a controller for the inspector. Most of the resources needed by the inspector are owned by the associated QWebPage and are allocated the first time that:</para>
                <para>
                </para>
                <para>an element is inspected</para>
                <para>the QWebInspector is shown.</para>
                <para>
                </para>
                <para>
                </para>
                <para>Inspector configuration persistence</para>
                <para>The inspector allows the user to configure some options through its user interface (e.g. the resource tracking "Always enable" option). These settings will be persisted automatically by QtWebKit only if your application previously called QCoreApplication::setOrganizationName() and QCoreApplication::setApplicationName(). See QSettings's default constructor documentation for an explanation of why this is necessary.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebInspector.#ctor(QtGui.QWidget)">
            <summary>
                <para>Constructs an unbound QWebInspector with parent as its parent.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebInspector.Page">
            <summary>
                <para>Returns the inspected QWebPage. If no web page is currently associated, a null pointer is returned.</para>
                <para>Bind this inspector to the QWebPage to be inspected.</para>
                <para>Notes:</para>
                <para>
                </para>
                <para>There can only be one QWebInspector associated with a QWebPage and vice versa.</para>
                <para>Calling this method with a null page will break the current association, if any.</para>
                <para>If page is already associated to another QWebInspector, the association will be replaced and the previous QWebInspector will become unbound</para>
                <para>
                </para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebInspector.SizeHint">
            <summary>
                <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebInspector.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
                <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebInspector.OnEvent(QtCore.QEvent)">
            <summary>
                <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebInspector.OnHideEvent(QtGui.QHideEvent)">
            <summary>
                <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebInspector.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
                <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebInspector.OnShowEvent(QtGui.QShowEvent)">
            <summary>
                <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebInspector.Finalize">
            <summary>
                <para>Destroys the inspector.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage">
            <summary>
            The QWebPage class provides an object to view and edit web documents.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebPage holds a main frame responsible for web content, settings, the history of navigated links and actions. This class can be used, together with QWebFrame, to provide functionality like QWebView in a widget-less environment.</para>
                <para>QWebPage's API is very similar to QWebView, as you are still provided with common functions like action() (known as pageAction() in QWebView), triggerAction(), findText() and settings(). More QWebView-like functions can be found in the main frame of QWebPage, obtained via the mainFrame() function. For example, the load(), setUrl() and setHtml() functions for QWebPage can be accessed using QWebFrame.</para>
                <para>The loadStarted() signal is emitted when the page begins to load.The loadProgress() signal, on the other hand, is emitted whenever an element of the web page completes loading, such as an embedded image, a script, etc. Finally, the loadFinished() signal is emitted when the page contents are loaded completely, independent of script execution or page rendering. Its argument, either true or false, indicates whether or not the load operation succeeded.</para>
                <para>
                </para>
                <para>Using QWebPage in a Widget-less Environment</para>
                <para>Before you begin painting a QWebPage object, you need to set the size of the viewport by calling setViewportSize(). Then, you invoke the main frame's render function (QWebFrame::render()). An example of this is shown in the code snippet below.</para>
                <para>Suppose we have a Thumbnail class as follows:</para>
                <para> class Thumbnailer : public QObject</para>
                <para> {</para>
                <para>     Q_OBJECT</para>
                <para>
                </para>
                <para> public:</para>
                <para>     Thumbnailer(const QUrl &amp;url);</para>
                <para>
                </para>
                <para> signals:</para>
                <para>     void finished();</para>
                <para>
                </para>
                <para> private slots:</para>
                <para>     void render();</para>
                <para>
                </para>
                <para> private:</para>
                <para>     QWebPage page;</para>
                <para>
                </para>
                <para> };</para>
                <para>The Thumbnail's constructor takes in a url. We connect our QWebPage object's loadFinished() signal to our private slot, render().</para>
                <para> Thumbnailer::Thumbnailer(const QUrl &amp;url)</para>
                <para> {</para>
                <para>     page.mainFrame()-&gt;load(url);</para>
                <para>     connect(&amp;page, SIGNAL(loadFinished(bool)),</para>
                <para>         this, SLOT(render()));</para>
                <para> }</para>
                <para>The render() function shows how we can paint a thumbnail using a QWebPage object.</para>
                <para> void Thumbnailer::render()</para>
                <para> {</para>
                <para>     page.setViewportSize(page.mainFrame()-&gt;contentsSize());</para>
                <para>     QImage image(page.viewportSize(), QImage::Format_ARGB32);</para>
                <para>     QPainter painter(&amp;image);</para>
                <para>
                </para>
                <para>     page.mainFrame()-&gt;render(&amp;painter);</para>
                <para>     painter.end();</para>
                <para>
                </para>
                <para>     QImage thumbnail = image.scaled(400, 400);</para>
                <para>     thumbnail.save("thumbnail.png");</para>
                <para>
                </para>
                <para>     emit finished();</para>
                <para> }</para>
                <para>We begin by setting the viewportSize and then we instantiate a QImage object, image, with the same size as our viewportSize. This image is then sent as a parameter to painter. Next, we render the contents of the main frame and its subframes into painter. Finally, we save the scaled image.</para>
                <para>
                </para>
                <para>See also QWebFrame.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebPage.#ctor(QtCore.QObject)">
            <summary>
                <para>Constructs an empty QWebPage with parent parent.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ChooseMultipleFilesExtensionOption.ParentFrame">
            <summary>
                <para>This variable holds the frame in which the request originated.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ChooseMultipleFilesExtensionOption.SuggestedFileNames">
            <summary>
                <para>This variable holds the suggested filenames.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ChooseMultipleFilesExtensionReturn.FileNames">
            <summary>
                <para>This variable holds the selected filenames.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionOption.Domain">
            <summary>
                <para>This variable holds the domain that reported the error.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionOption.Error">
            <summary>
                <para>This variable holds the error code. Interpretation of the value depends on the domain.</para>
                <para>See also QWebPage::ErrorDomain.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionOption.ErrorString">
            <summary>
                <para>This variable holds a string that describes the error.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionOption.Frame">
            <summary>
                <para>This variable holds the frame associated with the error.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionOption.Url">
            <summary>
                <para>This variable holds the url for which an error occurred.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.ErrorPageExtensionReturn.#ctor">
            <summary>
                <para>Constructs a new error page object.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionReturn.BaseUrl">
            <summary>
                <para>This variable holds the base url.</para>
                <para>External objects such as stylesheets or images referenced in the HTML are located relative to this url.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionReturn.Content">
            <summary>
                <para>This variable holds the HTML content of the error page.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionReturn.ContentType">
            <summary>
                <para>This variable holds the error page's content type.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ErrorPageExtensionReturn.Encoding">
            <summary>
                <para>This variable holds the error page encoding.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.ViewportAttributes">
            <summary>
            The QWebPage::ViewportAttributes class describes hints that can be applied to a viewport.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebPage::ViewportAttributes provides a description of a viewport, such as viewport geometry, initial scale factor with limits, plus information about whether a user should be able to scale the contents in the viewport or not, ie. by zooming.</para>
                <para>ViewportAttributes can be set by a web author using the viewport meta tag extension, documented at Safari Reference Library: Using the Viewport Meta Tag.</para>
                <para>All values might not be set, as such when dealing with the hints, the developer needs to check whether the values are valid. Negative values denote an invalid qreal value.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebPage.ViewportAttributes.#ctor">
            <summary>
                <para>Constructs an empty QWebPage::ViewportAttributes.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.ViewportAttributes.#ctor(QtWebKit.QWebPage.ViewportAttributes)">
            <summary>
                <para>Constructs a QWebPage::ViewportAttributes which is a copy from other .</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.DevicePixelRatio">
            <summary>
                <para>qreal ViewportAttributes::initialScaleFactor () const</para>
                <para>Returns the initial scale of the viewport as a multiplier.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.InitialScaleFactor">
            <summary>
                <para>Returns the initial scale of the viewport as a multiplier.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.IsUserScalable">
            <summary>
                <para>Determines whether or not the scale can be modified by the user.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.IsValid">
            <summary>
                <para>Returns whether this is a valid ViewportAttributes or not.</para>
                <para>An invalid ViewportAttributes will have an empty QSize, negative values for scale factors and true for the boolean isUserScalable.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.MaximumScaleFactor">
            <summary>
                <para>Returns the maximum scale value of the viewport as a multiplier.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.MinimumScaleFactor">
            <summary>
                <para>Returns the minimum scale value of the viewport as a multiplier.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportAttributes.Size">
            <summary>
                <para>Returns the size of the viewport.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.ViewportAttributes.Finalize">
            <summary>
                <para>Destroys the QWebPage::ViewportAttributes.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.ErrorDomain">
            <summary>
                <para>This enum describes the domain of an ErrorPageExtensionOption object (i.e. the layer in which the error occurred).</para>
                <para>This enum was introduced or modified in Qt 4.6.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.ErrorDomain.Http">
            <summary>
                <para>The error occurred in the HTTP layer; the error code is a HTTP status code (see QNetworkRequest::HttpStatusCodeAttribute).</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.ErrorDomain.QtNetwork">
            <summary>
                <para>The error occurred in the QtNetwork layer; the error code is of type QNetworkReply::NetworkError.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.ErrorDomain.WebKit">
            <summary>
                <para>The error is an internal WebKit error.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.Extension">
            <summary>
                <para>This enum describes the types of extensions that the page can support. Before using these extensions, you should verify that the extension is supported by calling supportsExtension().</para>
                <para>See also ChooseMultipleFilesExtensionOption, ChooseMultipleFilesExtensionReturn, ErrorPageExtensionOption, and ErrorPageExtensionReturn.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.Extension.ChooseMultipleFilesExtension">
            <summary>
                <para>Whether the web page supports multiple file selection. This extension is invoked when the web content requests one or more file names, for example as a result of the user clicking on a "file upload" button in a HTML form where multiple file selection is allowed.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.Extension.ErrorPageExtension">
            <summary>
                <para>Whether the web page can provide an error page when loading fails. (introduced in Qt 4.6)</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.FindFlag">
            <summary>
                <para>This enum describes the options available to the findText() function. The options can be OR-ed together from the following list:</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.FindFlag.FindBackward">
            <summary>
                <para>Searches backwards instead of forwards.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.FindFlag.FindCaseSensitively">
            <summary>
                <para>By default findText() works case insensitive. Specifying this option changes the behaviour to a case sensitive find operation.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.FindFlag.FindWrapsAroundDocument">
            <summary>
                <para>Makes findText() restart from the beginning of the document if the end was reached and the text was not found.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.FindFlag.HighlightAllOccurrences">
            <summary>
                <para>Highlights all existing occurrences of a specific string. (This value was introduced in 4.6.)</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.LinkDelegationPolicy">
            <summary>
                <para>This enum defines the delegation policies a webpage can have when activating links and emitting the linkClicked() signal.</para>
                <para>See also QWebPage::linkDelegationPolicy.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.LinkDelegationPolicy.DelegateAllLinks">
            <summary>
                <para>Whenever a link is activated the linkClicked() signal is emitted.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.LinkDelegationPolicy.DelegateExternalLinks">
            <summary>
                <para>When activating links that point to documents not stored on the local filesystem or an equivalent - such as the Qt resource system - then linkClicked() is emitted.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.LinkDelegationPolicy.DontDelegateLinks">
            <summary>
                <para>No links are delegated. Instead, QWebPage tries to handle them all.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.NavigationType">
            <summary>
                <para>This enum describes the types of navigation available when browsing through hyperlinked documents.</para>
                <para>See also acceptNavigationRequest().</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.NavigationType.NavigationTypeBackOrForward">
            <summary>
                <para>Navigation to a previously shown document in the back or forward history is requested.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.NavigationType.NavigationTypeFormResubmitted">
            <summary>
                <para>An HTML form was submitted a second time.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.NavigationType.NavigationTypeFormSubmitted">
            <summary>
                <para>The user activated a submit button for an HTML form.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.NavigationType.NavigationTypeLinkClicked">
            <summary>
                <para>The user clicked on a link or pressed return on a focused link.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.NavigationType.NavigationTypeOther">
            <summary>
                <para>A navigation to another document using a method not listed above.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.NavigationType.NavigationTypeReload">
            <summary>
                <para>The user activated the reload action.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.WebAction">
            <summary>
                <para>This enum describes the types of action which can be performed on the web page.</para>
                <para>Actions only have an effect when they are applicable. The availability of actions can be be determined by checking isEnabled() on the action returned by action().</para>
                <para>One method of enabling the text editing, cursor movement, and text selection actions is by setting contentEditable to true.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.AlignCenter">
            <summary>
                <para>Applies center alignment to content.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.AlignJustified">
            <summary>
                <para>Applies full justification to content.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.AlignLeft">
            <summary>
                <para>Applies left justification to content.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.AlignRight">
            <summary>
                <para>Applies right justification to content.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Back">
            <summary>
                <para>Navigate back in the history of navigated links.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Copy">
            <summary>
                <para>Copy the content currently selected into the clipboard.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.CopyImageToClipboard">
            <summary>
                <para>Copy the highlighted image to the clipboard.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.CopyImageUrlToClipboard">
            <summary>
                <para>Copy the highlighted image's URL to the clipboard.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.CopyLinkToClipboard">
            <summary>
                <para>Copy the current link to the clipboard.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Cut">
            <summary>
                <para>Cut the content currently selected into the clipboard.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.DeleteEndOfWord">
            <summary>
                <para>Delete to the end of the word.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.DeleteStartOfWord">
            <summary>
                <para>Delete to the start of the word.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.DownloadImageToDisk">
            <summary>
                <para>Download the highlighted image to the disk.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.DownloadLinkToDisk">
            <summary>
                <para>Download the current link to the disk.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Forward">
            <summary>
                <para>Navigate forward in the history of navigated links.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Indent">
            <summary>
                <para>Increases the indentation of the currently selected format block by one increment.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.InsertLineSeparator">
            <summary>
                <para>Insert a new line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.InsertOrderedList">
            <summary>
                <para>Toggles the selection between an ordered list and a normal block.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.InsertParagraphSeparator">
            <summary>
                <para>Insert a new paragraph.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.InsertUnorderedList">
            <summary>
                <para>Toggles the selection between an ordered list and a normal block.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.InspectElement">
            <summary>
                <para>Show the Web Inspector with the currently highlighted HTML element.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToEndOfBlock">
            <summary>
                <para>Move the cursor to the end of the block.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToEndOfDocument">
            <summary>
                <para>Move the cursor to the end of the document.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToEndOfLine">
            <summary>
                <para>Move the cursor to the end of the line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToNextChar">
            <summary>
                <para>Move the cursor to the next character.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToNextLine">
            <summary>
                <para>Move the cursor to the next line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToNextWord">
            <summary>
                <para>Move the cursor to the next word.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToPreviousChar">
            <summary>
                <para>Move the cursor to the previous character.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToPreviousLine">
            <summary>
                <para>Move the cursor to the previous line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToPreviousWord">
            <summary>
                <para>Move the cursor to the previous word.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToStartOfBlock">
            <summary>
                <para>Move the cursor to the start of the block.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToStartOfDocument">
            <summary>
                <para>Move the cursor to the start of the document.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.MoveToStartOfLine">
            <summary>
                <para>Move the cursor to the start of the line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.NoWebAction">
            <summary>
                <para>No action is triggered.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.OpenFrameInNewWindow">
            <summary>
                <para>Replicate the current frame in a new window.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.OpenImageInNewWindow">
            <summary>
                <para>Open the highlighted image in a new window.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.OpenLink">
            <summary>
                <para>Open the current link.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.OpenLinkInNewWindow">
            <summary>
                <para>Open the current link in a new window.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Outdent">
            <summary>
                <para>Decreases the indentation of the currently selected format block by one increment.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Paste">
            <summary>
                <para>Paste content from the clipboard.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.PasteAndMatchStyle">
            <summary>
                <para>Paste content from the clipboard with current style.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Redo">
            <summary>
                <para>Redo the last editing action.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Reload">
            <summary>
                <para>Reload the current page.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ReloadAndBypassCache">
            <summary>
                <para>Reload the current page, but do not use any local cache. (Added in Qt 4.6)</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.RemoveFormat">
            <summary>
                <para>Removes formatting and style.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectAll">
            <summary>
                <para>Selects all content.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectEndOfBlock">
            <summary>
                <para>Select to the end of the block.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectEndOfDocument">
            <summary>
                <para>Select to the end of the document.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectEndOfLine">
            <summary>
                <para>Select to the end of the line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectNextChar">
            <summary>
                <para>Select to the next character.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectNextLine">
            <summary>
                <para>Select to the next line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectNextWord">
            <summary>
                <para>Select to the next word.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectPreviousChar">
            <summary>
                <para>Select to the previous character.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectPreviousLine">
            <summary>
                <para>Select to the previous line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectPreviousWord">
            <summary>
                <para>Select to the previous word.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectStartOfBlock">
            <summary>
                <para>Select to the start of the block.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectStartOfDocument">
            <summary>
                <para>Select to the start of the document.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SelectStartOfLine">
            <summary>
                <para>Select to the start of the line.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SetTextDirectionDefault">
            <summary>
                <para>Set the text direction to the default direction.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SetTextDirectionLeftToRight">
            <summary>
                <para>Set the text direction to left-to-right.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.SetTextDirectionRightToLeft">
            <summary>
                <para>Set the text direction to right-to-left.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Stop">
            <summary>
                <para>Stop loading the current page.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.StopScheduledPageRefresh">
            <summary>
                <para>Stop all pending page refresh/redirect requests.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ToggleBold">
            <summary>
                <para>Toggle the formatting between bold and normal weight.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ToggleItalic">
            <summary>
                <para>Toggle the formatting between italic and normal style.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ToggleStrikethrough">
            <summary>
                <para>Toggle the formatting between strikethrough and normal style.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ToggleSubscript">
            <summary>
                <para>Toggle the formatting between subscript and baseline.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ToggleSuperscript">
            <summary>
                <para>Toggle the formatting between supercript and baseline.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.ToggleUnderline">
            <summary>
                <para>Toggle underlining.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebAction.Undo">
            <summary>
                <para>Undo the last editing action.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPage.WebWindowType">
            <summary>
                <para>This enum describes the types of window that can be created by the createWindow() function.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebWindowType.WebBrowserWindow">
            <summary>
                <para>The window is a regular web browser window.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebPage.WebWindowType.WebModalDialog">
            <summary>
                <para>The window acts as modal dialog.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.SwallowContextMenuEvent">
            <summary>
                <para>Filters the context menu event, event, through handlers for scrollbars and custom event handlers in the web page. Returns true if the event was handled; otherwise false.</para>
                <para>A web page may swallow a context menu event through a custom event handler, allowing for context menus to be implemented in HTML/JavaScript. This is used by Google Maps, for example.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.LoadStarted">
            <summary>
                <para>This signal is emitted when a page starts loading content.</para>
                <para>See also loadFinished().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.LoadProgress">
            <summary>
                <para>This signal is emitted when the global progress status changes. The current value is provided by progress and scales from 0 to 100, which is the default range of QProgressBar. It accumulates changes from all the child frames.</para>
                <para>See also bytesReceived().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.LoadFinished">
            <summary>
                <para>This signal is emitted when the page finishes loading content. This signal is independant of script execution or page rendering. ok will indicate whether the load was successful or any error occurred.</para>
                <para>See also loadStarted() and ErrorPageExtension.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.LinkHovered">
            <summary>
                <para>This signal is emitted when the mouse hovers over a link.</para>
                <para>link contains the link url. title is the link element's title, if it is specified in the markup. textContent provides text within the link element, e.g., text inside an HTML anchor tag.</para>
                <para>When the mouse leaves the link element the signal is emitted with empty parameters.</para>
                <para>See also linkClicked().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.StatusBarMessage">
            <summary>
                <para>This signal is emitted when the statusbar text is changed by the page.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.SelectionChanged">
            <summary>
                <para>This signal is emitted whenever the selection changes, either interactively or programmatically (e.g. by calling triggerAction() with a selection action).</para>
                <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.FrameCreated">
            <summary>
                <para>This signal is emitted whenever the page creates a new frame.</para>
                <para>See also currentFrame().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.GeometryChangeRequested">
            <summary>
                <para>This signal is emitted whenever the document wants to change the position and size of the page to geom. This can happen for example through JavaScript.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.RepaintRequested">
            <summary>
                <para>This signal is emitted whenever this QWebPage should be updated. It's useful when rendering a QWebPage without a QWebView or QGraphicsWebView. dirtyRect contains the area that needs to be updated. To paint the QWebPage get the mainFrame() and call the render(QPainter*, const QRegion&amp;) method with the dirtyRect as the second parameter.</para>
                <para>See also mainFrame() and view().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.ScrollRequested">
            <summary>
                <para>This signal is emitted whenever the content given by rectToScroll needs to be scrolled dx and dy downwards and no view was set.</para>
                <para>See also view().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.WindowCloseRequested">
            <summary>
                <para>This signal is emitted whenever the page requests the web browser window to be closed, for example through the JavaScript window.close() call.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.PrintRequested">
            <summary>
                <para>This signal is emitted whenever the page requests the web browser to print frame, for example through the JavaScript window.print() call.</para>
                <para>See also QWebFrame::print() and QPrintPreviewDialog.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.LinkClicked">
            <summary>
                <para>This signal is emitted whenever the user clicks on a link and the page's linkDelegationPolicy property is set to delegate the link handling for the specified url.</para>
                <para>By default no links are delegated and are handled by QWebPage instead.</para>
                <para>Note: This signal possibly won't be emitted for clicked links which use JavaScript to trigger navigation.</para>
                <para>See also linkHovered().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.ToolBarVisibilityChangeRequested">
            <summary>
                <para>This signal is emitted whenever the visibility of the toolbar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.StatusBarVisibilityChangeRequested">
            <summary>
                <para>This signal is emitted whenever the visibility of the statusbar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.MenuBarVisibilityChangeRequested">
            <summary>
                <para>This signal is emitted whenever the visibility of the menubar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.UnsupportedContent">
            <summary>
                <para>This signal is emitted when WebKit cannot handle a link the user navigated to or a web server's response includes a "Content-Disposition" header with the 'attachment' directive. If "Content-Disposition" is present in reply, the web server is indicating that the client should prompt the user to save the content regardless of content-type. See RFC 2616 sections 19.5.1 for details about Content-Disposition.</para>
                <para>At signal emission time the meta-data of the QNetworkReply reply is available.</para>
                <para>Note: The receiving slot is responsible for deleting the QNetworkReply reply.</para>
                <para>Note: This signal is only emitted if the forwardUnsupportedContent property is set to true.</para>
                <para>See also downloadRequested().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.DownloadRequested">
            <summary>
                <para>This signal is emitted when the user decides to download a link. The url of the link as well as additional meta-information is contained in request.</para>
                <para>See also unsupportedContent().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.MicroFocusChanged">
            <summary>
                <para>This signal is emitted when for example the position of the cursor in an editable form element changes. It is used to inform input methods about the new on-screen position where the user is able to enter text. This signal is usually connected to the QWidget::updateMicroFocus() slot.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.ContentsChanged">
            <summary>
                <para>This signal is emitted whenever the text in form elements changes as well as other editable content.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also contentEditable, modified, QWebFrame::toHtml(), and QWebFrame::toPlainText().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.DatabaseQuotaExceeded">
            <summary>
                <para>This signal is emitted whenever the web site shown in frame is asking to store data to the database databaseName and the quota allocated to that web site is exceeded.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also QWebDatabase.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.ApplicationCacheQuotaExceeded">
            <summary>
                <para>This signal is emitted whenever the web site is asking to store data to the application cache database databaseName and the quota allocated to that web site is exceeded.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.SaveFrameStateRequested">
            <summary>
                <para>This signal is emitted shortly before the history of navigated pages in frame is changed, for example when navigating back in the history.</para>
                <para>The provided QWebHistoryItem, item, holds the history entry of the frame before the change.</para>
                <para>A potential use-case for this signal is to store custom data in the QWebHistoryItem associated to the frame, using QWebHistoryItem::setUserData().</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.RestoreFrameStateRequested">
            <summary>
                <para>This signal is emitted when the load of frame is finished and the application may now update its state accordingly.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.ViewportChangeRequested">
            <summary>
                <para>Page authors can provide the supplied values by using the viewport meta tag. More information about this can be found at Safari Reference Library: Using the Viewport Meta Tag.</para>
                <para>This function was introduced in Qt 4.8.</para>
                <para>See also QWebPage::ViewportAttributes, setPreferredContentsSize(), and QGraphicsWebView::setScale().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.FeaturePermissionRequested">
            <summary>
                <para>bool QWebPage::findText ( const QString &amp; subString, FindFlags options = 0 )</para>
                <para>Finds the specified string, subString, in the page, using the given options.</para>
                <para>If the HighlightAllOccurrences flag is passed, the function will highlight all occurrences that exist in the page. All subsequent calls will extend the highlight, rather than replace it, with occurrences of the new string.</para>
                <para>If the HighlightAllOccurrences flag is not passed, the function will select an occurrence and all subsequent calls will replace the current occurrence with the next one.</para>
                <para>To clear the selection, just pass an empty string.</para>
                <para>Returns true if subString was found; otherwise returns false.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebPage.FeaturePermissionRequestCanceled">
            <summary>
                <para>void QWebPage::featurePermissionRequested ( QWebFrame * frame, QWebPage::Feature feature ) [signal]</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.NetworkAccessManager">
            <summary>
                <para>Returns the QNetworkAccessManager that is responsible for serving network requests for this QWebPage.</para>
                <para>Sets the QNetworkAccessManager manager responsible for serving network requests for this QWebPage.</para>
                <para>Note: It is currently not supported to change the network access manager after the QWebPage has used it. The results of doing this are undefined.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.PluginFactory">
            <summary>
                <para>Returns the QWebPluginFactory that is responsible for creating plugins embedded into this QWebPage. If no plugin factory is installed a null pointer is returned.</para>
                <para>Sets the QWebPluginFactory factory responsible for creating plugins embedded into this QWebPage.</para>
                <para>Note: The plugin factory is only used if the QWebSettings::PluginsEnabled attribute is enabled.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.View">
            <summary>
                <para>Returns the view widget that is associated with the web page.</para>
                <para>Sets the view that is associated with the web page.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.BytesReceived">
            <summary>
                <para>Returns the number of bytes that were received from the network to render the current page.</para>
                <para>See also totalBytes() and loadProgress().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.CurrentFrame">
            <summary>
                <para>Returns the frame currently active.</para>
                <para>See also mainFrame() and frameCreated().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.History">
            <summary>
                <para>Returns a pointer to the view's history of navigated web pages.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.MainFrame">
            <summary>
                <para>Returns the main frame of the page.</para>
                <para>The main frame provides access to the hierarchy of sub-frames and is also needed if you want to explicitly render a web page into a given painter.</para>
                <para>See also currentFrame().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.Settings">
            <summary>
                <para>Returns a pointer to the page's settings object.</para>
                <para>See also QWebSettings::globalSettings().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.SupportedContentTypes">
            <summary>
                <para>Returns the list of all content types supported by QWebPage.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.TotalBytes">
            <summary>
                <para>Returns the total number of bytes that were received from the network to render the current page, including extra content such as embedded images.</para>
                <para>See also bytesReceived().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.Modified">
            <summary>
                <para>This property holds whether the page contains unsubmitted form data, or the contents have been changed.</para>
                <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.SelectedText">
            <summary>
                <para>This property holds the text currently selected.</para>
                <para>By default, this property contains an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.SelectedHtml">
            <summary>
                <para>This property holds the HTML currently selected.</para>
                <para>By default, this property contains an empty string.</para>
                <para>This property was introduced in Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.HasSelection">
            <summary>
                <para>This property holds whether this page contains selected content or not.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ViewportSize">
            <summary>
                <para>This property holds the size of the viewport.</para>
                <para>The size affects for example the visibility of scrollbars if the document is larger than the viewport.</para>
                <para>By default, for a newly-created Web page, this property contains a size with zero width and height.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.PreferredContentsSize">
            <summary>
                <para>This property holds a custom size used for laying out the page contents.</para>
                <para>By default all pages are laid out using the viewport of the page as the base.</para>
                <para>As pages mostly are designed for desktop usage, they often do not layout properly on small devices as the contents require a certain view width. For this reason it is common to use a different layout size and then scale the contents to fit within the actual view.</para>
                <para>If this property is set to a valid size, this size is used for all layout needs instead of the size of the viewport.</para>
                <para>Setting an invalid size, makes the page fall back to using the viewport size for layout.</para>
                <para>This property was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ForwardUnsupportedContent">
            <summary>
                <para>This property holds whether QWebPage should forward unsupported content.</para>
                <para>If enabled, the unsupportedContent() signal is emitted with a network reply that can be used to read the content.</para>
                <para>If disabled, the download of such content is aborted immediately.</para>
                <para>By default unsupported content is not forwarded.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.linkDelegationPolicy">
            <summary>
                <para>This property holds how QWebPage should delegate the handling of links through the linkClicked() signal.</para>
                <para>The default is to delegate no links.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.Palette">
            <summary>
                <para>This property holds the page's palette.</para>
                <para>The base brush of the palette is used to draw the background of the main frame.</para>
                <para>By default, this property contains the application's default palette.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPage.ContentEditable">
            <summary>
                <para>This property holds whether the content in this QWebPage is editable or not.</para>
                <para>If this property is enabled the contents of the page can be edited by the user through a visible cursor. If disabled (the default) only HTML elements in the web page with their contenteditable attribute set are editable.</para>
                <para>This property was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.AcceptNavigationRequest(QtWebKit.QWebFrame,QtNetwork.QNetworkRequest,QtWebKit.QWebPage.NavigationType)">
            <summary>
                <para>This function is called whenever WebKit requests to navigate frame to the resource specified by request by means of the specified navigation type type.</para>
                <para>If frame is a null pointer then navigation to a new window is requested. If the request is accepted createWindow() will be called.</para>
                <para>The default implementation interprets the page's linkDelegationPolicy and emits linkClicked accordingly or returns true to let QWebPage handle the navigation itself.</para>
                <para>See also createWindow().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.Action(QtWebKit.QWebPage.WebAction)">
            <summary>
                <para>Returns a QAction for the specified WebAction action.</para>
                <para>The action is owned by the QWebPage but you can customize the look by changing its properties.</para>
                <para>QWebPage also takes care of implementing the action, so that upon triggering the corresponding action is performed on the page.</para>
                <para>See also triggerAction().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnApplicationCacheQuotaExceeded(QtWebKit.QWebSecurityOrigin,System.UInt64)">
            <summary>
                <para>This signal is emitted whenever the web site is asking to store data to the application cache database databaseName and the quota allocated to that web site is exceeded.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.ChooseFile(QtWebKit.QWebFrame,System.String)">
            <summary>
                <para>This function is called when the web content requests a file name, for example as a result of the user clicking on a "file upload" button in a HTML form.</para>
                <para>A suggested filename may be provided in suggestedFile. The frame originating the request is provided as parentFrame.</para>
                <para>See also ChooseMultipleFilesExtension.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnContentsChanged">
            <summary>
                <para>This signal is emitted whenever the text in form elements changes as well as other editable content.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also contentEditable, modified, QWebFrame::toHtml(), and QWebFrame::toPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.CreatePlugin(System.String,QtCore.QUrl,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
                <para>This function is called whenever WebKit encounters a HTML object element with type "application/x-qt-plugin". It is called regardless of the value of QWebSettings::PluginsEnabled. The classid, url, paramNames and paramValues correspond to the HTML object element attributes and child elements to configure the embeddable object.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.CreateStandardContextMenu">
            <summary>
                <para>This function creates the standard context menu which is shown when the user clicks on the web page with the right mouse button. It is called from the default contextMenuEvent() handler. The popup menu's ownership is transferred to the caller.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.CreateWindow(QtWebKit.QWebPage.WebWindowType)">
            <summary>
                <para>This function is called whenever WebKit wants to create a new window of the given type, for example when a JavaScript program requests to open a document in a new window.</para>
                <para>If the new window can be created, the new window's QWebPage is returned; otherwise a null pointer is returned.</para>
                <para>If the view associated with the web page is a QWebView object, then the default implementation forwards the request to QWebView's createWindow() function; otherwise it returns a null pointer.</para>
                <para>If type is WebModalDialog, the application must call setWindowModality(Qt::ApplicationModal) on the new window.</para>
                <para>Note: In the cases when the window creation is being triggered by JavaScript, apart from reimplementing this method application must also set the JavaScriptCanOpenWindows attribute of QWebSettings to true in order for it to get called.</para>
                <para>See also acceptNavigationRequest() and QWebView::createWindow().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnDatabaseQuotaExceeded(QtWebKit.QWebFrame,System.String)">
            <summary>
                <para>This signal is emitted whenever the web site shown in frame is asking to store data to the database databaseName and the quota allocated to that web site is exceeded.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also QWebDatabase.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnDownloadRequested(QtNetwork.QNetworkRequest)">
            <summary>
                <para>This signal is emitted when the user decides to download a link. The url of the link as well as additional meta-information is contained in request.</para>
                <para>See also unsupportedContent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnEvent(QtCore.QEvent)">
            <summary>
                <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.extension(QtWebKit.QWebPage.Extension,QtWebKit.QWebPage.ExtensionOption,QtWebKit.QWebPage.ExtensionReturn)">
            <summary>
                <para>This virtual function can be reimplemented in a QWebPage subclass to provide support for extensions. The option argument is provided as input to the extension; the output results can be stored in output.</para>
                <para>The behavior of this function is determined by extension. The option and output values are typically casted to the corresponding types (for example, ChooseMultipleFilesExtensionOption and ChooseMultipleFilesExtensionReturn for ChooseMultipleFilesExtension).</para>
                <para>You can call supportsExtension() to check if an extension is supported by the page.</para>
                <para>Returns true if the extension was called successfully; otherwise returns false.</para>
                <para>See also supportsExtension() and Extension.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnFeaturePermissionRequestCanceled(QtWebKit.QWebFrame,QtWebKit.QWebPage.Feature)">
            <summary>
                <para>void QWebPage::featurePermissionRequested ( QWebFrame * frame, QWebPage::Feature feature ) [signal]</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnFeaturePermissionRequested(QtWebKit.QWebFrame,QtWebKit.QWebPage.Feature)">
            <summary>
                <para>bool QWebPage::findText ( const QString &amp; subString, FindFlags options = 0 )</para>
                <para>Finds the specified string, subString, in the page, using the given options.</para>
                <para>If the HighlightAllOccurrences flag is passed, the function will highlight all occurrences that exist in the page. All subsequent calls will extend the highlight, rather than replace it, with occurrences of the new string.</para>
                <para>If the HighlightAllOccurrences flag is not passed, the function will select an occurrence and all subsequent calls will replace the current occurrence with the next one.</para>
                <para>To clear the selection, just pass an empty string.</para>
                <para>Returns true if subString was found; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.FindText(System.String,QtWebKit.QWebPage.FindFlag)">
            <summary>
                <para>Finds the specified string, subString, in the page, using the given options.</para>
                <para>If the HighlightAllOccurrences flag is passed, the function will highlight all occurrences that exist in the page. All subsequent calls will extend the highlight, rather than replace it, with occurrences of the new string.</para>
                <para>If the HighlightAllOccurrences flag is not passed, the function will select an occurrence and all subsequent calls will replace the current occurrence with the next one.</para>
                <para>To clear the selection, just pass an empty string.</para>
                <para>Returns true if subString was found; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.FocusNextPrevChild(System.Boolean)">
            <summary>
                <para>Similar to QWidget::focusNextPrevChild() it focuses the next focusable web element if next is true; otherwise the previous element is focused.</para>
                <para>Returns true if it can find a new focusable element, or false if it can't.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.FrameAt(QtCore.QPoint)">
            <summary>
                <para>Returns the frame at the given point pos, or 0 if there is no frame at that position.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also mainFrame() and currentFrame().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnFrameCreated(QtWebKit.QWebFrame)">
            <summary>
                <para>This signal is emitted whenever the page creates a new frame.</para>
                <para>See also currentFrame().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnGeometryChangeRequested(QtCore.QRect)">
            <summary>
                <para>This signal is emitted whenever the document wants to change the position and size of the page to geom. This can happen for example through JavaScript.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
                <para>This method is used by the input method to query a set of properties of the page to be able to support complex input method operations as support for surrounding text and reconversions.</para>
                <para>property specifies which property is queried.</para>
                <para>See also QWidget::inputMethodEvent(), QInputMethodEvent, and QInputContext.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.JavaScriptAlert(QtWebKit.QWebFrame,System.String)">
            <summary>
                <para>This function is called whenever a JavaScript program running inside frame calls the alert() function with the message msg.</para>
                <para>The default implementation shows the message, msg, with QMessageBox::information.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.JavaScriptConfirm(QtWebKit.QWebFrame,System.String)">
            <summary>
                <para>This function is called whenever a JavaScript program running inside frame calls the confirm() function with the message, msg. Returns true if the user confirms the message; otherwise returns false.</para>
                <para>The default implementation executes the query using QMessageBox::information with QMessageBox::Yes and QMessageBox::No buttons.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.JavaScriptConsoleMessage(System.String,System.Int32,System.String)">
            <summary>
                <para>This function is called whenever a JavaScript program tries to print a message to the web browser's console.</para>
                <para>For example in case of evaluation errors the source URL may be provided in sourceID as well as the lineNumber.</para>
                <para>The default implementation prints nothing.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.JavaScriptPrompt(QtWebKit.QWebFrame,System.String,System.String,System.Text.StringBuilder)">
            <summary>
                <para>This function is called whenever a JavaScript program running inside frame tries to prompt the user for input. The program may provide an optional message, msg, as well as a default value for the input in defaultValue.</para>
                <para>If the prompt was cancelled by the user the implementation should return false; otherwise the result should be written to result and true should be returned. If the prompt was not cancelled by the user, the implementation should return true and the result string must not be null.</para>
                <para>The default implementation uses QInputDialog::getText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnLinkClicked(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted whenever the user clicks on a link and the page's linkDelegationPolicy property is set to delegate the link handling for the specified url.</para>
                <para>By default no links are delegated and are handled by QWebPage instead.</para>
                <para>Note: This signal possibly won't be emitted for clicked links which use JavaScript to trigger navigation.</para>
                <para>See also linkHovered().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnLinkHovered(System.String,System.String,System.String)">
            <summary>
                <para>This signal is emitted when the mouse hovers over a link.</para>
                <para>link contains the link url. title is the link element's title, if it is specified in the markup. textContent provides text within the link element, e.g., text inside an HTML anchor tag.</para>
                <para>When the mouse leaves the link element the signal is emitted with empty parameters.</para>
                <para>See also linkClicked().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnLoadFinished(System.Boolean)">
            <summary>
                <para>This signal is emitted when the page finishes loading content. This signal is independant of script execution or page rendering. ok will indicate whether the load was successful or any error occurred.</para>
                <para>See also loadStarted() and ErrorPageExtension.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnLoadProgress(System.Int32)">
            <summary>
                <para>This signal is emitted when the global progress status changes. The current value is provided by progress and scales from 0 to 100, which is the default range of QProgressBar. It accumulates changes from all the child frames.</para>
                <para>See also bytesReceived().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnLoadStarted">
            <summary>
                <para>This signal is emitted when a page starts loading content.</para>
                <para>See also loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnMenuBarVisibilityChangeRequested(System.Boolean)">
            <summary>
                <para>This signal is emitted whenever the visibility of the menubar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnMicroFocusChanged">
            <summary>
                <para>This signal is emitted when for example the position of the cursor in an editable form element changes. It is used to inform input methods about the new on-screen position where the user is able to enter text. This signal is usually connected to the QWidget::updateMicroFocus() slot.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnPrintRequested(QtWebKit.QWebFrame)">
            <summary>
                <para>This signal is emitted whenever the page requests the web browser to print frame, for example through the JavaScript window.print() call.</para>
                <para>See also QWebFrame::print() and QPrintPreviewDialog.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnRepaintRequested(QtCore.QRect)">
            <summary>
                <para>This signal is emitted whenever this QWebPage should be updated. It's useful when rendering a QWebPage without a QWebView or QGraphicsWebView. dirtyRect contains the area that needs to be updated. To paint the QWebPage get the mainFrame() and call the render(QPainter*, const QRegion&amp;) method with the dirtyRect as the second parameter.</para>
                <para>See also mainFrame() and view().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnRestoreFrameStateRequested(QtWebKit.QWebFrame)">
            <summary>
                <para>This signal is emitted when the load of frame is finished and the application may now update its state accordingly.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnSaveFrameStateRequested(QtWebKit.QWebFrame,QtWebKit.QWebHistoryItem)">
            <summary>
                <para>This signal is emitted shortly before the history of navigated pages in frame is changed, for example when navigating back in the history.</para>
                <para>The provided QWebHistoryItem, item, holds the history entry of the frame before the change.</para>
                <para>A potential use-case for this signal is to store custom data in the QWebHistoryItem associated to the frame, using QWebHistoryItem::setUserData().</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnScrollRequested(System.Int32,System.Int32,QtCore.QRect)">
            <summary>
                <para>This signal is emitted whenever the content given by rectToScroll needs to be scrolled dx and dy downwards and no view was set.</para>
                <para>See also view().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnSelectionChanged">
            <summary>
                <para>This signal is emitted whenever the selection changes, either interactively or programmatically (e.g. by calling triggerAction() with a selection action).</para>
                <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.SetActualVisibleContentRect(QtCore.QRect)">
            <summary>
                <para>void QWebPage::setFeaturePermission ( QWebFrame * frame, Feature feature, PermissionPolicy policy )</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.SetFeaturePermission(QtWebKit.QWebFrame,QtWebKit.QWebPage.Feature,QtWebKit.QWebPage.PermissionPolicy)">
            <summary>
                <para>void QWebPage::setNetworkAccessManager ( QNetworkAccessManager * manager )</para>
                <para>Sets the QNetworkAccessManager manager responsible for serving network requests for this QWebPage.</para>
                <para>Note: It is currently not supported to change the network access manager after the QWebPage has used it. The results of doing this are undefined.</para>
                <para>See also networkAccessManager().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.ShouldInterruptJavaScript">
            <summary>
                <para>This function is called when a JavaScript program is running for a long period of time.</para>
                <para>If the user wanted to stop the JavaScript the implementation should return true; otherwise false.</para>
                <para>The default implementation executes the query using QMessageBox::information with QMessageBox::Yes and QMessageBox::No buttons.</para>
                <para>Warning: Because of binary compatibility constraints, this function is not virtual. If you want to provide your own implementation in a QWebPage subclass, reimplement the shouldInterruptJavaScript() slot in your subclass instead. QtWebKit will dynamically detect the slot and call it.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnStatusBarMessage(System.String)">
            <summary>
                <para>This signal is emitted when the statusbar text is changed by the page.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnStatusBarVisibilityChangeRequested(System.Boolean)">
            <summary>
                <para>This signal is emitted whenever the visibility of the statusbar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.SupportsContentType(System.String)">
            <summary>
                <para>Returns true if QWebPage can handle the given mimeType; otherwise, returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.SupportsExtension(QtWebKit.QWebPage.Extension)">
            <summary>
                <para>This virtual function returns true if the web page supports extension; otherwise false is returned.</para>
                <para>See also extension().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnSwallowContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
                <para>Filters the context menu event, event, through handlers for scrollbars and custom event handlers in the web page. Returns true if the event was handled; otherwise false.</para>
                <para>A web page may swallow a context menu event through a custom event handler, allowing for context menus to be implemented in HTML/JavaScript. This is used by Google Maps, for example.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnToolBarVisibilityChangeRequested(System.Boolean)">
            <summary>
                <para>This signal is emitted whenever the visibility of the toolbar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.TriggerAction(QtWebKit.QWebPage.WebAction,System.Boolean)">
            <summary>
                <para>This function can be called to trigger the specified action. It is also called by QtWebKit if the user triggers the action, for example through a context menu item.</para>
                <para>If action is a checkable action then checked specified whether the action is toggled or not.</para>
                <para>See also action().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.UndoStack">
            <summary>
                <para>Returns a pointer to the undo stack used for editable content.</para>
                <para>See also modified.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnUnsupportedContent(QtNetwork.QNetworkReply)">
            <summary>
                <para>This signal is emitted when WebKit cannot handle a link the user navigated to or a web server's response includes a "Content-Disposition" header with the 'attachment' directive. If "Content-Disposition" is present in reply, the web server is indicating that the client should prompt the user to save the content regardless of content-type. See RFC 2616 sections 19.5.1 for details about Content-Disposition.</para>
                <para>At signal emission time the meta-data of the QNetworkReply reply is available.</para>
                <para>Note: The receiving slot is responsible for deleting the QNetworkReply reply.</para>
                <para>Note: This signal is only emitted if the forwardUnsupportedContent property is set to true.</para>
                <para>See also downloadRequested().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.UpdatePositionDependentActions(QtCore.QPoint)">
            <summary>
                <para>Updates the page's actions depending on the position pos. For example if pos is over an image element the CopyImageToClipboard action is enabled.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.UserAgentForUrl(QtCore.QUrl)">
            <summary>
                <para>This function is called when a user agent for HTTP requests is needed. You can reimplement this function to dynamically return different user agents for different URLs, based on the url parameter.</para>
                <para>The default implementation returns the following value:</para>
                <para>"Mozilla/5.0 (%Platform%%Security%%Subplatform%) AppleWebKit/%WebKitVersion% (KHTML, like Gecko) %AppVersion Safari/%WebKitVersion%"</para>
                <para>On mobile platforms such as Symbian S60 and Maemo, "Mobile Safari" is used instead of "Safari".</para>
                <para>In this string the following values are replaced at run-time:</para>
                <para>
                </para>
                <para>%Platform% expands to the windowing system followed by "; " if it is not Windows (e.g. "X11; ").</para>
                <para>%Security% expands to "N; " if SSL is disabled.</para>
                <para>%Subplatform% expands to the operating system version (e.g. "Windows NT 6.1" or "Intel Mac OS X 10.5").</para>
                <para>%WebKitVersion% is the version of WebKit the application was compiled against.</para>
                <para>%AppVersion% expands to QCoreApplication::applicationName()/QCoreApplication::applicationVersion() if they're set; otherwise defaulting to Qt and the current Qt version.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.ViewportAttributesForSize(QtCore.QSize)">
            <summary>
                <para>Computes the optimal viewport configuration given the availableSize, when user interface components are disregarded.</para>
                <para>The configuration is also dependent on the device screen size which is obtained automatically. For testing purposes the size can be overridden by setting two environment variables QTWEBKIT_DEVICE_WIDTH and QTWEBKIT_DEVICE_HEIGHT, which both needs to be set.</para>
                <para>The ViewportAttributes includes a pixel density ratio, which will also be exposed to the web author though the -webkit-pixel-ratio media feature. This is the ratio between 1 density-independent pixel (DPI) and physical pixels.</para>
                <para>A density-independent pixel is equivalent to one physical pixel on a 160 DPI screen, so on our platform assumes that as the baseline density.</para>
                <para>The conversion of DIP units to screen pixels is quite simple:</para>
                <para>pixels = DIPs * (density / 160).</para>
                <para>Thus, on a 240 DPI screen, 1 DIPs would equal 1.5 physical pixels.</para>
                <para>An invalid instance will be returned in the case an empty size is passed to the method.</para>
                <para>Note: The density is automatically obtained from the DPI of the screen where the page is being shown, but as many X11 servers are reporting wrong DPI, it is possible to override it using QX11Info::setAppDpiY().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnViewportChangeRequested">
            <summary>
                <para>Page authors can provide the supplied values by using the viewport meta tag. More information about this can be found at Safari Reference Library: Using the Viewport Meta Tag.</para>
                <para>This function was introduced in Qt 4.8.</para>
                <para>See also QWebPage::ViewportAttributes, setPreferredContentsSize(), and QGraphicsWebView::setScale().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.OnWindowCloseRequested">
            <summary>
                <para>This signal is emitted whenever the page requests the web browser window to be closed, for example through the JavaScript window.close() call.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPage.Finalize">
            <summary>
                <para>Destroys the web page.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPluginFactory">
            <summary>
            The QWebPluginFactory class is used to embed custom data types in web pages.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The HTML &lt;object&gt; tag is used to embed arbitrary content into a web page, for example:</para>
                <para> &lt;object type="application/x-pdf" data="http://qt.nokia.com/document.pdf" width="500" height="400"&gt;&lt;/object&gt;</para>
                <para>QtWebkit will natively handle the most basic data types like text/html and image/jpeg, but for any advanced or custom data types you will need to provide a handler yourself.</para>
                <para>QWebPluginFactory is a factory for creating plugins for QWebPage, where each plugin provides support for one or more data types. A plugin factory can be installed on a QWebPage using QWebPage::setPluginFactory().</para>
                <para>Note: The plugin factory is only used if plugins are enabled through QWebSettings.</para>
                <para>You provide a QWebPluginFactory by implementing the plugins() and the create() methods. For plugins() it is necessary to describe the plugins the factory can create, including a description and the supported MIME types. The MIME types each plugin can handle should match the ones specified in in the HTML &lt;object&gt; tag of your content.</para>
                <para>The create() method is called if the requested MIME type is supported. The implementation has to return a new instance of the plugin requested for the given MIME type and the specified URL.</para>
                <para>The plugins themselves are subclasses of QObject, but currently only plugins based on either QWidget or QGraphicsWidget are supported.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebPluginFactory.#ctor(QtCore.QObject)">
            <summary>
                <para>Constructs a QWebPluginFactory with parent parent.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPluginFactory.MimeType">
            <summary>
            The QWebPluginFactory::MimeType structure describes a mime type supported by a plugin.
            </summary>
            <remarks>
                <para>
                </para>
            </remarks>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.MimeType.Description">
            <summary>
                <para>The description of the mime type.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.MimeType.FileExtensions">
            <summary>
                <para>The list of file extensions that are used by this mime type.</para>
                <para>For example, a mime type for PDF documents would return "pdf" as its file extension.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.MimeType.Name">
            <summary>
                <para>The full name of the MIME type; e.g., text/plain or image/png.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebPluginFactory.Plugin">
            <summary>
            The QWebPluginFactory::Plugin structure describes the properties of a plugin a QWebPluginFactory can create.
            </summary>
            <remarks>
                <para>
                </para>
            </remarks>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.Plugin.Description">
            <summary>
                <para>The description of the plugin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.Plugin.MimeTypes">
            <summary>
                <para>The list of mime types supported by the plugin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.Plugin.Name">
            <summary>
                <para>The name of the plugin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebPluginFactory.Plugins">
            <summary>
                <para>This function is reimplemented in subclasses to return a list of supported plugins the factory can create.</para>
                <para>Note: Currently, this function is only called when JavaScript programs access the global plugins or mimetypes objects.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPluginFactory.Create(System.String,QtCore.QUrl,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
                <para>Implemented in subclasses to create a new plugin that can display content of the MIME type given by mimeType. The URL of the content is provided in url. The returned object should be a QWidget.</para>
                <para>The HTML object element can provide parameters through the &lt;param&gt; tag. The name and the value attributes of these tags are specified by the argumentNames and argumentValues string lists.</para>
                <para>For example:</para>
                <para> &lt;object type="application/x-pdf" data="http://qt.nokia.com/document.pdf" width="500" height="400"&gt;</para>
                <para>     &lt;param name="showTableOfContents" value="true" /&gt;</para>
                <para>     &lt;param name="hideThumbnails" value="false" /&gt;</para>
                <para> &lt;/object&gt;</para>
                <para>The above object element will result in a call to create() with the following arguments:</para>
                <para>
                </para>
                <para>ParameterValue</para>
                <para>mimeType	"application/x-pdf"</para>
                <para>url	"http://qt.nokia.com/document.pdf"</para>
                <para>argumentNames	"showTableOfContents" "hideThumbnails"</para>
                <para>argumentVaues	"true" "false"</para>
                <para>
                </para>
                <para>Note: Ownership of the returned object will be transferred to the caller.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPluginFactory.RefreshPlugins">
            <summary>
                <para>This function is called to refresh the list of supported plugins. It may be called after a new plugin has been installed in the system.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebPluginFactory.Finalize">
            <summary>
                <para>Destructor.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebSecurityOrigin">
            <summary>
            The QWebSecurityOrigin class defines a security boundary for web sites.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebSecurityOrigin provides access to the security domains defined by web sites. An origin consists of a host name, a scheme, and a port number. Web sites with the same security origin can access each other's resources for client-side scripting or databases.</para>
                <para>For example the site http://www.example.com/my/page.html is allowed to share the same database as http://www.example.com/my/overview.html, or access each other's documents when used in HTML frame sets and JavaScript. At the same time it prevents http://www.malicious.com/evil.html from accessing http://www.example.com/'s resources, because they are of a different security origin.</para>
                <para>By default local schemes like file:// and qrc:// are concidered to be in the same security origin, and can access each other's resources. You can add additional local schemes by using QWebSecurityOrigin::addLocalScheme(), or override the default same-origin behavior by setting QWebSettings::LocalContentCanAccessFileUrls to false.</para>
                <para>Note: Local resources are by default restricted from accessing remote content, which means your file:// will not be able to access http://domain.com/foo.html. You can relax this restriction by setting QWebSettings::LocalContentCanAccessRemoteUrls to true.</para>
                <para>Call QWebFrame::securityOrigin() to get the QWebSecurityOrigin for a frame in a web page, and use host(), scheme() and port() to identify the security origin.</para>
                <para>Use databases() to access the databases defined within a security origin. The disk usage of the origin's databases can be limited with setDatabaseQuota(). databaseQuota() and databaseUsage() report the current limit as well as the current usage.</para>
                <para>For more information refer to the "Same origin policy" Wikipedia Article.</para>
                <para>
                </para>
                <para>See also QWebFrame::securityOrigin().</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebSecurityOrigin.#ctor(QtWebKit.QWebSecurityOrigin)">
            <summary>
                <para>Constructs a security origin from other.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.DatabaseQuota">
            <summary>
                <para>Returns the quota for the databases in the security origin.</para>
                <para>Sets the quota for the databases in the security origin to quota bytes.</para>
                <para>If the quota is set to a value less than the current usage, the quota will remain and no data will be purged to meet the new quota. However, no new data can be added to databases in this origin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.AllOrigins">
            <summary>
                <para>Returns a list of all security origins with a database quota defined.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.DatabaseUsage">
            <summary>
                <para>Returns the number of bytes all databases in the security origin use on the disk.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.Databases">
            <summary>
                <para>Returns a list of all databases defined in the security origin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.Host">
            <summary>
                <para>Returns the host name defining the security origin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.LocalSchemes">
            <summary>
                <para>Returns a list of all the schemes concidered to be local.</para>
                <para>By default this is file:// and qrc://.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also addLocalScheme() and removeLocalScheme().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.Port">
            <summary>
                <para>Returns the port number defining the security origin.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSecurityOrigin.Scheme">
            <summary>
                <para>Returns the scheme defining the security origin.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSecurityOrigin.AddLocalScheme(System.String)">
            <summary>
                <para>Adds the given scheme to the list of schemes that are considered equivalent to the file: scheme.</para>
                <para>Cross domain restrictions depend on the two web settings QWebSettings::LocalContentCanAccessFileUrls and QWebSettings::LocalContentCanAccessFileUrls. By default all local schemes are concidered to be in the same security origin, and local schemes can not access remote content.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSecurityOrigin.RemoveLocalScheme(System.String)">
            <summary>
                <para>Removes the given scheme from the list of local schemes.</para>
                <para>Note: You can not remove the file:// scheme from the list of local schemes.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also addLocalScheme().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSecurityOrigin.SetApplicationCacheQuota(System.Int64)">
            <summary>
                <para>void QWebSecurityOrigin::setDatabaseQuota ( qint64 quota )</para>
                <para>Sets the quota for the databases in the security origin to quota bytes.</para>
                <para>If the quota is set to a value less than the current usage, the quota will remain and no data will be purged to meet the new quota. However, no new data can be added to databases in this origin.</para>
                <para>See also databaseQuota().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSecurityOrigin.Finalize">
            <summary>
                <para>Destroys the security origin.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebSettings">
            <summary>
            The QWebSettings class provides an object to store the settings used by QWebPage and QWebFrame.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Each QWebPage object has its own QWebSettings object, which configures the settings for that page. If a setting is not configured, then it is looked up in the global settings object, which can be accessed using globalSettings().</para>
                <para>QWebSettings allows configuration of browser properties, such as font sizes and families, the location of a custom style sheet, and generic attributes like JavaScript and plugins. Individual attributes are set using the setAttribute() function. The WebAttribute enum further describes each attribute.</para>
                <para>QWebSettings also configures global properties such as the web page memory cache, icon database, local database storage and offline applications storage.</para>
                <para>
                </para>
                <para>Enabling Plugins</para>
                <para>Support for browser plugins can enabled by setting the PluginsEnabled attribute. For many applications, this attribute is enabled for all pages by setting it on the global settings object. QtWebKit will always ignore this setting when processing Qt plugins. The decision to allow a Qt plugin is made by the client in its reimplementation of QWebPage::createPlugin().</para>
                <para>
                </para>
                <para>Web Application Support</para>
                <para>WebKit provides support for features specified in HTML 5 that improve the performance and capabilities of Web applications. These include client-side (offline) storage and the use of a Web application cache.</para>
                <para>Client-side (offline) storage is an improvement over the use of cookies to store persistent data in Web applications. Applications can configure and enable the use of an offline storage database by calling the setOfflineStoragePath() with an appropriate file path, and can limit the quota for each application by calling setOfflineStorageDefaultQuota().</para>
                <para>
                </para>
                <para>See also QWebPage::settings(), QWebView::settings(), and Web Browser.</para>
            </remarks>
        </member>
        <member name="T:QtWebKit.QWebSettings.FontFamily">
            <summary>
                <para>This enum describes the generic font families defined by CSS 2. For more information see the CSS standard.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebSettings.FontSize">
            <summary>
                <para>This enum describes the font sizes configurable through QWebSettings.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.FontSize.DefaultFixedFontSize">
            <summary>
                <para>The default font size for fixed-pitch text.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.FontSize.DefaultFontSize">
            <summary>
                <para>The default font size for regular text.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.FontSize.MinimumFontSize">
            <summary>
                <para>The hard minimum font size.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.FontSize.MinimumLogicalFontSize">
            <summary>
                <para>The minimum logical font size that is applied when zooming out with QWebFrame::setTextSizeMultiplier().</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebSettings.WebAttribute">
            <summary>
                <para>This enum describes various attributes that are configurable through QWebSettings.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.AcceleratedCompositingEnabled">
            <summary>
                <para>This feature, when used in conjunction with QGraphicsWebView, accelerates animations of web content. CSS animations of the transform and opacity properties will be rendered by composing the cached content of the animated elements. This is enabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.AutoLoadImages">
            <summary>
                <para>Specifies whether images are automatically loaded in web pages. This is enabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.DeveloperExtrasEnabled">
            <summary>
                <para>Enables extra tools for Web developers. Currently this enables the "Inspect" element in the context menu as well as the use of QWebInspector which controls the web inspector for web site debugging. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.DnsPrefetchEnabled">
            <summary>
                <para>Specifies whether QtWebkit will try to pre-fetch DNS entries to speed up browsing. This only works as a global attribute. Only for Qt 4.6 and later. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.FrameFlatteningEnabled">
            <summary>
                <para>With this setting each subframe is expanded to its contents. On touch devices, it is desired to not have any scrollable sub parts of the page as it results in a confusing user experience, with scrolling sometimes scrolling sub parts and at other times scrolling the page itself. For this reason iframes and framesets are barely usable on touch devices. This will flatten all the frames to become one scrollable page. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.JavaEnabled">
            <summary>
                <para>Enables or disables Java applets. Currently Java applets are not supported.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.JavascriptCanAccessClipboard">
            <summary>
                <para>Specifies whether JavaScript programs can read or write to the clipboard. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.JavascriptCanCloseWindows">
            <summary>
                <para>Specifies whether JavaScript programs can close windows. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.JavascriptCanOpenWindows">
            <summary>
                <para>Specifies whether JavaScript programs can open new windows. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.JavascriptEnabled">
            <summary>
                <para>Enables or disables the running of JavaScript programs. This is enabled by default</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.LinksIncludedInFocusChain">
            <summary>
                <para>Specifies whether hyperlinks should be included in the keyboard focus chain. This is enabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.LocalContentCanAccessFileUrls">
            <summary>
                <para>Specifies whether locally loaded documents are allowed to access other local urls. This is enabled by default. For more information about security origins and local vs. remote content see QWebSecurityOrigin.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.LocalContentCanAccessRemoteUrls">
            <summary>
                <para>Specifies whether locally loaded documents are allowed to access remote urls. This is disabled by default. For more information about security origins and local vs. remote content see QWebSecurityOrigin. (This value was introduced in 4.6.)</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.LocalStorageDatabaseEnabled">
            <summary>
                <para>This enum value is deprecated. Use QWebSettings::LocalStorageEnabled instead.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.LocalStorageEnabled">
            <summary>
                <para>Specifies whether support for the HTML 5 local storage feature is enabled or not. This is disabled by default. (This value was introduced in 4.6.)</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.OfflineStorageDatabaseEnabled">
            <summary>
                <para>Specifies whether support for the HTML 5 offline storage feature is enabled or not. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.OfflineWebApplicationCacheEnabled">
            <summary>
                <para>Specifies whether support for the HTML 5 web application cache feature is enabled or not. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.PluginsEnabled">
            <summary>
                <para>Enables or disables plugins in Web pages (e.g. using NPAPI). Qt plugins with a mimetype such as "application/x-qt-plugin" are not affected by this setting. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.PrintElementBackgrounds">
            <summary>
                <para>Specifies whether the background color and images are also drawn when the page is printed. This is enabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.PrivateBrowsingEnabled">
            <summary>
                <para>Private browsing prevents WebKit from recording visited pages in the history and storing web page icons. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.SiteSpecificQuirksEnabled">
            <summary>
                <para>This setting enables WebKit's workaround for broken sites. It is enabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.SpatialNavigationEnabled">
            <summary>
                <para>Enables or disables the Spatial Navigation feature, which consists in the ability to navigate between focusable elements in a Web page, such as hyperlinks and form controls, by using Left, Right, Up and Down arrow keys. For example, if a user presses the Right key, heuristics determine whether there is an element he might be trying to reach towards the right and which element he probably wants. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.TiledBackingStoreEnabled">
            <summary>
                <para>This setting enables the tiled backing store feature for a QGraphicsWebView. With the tiled backing store enabled, the web page contents in and around the current visible area is speculatively cached to bitmap tiles. The tiles are automatically kept in sync with the web page as it changes. Enabling tiling can significantly speed up painting heavy operations like scrolling. Enabling the feature increases memory consumption. It does not work well with contents using CSS fixed positioning (see also resizesToContents property). tiledBackingStoreFrozen property allows application to temporarily freeze the contents of the backing store. This is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.XSSAuditingEnabled">
            <summary>
                <para>Specifies whether load requests should be monitored for cross-site scripting attempts. Suspicious scripts will be blocked and reported in the inspector's JavaScript console. Enabling this feature might have an impact on performance and it is disabled by default.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebAttribute.ZoomTextOnly">
            <summary>
                <para>Specifies whether the zoom factor on a frame applies only to the text or to all content. This is disabled by default.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebSettings.WebGraphic">
            <summary>
                <para>This enums describes the standard graphical elements used in webpages.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.DefaultFrameIconGraphic">
            <summary>
                <para>The default icon for QWebFrame::icon().</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.DeleteButtonGraphic">
            <summary>
                <para>The graphic shown for the WebKit-Editing-Delete-Button in Deletion UI.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.InputSpeechButtonGraphic">
            <summary>
                <para>The graphic shown in input fields that support speech recognition.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.MissingImageGraphic">
            <summary>
                <para>The replacement graphic shown when an image could not be loaded.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.MissingPluginGraphic">
            <summary>
                <para>The replacement graphic shown when a plugin could not be loaded.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.SearchCancelButtonGraphic">
            <summary>
                <para>The graphic shown for clearing the text in a search field.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.SearchCancelButtonPressedGraphic">
            <summary>
                <para>The graphic shown when SearchCancelButtonGraphic is pressed.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QWebSettings.WebGraphic.TextAreaSizeGripCornerGraphic">
            <summary>
                <para>The graphic shown for the size grip of text areas.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.DefaultTextEncoding">
            <summary>
                <para>Returns the default text encoding.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>Specifies the default text encoding system.</para>
                <para>The encoding, must be a string describing an encoding such as "utf-8", "iso-8859-1", etc. If left empty a default value will be used. For a more extensive list of encoding names see QTextCodec</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.IconDatabasePath">
            <summary>
                <para>Returns the path of the icon database or an empty string if the icon database is disabled.</para>
                <para>Sets the path of the icon database to path. The icon database is used to store "favicons" associated with web sites.</para>
                <para>path must point to an existing directory.</para>
                <para>Setting an empty path disables the icon database.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.LocalStoragePath">
            <summary>
                <para>Returns the path for HTML5 local storage.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>Sets the path for HTML5 local storage to path.</para>
                <para>For more information on HTML5 local storage see the Web Storage standard.</para>
                <para>Support for local storage can enabled by setting the LocalStorageEnabled attribute.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.MaximumPagesInCache">
            <summary>
                <para>Returns the maximum number of web pages that are kept in the memory cache.</para>
                <para>Sets the maximum number of pages to hold in the memory page cache to pages.</para>
                <para>The Page Cache allows for a nicer user experience when navigating forth or back to pages in the forward/back history, by pausing and resuming up to pages.</para>
                <para>For more information about the feature, please refer to:</para>
                <para>http://webkit.org/blog/427/webkit-page-cache-i-the-basics/</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.OfflineStorageDefaultQuota">
            <summary>
                <para>Returns the value of the default quota for new offline storage databases.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>Sets the value of the default quota for new offline storage databases to maximumSize.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.OfflineStoragePath">
            <summary>
                <para>Returns the path of the HTML5 client-side database storage or an empty string if the feature is disabled.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>Sets path as the save location for HTML5 client-side database storage data.</para>
                <para>path must point to an existing directory.</para>
                <para>Setting an empty path disables the feature.</para>
                <para>Support for client-side databases can enabled by setting the OfflineStorageDatabaseEnabled attribute.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.OfflineWebApplicationCachePath">
            <summary>
                <para>Returns the path of the HTML5 offline web application cache storage or an empty string if the feature is disabled.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>Sets the path for HTML5 offline web application cache storage to path.</para>
                <para>An application cache acts like an HTTP cache in some sense. For documents that use the application cache via JavaScript, the loader engine will first ask the application cache for the contents, before hitting the network.</para>
                <para>The feature is described in details at: http://dev.w3.org/html5/spec/Overview.html#appcache</para>
                <para>path must point to an existing directory.</para>
                <para>Setting an empty path disables the feature.</para>
                <para>Support for offline web application cache storage can enabled by setting the OfflineWebApplicationCacheEnabled attribute.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.OfflineWebApplicationCacheQuota">
            <summary>
                <para>Returns the value of the quota for the offline web application cache.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>Sets the value of the quota for the offline web application cache to maximumSize.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.UserStyleSheetUrl">
            <summary>
                <para>Returns the location of the user stylesheet.</para>
                <para>Specifies the location of a user stylesheet to load with every web page.</para>
                <para>The location must be either a path on the local filesystem, or a data URL with UTF-8 and Base64 encoded data, such as:</para>
                <para>"data:text/css;charset=utf-8;base64,cCB7IGJhY2tncm91bmQtY29sb3I6IHJlZCB9Ow=="</para>
                <para>Note: If the base64 data is not valid, the style will not be applied.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebSettings.GlobalSettings">
            <summary>
                <para>Returns the global settings object.</para>
                <para>Any setting changed on the default object is automatically applied to all QWebPage instances where the particular setting is not overriden already.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.ClearIconDatabase">
            <summary>
                <para>Clears the icon database.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.ClearMemoryCaches">
            <summary>
                <para>Frees up as much memory as possible by cleaning all memory caches such as page, object and font cache.</para>
                <para>This function was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.EnablePersistentStorage(System.String)">
            <summary>
                <para>Enables WebKit data persistence and sets the path to path. If path is empty, the user-specific data location specified by DataLocation will be used instead.</para>
                <para>This method will simultaneously set and enable the iconDatabasePath(), localStoragePath(), offlineStoragePath() and offlineWebApplicationCachePath().</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also localStoragePath().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.fontFamily(QtWebKit.QWebSettings.FontFamily)">
            <summary>
                <para>Returns the actual font family for the specified generic font family, which.</para>
                <para>See also setFontFamily().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.fontSize(QtWebKit.QWebSettings.FontSize)">
            <summary>
                <para>Returns the default font size for type.</para>
                <para>See also setFontSize().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.IconForUrl(QtCore.QUrl)">
            <summary>
                <para>Returns the web site's icon for url.</para>
                <para>If the web site does not specify an icon OR if the icon is not in the database, a null QIcon is returned.</para>
                <para>Note: The returned icon's size is arbitrary.</para>
                <para>See also setIconDatabasePath().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.ResetAttribute(QtWebKit.QWebSettings.WebAttribute)">
            <summary>
                <para>Resets the setting of attribute to the value specified in the global QWebSettings instance.</para>
                <para>This function has no effect on the global QWebSettings instance.</para>
                <para>See also globalSettings().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.ResetFontFamily(QtWebKit.QWebSettings.FontFamily)">
            <summary>
                <para>Resets the actual font family specified by which to the one set in the global QWebSettings instance.</para>
                <para>This function has no effect on the global QWebSettings instance.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.ResetFontSize(QtWebKit.QWebSettings.FontSize)">
            <summary>
                <para>Resets the font size for type to the size specified in the global settings object.</para>
                <para>This function has no effect on the global QWebSettings instance.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.SetAttribute(QtWebKit.QWebSettings.WebAttribute,System.Boolean)">
            <summary>
                <para>Enables or disables the specified attribute feature depending on the value of on.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.SetFontFamily(QtWebKit.QWebSettings.FontFamily,System.String)">
            <summary>
                <para>Sets the actual font family to family for the specified generic family, which.</para>
                <para>See also fontFamily().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.SetFontSize(QtWebKit.QWebSettings.FontSize,System.Int32)">
            <summary>
                <para>Sets the font size for type to size.</para>
                <para>See also fontSize().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.SetObjectCacheCapacities(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Specifies the capacities for the memory cache for dead objects such as stylesheets or scripts.</para>
                <para>The cacheMinDeadCapacity specifies the minimum number of bytes that dead objects should consume when the cache is under pressure.</para>
                <para>cacheMaxDead is the maximum number of bytes that dead objects should consume when the cache is not under pressure.</para>
                <para>totalCapacity specifies the maximum number of bytes that the cache should consume overall.</para>
                <para>The cache is enabled by default. Calling setObjectCacheCapacities(0, 0, 0) will disable the cache. Calling it with one non-zero enables it again.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.SetWebGraphic(QtWebKit.QWebSettings.WebGraphic,QtGui.QPixmap)">
            <summary>
                <para>Sets graphic to be drawn when QtWebKit needs to draw an image of the given type.</para>
                <para>For example, when an image cannot be loaded, the pixmap specified by MissingImageGraphic is drawn instead.</para>
                <para>See also webGraphic().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.TestAttribute(QtWebKit.QWebSettings.WebAttribute)">
            <summary>
                <para>Returns true if attribute is enabled; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebSettings.webGraphic(QtWebKit.QWebSettings.WebGraphic)">
            <summary>
                <para>Returns a previously set pixmap used to draw replacement graphics of the specified type.</para>
                <para>See also setWebGraphic().</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QWebView">
            <summary>
            The QWebView class provides a widget that is used to view and edit web documents.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QWebView is the main widget component of the QtWebKit web browsing module. It can be used in various applications to display web content live from the Internet.</para>
                <para>The image below shows QWebView previewed in Qt Designer with a Nokia website.</para>
                <para>A web site can be loaded onto QWebView with the load() function. Like all Qt widgets, the show() function must be invoked in order to display QWebView. The snippet below illustrates this:</para>
                <para>     QWebView *view = new QWebView(parent);</para>
                <para>     view-&gt;load(QUrl("http://qt.nokia.com/"));</para>
                <para>     view-&gt;show();</para>
                <para>Alternatively, setUrl() can also be used to load a web site. If you have the HTML content readily available, you can use setHtml() instead.</para>
                <para>The loadStarted() signal is emitted when the view begins loading. The loadProgress() signal, on the other hand, is emitted whenever an element of the web view completes loading, such as an embedded image, a script, etc. Finally, the loadFinished() signal is emitted when the view has loaded completely. It's argument - either true or false - indicates load success or failure.</para>
                <para>The page() function returns a pointer to the web page object. See Elements of QWebView for an explanation of how the web page is related to the view. To modify your web view's settings, you can access the QWebSettings object with the settings() function. With QWebSettings, you can change the default fonts, enable or disable features such as JavaScript and plugins.</para>
                <para>The title of an HTML document can be accessed with the title() property. Additionally, a web site may also specify an icon, which can be accessed using the icon() property. If the title or the icon changes, the corresponding titleChanged() and iconChanged() signals will be emitted. The textSizeMultiplier() property can be used to change the overall size of the text displayed in the web view.</para>
                <para>If you require a custom context menu, you can implement it by reimplementing contextMenuEvent() and populating your QMenu with the actions obtained from pageAction(). More functionality such as reloading the view, copying selected text to the clipboard, or pasting into the view, is also encapsulated within the QAction objects returned by pageAction(). These actions can be programmatically triggered using triggerPageAction(). Alternatively, the actions can be added to a toolbar or a menu directly. QWebView maintains the state of the returned actions but allows modification of action properties such as text or icon.</para>
                <para>A QWebView can be printed onto a QPrinter using the print() function. This function is marked as a slot and can be conveniently connected to QPrintPreviewDialog's paintRequested() signal.</para>
                <para>If you want to provide support for web sites that allow the user to open new windows, such as pop-up windows, you can subclass QWebView and reimplement the createWindow() function.</para>
                <para>
                </para>
                <para>Elements of QWebView</para>
                <para>QWebView consists of other objects such as QWebFrame and QWebPage. The flowchart below shows these elements are related.</para>
                <para>Note: It is possible to use QWebPage and QWebFrame, without using QWebView, if you do not require QWidget attributes. Nevertheless, QtWebKit depends on QtGui, so you should use a QApplication instead of QCoreApplication.</para>
                <para>
                </para>
                <para>See also Previewer Example, Web Browser, Form Extractor Example, Google Chat Example, and Fancy Browser Example.</para>
            </remarks>
        </member>
        <member name="M:QtWebKit.QWebView.#ctor(QtGui.QWidget)">
            <summary>
                <para>Constructs an empty QWebView with parent parent.</para>
                <para>See also load().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.LoadStarted">
            <summary>
                <para>This signal is emitted when a new load of the page is started.</para>
                <para>See also loadProgress() and loadFinished().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.LoadProgress">
            <summary>
                <para>This signal is emitted every time an element in the web page completes loading and the overall loading progress advances.</para>
                <para>This signal tracks the progress of all child frames.</para>
                <para>The current value is provided by progress and scales from 0 to 100, which is the default range of QProgressBar.</para>
                <para>See also loadStarted() and loadFinished().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.LoadFinished">
            <summary>
                <para>This signal is emitted when a load of the page is finished. ok will indicate whether the load was successful or any error occurred.</para>
                <para>See also loadStarted().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.TitleChanged">
            <summary>
                <para>This signal is emitted whenever the title of the main frame changes.</para>
                <para>See also title().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.StatusBarMessage">
            <summary>
                <para>This signal is emitted when the status bar text is changed by the page.</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.LinkClicked">
            <summary>
                <para>This signal is emitted whenever the user clicks on a link and the page's linkDelegationPolicy property is set to delegate the link handling for the specified url.</para>
                <para>See also QWebPage::linkDelegationPolicy().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.SelectionChanged">
            <summary>
                <para>This signal is emitted whenever the selection changes.</para>
                <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.IconChanged">
            <summary>
                <para>This signal is emitted whenever the icon of the page is loaded or changes.</para>
                <para>In order for icons to be loaded, you will need to set an icon database path using QWebSettings::setIconDatabasePath().</para>
                <para>See also icon() and QWebSettings::setIconDatabasePath().</para>
            </summary>
        </member>
        <member name="E:QtWebKit.QWebView.UrlChanged">
            <summary>
                <para>This signal is emitted when the url of the view changes.</para>
                <para>See also url() and load().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.Page">
            <summary>
                <para>Returns a pointer to the underlying web page.</para>
                <para>Makes page the new web page of the web view.</para>
                <para>The parent QObject of the provided page remains the owner of the object. If the current page is a child of the web view, it will be deleted.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.History">
            <summary>
                <para>Returns a pointer to the view's history of navigated web pages.</para>
                <para>It is equivalent to</para>
                <para>     view-&gt;page()-&gt;history();</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.Settings">
            <summary>
                <para>Returns a pointer to the view/page specific settings object.</para>
                <para>It is equivalent to</para>
                <para>     view-&gt;page()-&gt;settings();</para>
                <para>See also QWebSettings::globalSettings().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.SizeHint">
            <summary>
                <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.Title">
            <summary>
                <para>This property holds the title of the web page currently viewed.</para>
                <para>By default, this property contains an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.Url">
            <summary>
                <para>This property holds the url of the web page currently viewed.</para>
                <para>Setting this property clears the view and loads the URL.</para>
                <para>By default, this property contains an empty, invalid URL.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.Icon">
            <summary>
                <para>This property holds the icon associated with the web page currently viewed.</para>
                <para>By default, this property contains a null icon.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.SelectedText">
            <summary>
                <para>This property holds the text currently selected.</para>
                <para>By default, this property contains an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.SelectedHtml">
            <summary>
                <para>This property holds the HTML currently selected.</para>
                <para>By default, this property contains an empty string.</para>
                <para>This property was introduced in Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.HasSelection">
            <summary>
                <para>This property holds whether this page contains selected content or not.</para>
                <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.Modified">
            <summary>
                <para>This property holds whether the document was modified by the user.</para>
                <para>Parts of HTML documents can be editable for example through the contenteditable attribute on HTML elements.</para>
                <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.ZoomFactor">
            <summary>
                <para>This property holds the zoom factor for the view.</para>
                <para>This property was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWebKit.QWebView.RenderHints">
            <summary>
                <para>This property holds the default render hints for the view.</para>
                <para>These hints are used to initialize QPainter before painting the Web page.</para>
                <para>QPainter::TextAntialiasing and QPainter::SmoothPixmapTransform are enabled by default.</para>
                <para>Note: This property is not available on Symbian. However, the getter and setter functions can still be used directly.</para>
                <para>This property was introduced in Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Back">
            <summary>
                <para>Convenience slot that loads the previous document in the list of documents built by navigating links. Does nothing if there is no previous document.</para>
                <para>It is equivalent to</para>
                <para>     view-&gt;page()-&gt;triggerPageAction(QWebPage::GoBack);</para>
                <para>See also forward() and pageAction().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnChangeEvent(QtCore.QEvent)">
            <summary>
                <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
                <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.CreateWindow(QtWebKit.QWebPage.WebWindowType)">
            <summary>
                <para>This function is called from the createWindow() method of the associated QWebPage, each time the page wants to create a new window of the given type. This might be the result, for example, of a JavaScript request to open a document in a new window.</para>
                <para>Note: If the createWindow() method of the associated page is reimplemented, this method is not called, unless explicitly done so in the reimplementation.</para>
                <para>Note: In the cases when the window creation is being triggered by JavaScript, apart from reimplementing this method application must also set the JavaScriptCanOpenWindows attribute of QWebSettings to true in order for it to get called.</para>
                <para>See also QWebPage::createWindow() and QWebPage::acceptNavigationRequest().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
                <para>Reimplemented from QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
                <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
                <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnDropEvent(QtGui.QDropEvent)">
            <summary>
                <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnEvent(QtCore.QEvent)">
            <summary>
                <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.FindText(System.String,QtWebKit.QWebPage.FindFlag)">
            <summary>
                <para>Finds the specified string, subString, in the page, using the given options.</para>
                <para>If the HighlightAllOccurrences flag is passed, the function will highlight all occurrences that exist in the page. All subsequent calls will extend the highlight, rather than replace it, with occurrences of the new string.</para>
                <para>If the HighlightAllOccurrences flag is not passed, the function will select an occurrence and all subsequent calls will replace the current occurrence with the next one.</para>
                <para>To clear the selection, just pass an empty string.</para>
                <para>Returns true if subString was found; otherwise returns false.</para>
                <para>See also selectedText() and selectionChanged().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
                <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.FocusNextPrevChild(System.Boolean)">
            <summary>
                <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
                <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Forward">
            <summary>
                <para>Convenience slot that loads the next document in the list of documents built by navigating links. Does nothing if there is no next document.</para>
                <para>It is equivalent to</para>
                <para>     view-&gt;page()-&gt;triggerPageAction(QWebPage::GoForward);</para>
                <para>See also back() and pageAction().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnIconChanged">
            <summary>
                <para>This signal is emitted whenever the icon of the page is loaded or changes.</para>
                <para>In order for icons to be loaded, you will need to set an icon database path using QWebSettings::setIconDatabasePath().</para>
                <para>See also icon() and QWebSettings::setIconDatabasePath().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
                <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
                <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
                <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
                <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnLinkClicked(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted whenever the user clicks on a link and the page's linkDelegationPolicy property is set to delegate the link handling for the specified url.</para>
                <para>See also QWebPage::linkDelegationPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Load(QtCore.QUrl)">
            <summary>
                <para>Loads the specified url and displays it.</para>
                <para>Note: The view remains the same until enough data has arrived to display the new url.</para>
                <para>See also setUrl(), url(), urlChanged(), and QUrl::fromUserInput().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Load(QtNetwork.QNetworkRequest,QtNetwork.QNetworkAccessManager.Operation)">
            <summary>
                <para>Loads a network request, request, using the method specified in operation.</para>
                <para>body is optional and is only used for POST operations.</para>
                <para>Note: The view remains the same until enough data has arrived to display the new url.</para>
                <para>See also url() and urlChanged().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Load(QtNetwork.QNetworkRequest,QtNetwork.QNetworkAccessManager.Operation,QtCore.QByteArray)">
            <summary>
                <para>Loads a network request, request, using the method specified in operation.</para>
                <para>body is optional and is only used for POST operations.</para>
                <para>Note: The view remains the same until enough data has arrived to display the new url.</para>
                <para>See also url() and urlChanged().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnLoadFinished(System.Boolean)">
            <summary>
                <para>This signal is emitted when a load of the page is finished. ok will indicate whether the load was successful or any error occurred.</para>
                <para>See also loadStarted().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnLoadProgress(System.Int32)">
            <summary>
                <para>This signal is emitted every time an element in the web page completes loading and the overall loading progress advances.</para>
                <para>This signal tracks the progress of all child frames.</para>
                <para>The current value is provided by progress and scales from 0 to 100, which is the default range of QProgressBar.</para>
                <para>See also loadStarted() and loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnLoadStarted">
            <summary>
                <para>This signal is emitted when a new load of the page is started.</para>
                <para>See also loadProgress() and loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
                <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
                <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
                <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
                <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.PageAction(QtWebKit.QWebPage.WebAction)">
            <summary>
                <para>Returns a pointer to a QAction that encapsulates the specified web action action.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
                <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Print(QtGui.QPrinter)">
            <summary>
                <para>Prints the main frame to the given printer.</para>
                <para>See also QWebFrame::print() and QPrintPreviewDialog.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Reload">
            <summary>
                <para>Reloads the current document.</para>
                <para>See also stop(), pageAction(), and loadStarted().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
                <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnSelectionChanged">
            <summary>
                <para>This signal is emitted whenever the selection changes.</para>
                <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.SetContent(QtCore.QByteArray,System.String)">
            <summary>
                <para>Sets the content of the web view to the specified content data. If the mimeType argument is empty it is currently assumed that the content is HTML but in future versions we may introduce auto-detection.</para>
                <para>External objects referenced in the content are located relative to baseUrl.</para>
                <para>The data is loaded immediately; external objects are loaded asynchronously.</para>
                <para>See also load(), setHtml(), and QWebFrame::toHtml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.SetContent(QtCore.QByteArray,System.String,QtCore.QUrl)">
            <summary>
                <para>Sets the content of the web view to the specified content data. If the mimeType argument is empty it is currently assumed that the content is HTML but in future versions we may introduce auto-detection.</para>
                <para>External objects referenced in the content are located relative to baseUrl.</para>
                <para>The data is loaded immediately; external objects are loaded asynchronously.</para>
                <para>See also load(), setHtml(), and QWebFrame::toHtml().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.SetHtml(System.String)">
            <summary>
                <para>Sets the content of the web view to the specified html.</para>
                <para>External objects such as stylesheets or images referenced in the HTML document are located relative to baseUrl.</para>
                <para>The html is loaded immediately; external objects are loaded asynchronously.</para>
                <para>When using this method, WebKit assumes that external resources such as JavaScript programs or style sheets are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. Alternatively, the encoding can also be specified by the web server.</para>
                <para>This is a convenience function equivalent to setContent(html, "text/html", baseUrl).</para>
                <para>Warning: This function works only for HTML, for other mime types (i.e. XHTML, SVG) setContent() should be used instead.</para>
                <para>See also load(), setContent(), QWebFrame::toHtml(), and QWebFrame::setContent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.SetHtml(System.String,QtCore.QUrl)">
            <summary>
                <para>Sets the content of the web view to the specified html.</para>
                <para>External objects such as stylesheets or images referenced in the HTML document are located relative to baseUrl.</para>
                <para>The html is loaded immediately; external objects are loaded asynchronously.</para>
                <para>When using this method, WebKit assumes that external resources such as JavaScript programs or style sheets are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. Alternatively, the encoding can also be specified by the web server.</para>
                <para>This is a convenience function equivalent to setContent(html, "text/html", baseUrl).</para>
                <para>Warning: This function works only for HTML, for other mime types (i.e. XHTML, SVG) setContent() should be used instead.</para>
                <para>See also load(), setContent(), QWebFrame::toHtml(), and QWebFrame::setContent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.SetRenderHint(QtGui.QPainter.RenderHint,System.Boolean)">
            <summary>
                <para>If enabled is true, enables the specified render hint; otherwise disables it.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also renderHints and QPainter::renderHints().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnStatusBarMessage(System.String)">
            <summary>
                <para>This signal is emitted when the status bar text is changed by the page.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Stop">
            <summary>
                <para>Convenience slot that stops loading the document.</para>
                <para>It is equivalent to</para>
                <para>     view-&gt;page()-&gt;triggerPageAction(QWebPage::Stop);</para>
                <para>See also reload(), pageAction(), and loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnTitleChanged(System.String)">
            <summary>
                <para>This signal is emitted whenever the title of the main frame changes.</para>
                <para>See also title().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.TriggerPageAction(QtWebKit.QWebPage.WebAction,System.Boolean)">
            <summary>
                <para>Triggers the specified action. If it is a checkable action the specified checked state is assumed.</para>
                <para>The following example triggers the copy action and therefore copies any selected text to the clipboard.</para>
                <para>     view-&gt;triggerAction(QWebPage::Copy);</para>
                <para>See also pageAction().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnUrlChanged(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted when the url of the view changes.</para>
                <para>See also url() and load().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
                <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.QWebView.Finalize">
            <summary>
                <para>Destroys the web view.</para>
            </summary>
        </member>
        <member name="T:QtWebKit.QtMsgType">
            <summary>
                <para>This enum describes the messages that can be sent to a message handler (QtMsgHandler). You can use the enum to identify and associate the various message types with the appropriate actions.</para>
                <para>See also QtMsgHandler and qInstallMsgHandler().</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QtMsgType.QtCriticalMsg">
            <summary>
                <para>A message generated by the qCritical() function.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QtMsgType.QtDebugMsg">
            <summary>
                <para>A message generated by the qDebug() function.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QtMsgType.QtFatalMsg">
            <summary>
                <para>A message generated by the qFatal() function.</para>
            </summary>
        </member>
        <member name="F:QtWebKit.QtMsgType.QtWarningMsg">
            <summary>
                <para>A message generated by the qWarning() function.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.JavaScriptWindowObjectCleared">
            <summary>
                <para>This signal is emitted whenever the global window object of the JavaScript environment is cleared, e.g., before starting a new load.</para>
                <para>If you intend to add QObjects to a QWebFrame using addToJavaScriptWindowObject(), you should add them in a slot connected to this signal. This ensures that your objects remain accessible when loading new URLs.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.TitleChanged(System.String)">
            <summary>
                <para>This signal is emitted whenever the title of the frame changes. The title string specifies the new title.</para>
                <para>See also title().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.UrlChanged(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted with the URL of the frame when the frame's title is received. The new URL is specified by url.</para>
                <para>See also url().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.InitialLayoutCompleted">
            <summary>
                <para>This signal is emitted when the frame is laid out the first time. This is the first time you will see contents displayed on the frame.</para>
                <para>Note: A frame can be laid out multiple times.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.IconChanged">
            <summary>
                <para>This signal is emitted when the icon ("favicon") associated with the frame has been loaded.</para>
                <para>See also icon().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.ContentsSizeChanged(QtCore.QSize)">
            <summary>
                <para>This signal is emitted when the frame's contents size changes to size.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also contentsSize().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.LoadStarted">
            <summary>
                <para>This signal is emitted when a new load of this frame is started.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.LoadFinished(System.Boolean)">
            <summary>
                <para>This signal is emitted when a load of this frame is finished. ok will indicate whether the load was successful or any error occurred.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also loadStarted().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebFrameSignals.PageChanged">
            <summary>
                <para>This signal is emitted when this frame has been moved to a different QWebPage.</para>
                <para>This function was introduced in Qt 4.7.</para>
                <para>See also page().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.LoadStarted">
            <summary>
                <para>This signal is emitted when a page starts loading content.</para>
                <para>See also loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.LoadProgress(System.Int32)">
            <summary>
                <para>This signal is emitted when the global progress status changes. The current value is provided by progress and scales from 0 to 100, which is the default range of QProgressBar. It accumulates changes from all the child frames.</para>
                <para>See also bytesReceived().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.LoadFinished(System.Boolean)">
            <summary>
                <para>This signal is emitted when the page finishes loading content. This signal is independant of script execution or page rendering. ok will indicate whether the load was successful or any error occurred.</para>
                <para>See also loadStarted() and ErrorPageExtension.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.LinkHovered(System.String,System.String,System.String)">
            <summary>
                <para>This signal is emitted when the mouse hovers over a link.</para>
                <para>link contains the link url. title is the link element's title, if it is specified in the markup. textContent provides text within the link element, e.g., text inside an HTML anchor tag.</para>
                <para>When the mouse leaves the link element the signal is emitted with empty parameters.</para>
                <para>See also linkClicked().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.StatusBarMessage(System.String)">
            <summary>
                <para>This signal is emitted when the statusbar text is changed by the page.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.SelectionChanged">
            <summary>
                <para>This signal is emitted whenever the selection changes, either interactively or programmatically (e.g. by calling triggerAction() with a selection action).</para>
                <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.FrameCreated(QtWebKit.QWebFrame)">
            <summary>
                <para>This signal is emitted whenever the page creates a new frame.</para>
                <para>See also currentFrame().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.GeometryChangeRequested(QtCore.QRect)">
            <summary>
                <para>This signal is emitted whenever the document wants to change the position and size of the page to geom. This can happen for example through JavaScript.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.RepaintRequested(QtCore.QRect)">
            <summary>
                <para>This signal is emitted whenever this QWebPage should be updated. It's useful when rendering a QWebPage without a QWebView or QGraphicsWebView. dirtyRect contains the area that needs to be updated. To paint the QWebPage get the mainFrame() and call the render(QPainter*, const QRegion&amp;) method with the dirtyRect as the second parameter.</para>
                <para>See also mainFrame() and view().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.ScrollRequested(System.Int32,System.Int32,QtCore.QRect)">
            <summary>
                <para>This signal is emitted whenever the content given by rectToScroll needs to be scrolled dx and dy downwards and no view was set.</para>
                <para>See also view().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.WindowCloseRequested">
            <summary>
                <para>This signal is emitted whenever the page requests the web browser window to be closed, for example through the JavaScript window.close() call.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.PrintRequested(QtWebKit.QWebFrame)">
            <summary>
                <para>This signal is emitted whenever the page requests the web browser to print frame, for example through the JavaScript window.print() call.</para>
                <para>See also QWebFrame::print() and QPrintPreviewDialog.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.LinkClicked(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted whenever the user clicks on a link and the page's linkDelegationPolicy property is set to delegate the link handling for the specified url.</para>
                <para>By default no links are delegated and are handled by QWebPage instead.</para>
                <para>Note: This signal possibly won't be emitted for clicked links which use JavaScript to trigger navigation.</para>
                <para>See also linkHovered().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.ToolBarVisibilityChangeRequested(System.Boolean)">
            <summary>
                <para>This signal is emitted whenever the visibility of the toolbar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.StatusBarVisibilityChangeRequested(System.Boolean)">
            <summary>
                <para>This signal is emitted whenever the visibility of the statusbar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.MenuBarVisibilityChangeRequested(System.Boolean)">
            <summary>
                <para>This signal is emitted whenever the visibility of the menubar in a web browser window that hosts QWebPage should be changed to visible.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.UnsupportedContent(QtNetwork.QNetworkReply)">
            <summary>
                <para>This signal is emitted when WebKit cannot handle a link the user navigated to or a web server's response includes a "Content-Disposition" header with the 'attachment' directive. If "Content-Disposition" is present in reply, the web server is indicating that the client should prompt the user to save the content regardless of content-type. See RFC 2616 sections 19.5.1 for details about Content-Disposition.</para>
                <para>At signal emission time the meta-data of the QNetworkReply reply is available.</para>
                <para>Note: The receiving slot is responsible for deleting the QNetworkReply reply.</para>
                <para>Note: This signal is only emitted if the forwardUnsupportedContent property is set to true.</para>
                <para>See also downloadRequested().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.DownloadRequested(QtNetwork.QNetworkRequest)">
            <summary>
                <para>This signal is emitted when the user decides to download a link. The url of the link as well as additional meta-information is contained in request.</para>
                <para>See also unsupportedContent().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.MicroFocusChanged">
            <summary>
                <para>This signal is emitted when for example the position of the cursor in an editable form element changes. It is used to inform input methods about the new on-screen position where the user is able to enter text. This signal is usually connected to the QWidget::updateMicroFocus() slot.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.ContentsChanged">
            <summary>
                <para>This signal is emitted whenever the text in form elements changes as well as other editable content.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also contentEditable, modified, QWebFrame::toHtml(), and QWebFrame::toPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.DatabaseQuotaExceeded(QtWebKit.QWebFrame,System.String)">
            <summary>
                <para>This signal is emitted whenever the web site shown in frame is asking to store data to the database databaseName and the quota allocated to that web site is exceeded.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also QWebDatabase.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.ApplicationCacheQuotaExceeded(QtWebKit.QWebSecurityOrigin,System.UInt64)">
            <summary>
                <para>This signal is emitted whenever the web site is asking to store data to the application cache database databaseName and the quota allocated to that web site is exceeded.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.SaveFrameStateRequested(QtWebKit.QWebFrame,QtWebKit.QWebHistoryItem)">
            <summary>
                <para>This signal is emitted shortly before the history of navigated pages in frame is changed, for example when navigating back in the history.</para>
                <para>The provided QWebHistoryItem, item, holds the history entry of the frame before the change.</para>
                <para>A potential use-case for this signal is to store custom data in the QWebHistoryItem associated to the frame, using QWebHistoryItem::setUserData().</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.RestoreFrameStateRequested(QtWebKit.QWebFrame)">
            <summary>
                <para>This signal is emitted when the load of frame is finished and the application may now update its state accordingly.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.ViewportChangeRequested">
            <summary>
                <para>Page authors can provide the supplied values by using the viewport meta tag. More information about this can be found at Safari Reference Library: Using the Viewport Meta Tag.</para>
                <para>This function was introduced in Qt 4.8.</para>
                <para>See also QWebPage::ViewportAttributes, setPreferredContentsSize(), and QGraphicsWebView::setScale().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.FeaturePermissionRequested(QtWebKit.QWebFrame,QtWebKit.QWebPage.Feature)">
            <summary>
                <para>bool QWebPage::findText ( const QString &amp; subString, FindFlags options = 0 )</para>
                <para>Finds the specified string, subString, in the page, using the given options.</para>
                <para>If the HighlightAllOccurrences flag is passed, the function will highlight all occurrences that exist in the page. All subsequent calls will extend the highlight, rather than replace it, with occurrences of the new string.</para>
                <para>If the HighlightAllOccurrences flag is not passed, the function will select an occurrence and all subsequent calls will replace the current occurrence with the next one.</para>
                <para>To clear the selection, just pass an empty string.</para>
                <para>Returns true if subString was found; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebPageSignals.FeaturePermissionRequestCanceled(QtWebKit.QWebFrame,QtWebKit.QWebPage.Feature)">
            <summary>
                <para>void QWebPage::featurePermissionRequested ( QWebFrame * frame, QWebPage::Feature feature ) [signal]</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.LoadStarted">
            <summary>
                <para>This signal is emitted when a new load of the page is started.</para>
                <para>See also loadProgress() and loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.LoadProgress(System.Int32)">
            <summary>
                <para>This signal is emitted every time an element in the web page completes loading and the overall loading progress advances.</para>
                <para>This signal tracks the progress of all child frames.</para>
                <para>The current value is provided by progress and scales from 0 to 100, which is the default range of QProgressBar.</para>
                <para>See also loadStarted() and loadFinished().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.LoadFinished(System.Boolean)">
            <summary>
                <para>This signal is emitted when a load of the page is finished. ok will indicate whether the load was successful or any error occurred.</para>
                <para>See also loadStarted().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.TitleChanged(System.String)">
            <summary>
                <para>This signal is emitted whenever the title of the main frame changes.</para>
                <para>See also title().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.StatusBarMessage(System.String)">
            <summary>
                <para>This signal is emitted when the status bar text is changed by the page.</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.LinkClicked(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted whenever the user clicks on a link and the page's linkDelegationPolicy property is set to delegate the link handling for the specified url.</para>
                <para>See also QWebPage::linkDelegationPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.SelectionChanged">
            <summary>
                <para>This signal is emitted whenever the selection changes.</para>
                <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.IconChanged">
            <summary>
                <para>This signal is emitted whenever the icon of the page is loaded or changes.</para>
                <para>In order for icons to be loaded, you will need to set an icon database path using QWebSettings::setIconDatabasePath().</para>
                <para>See also icon() and QWebSettings::setIconDatabasePath().</para>
            </summary>
        </member>
        <member name="M:QtWebKit.IQWebViewSignals.UrlChanged(QtCore.QUrl)">
            <summary>
                <para>This signal is emitted when the url of the view changes.</para>
                <para>See also url() and load().</para>
            </summary>
        </member>
    </members>
</doc>
