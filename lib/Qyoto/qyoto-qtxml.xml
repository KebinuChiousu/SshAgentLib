<?xml version="1.0"?>
<doc>
    <assembly>
        <name>qyoto-qtxml</name>
    </assembly>
    <members>
        <member name="T:QtXml.QDomAttr">
            <summary>
            The QDomAttr class represents one attribute of a QDomElement.
            </summary>
            <remarks>
                <para>
                </para>
                <para>For example, the following piece of XML produces an element with no children, but two attributes:</para>
                <para> &lt;link href="http://qt.nokia.com" color="red" /&gt;</para>
                <para>You can access the attributes of an element with code like this:</para>
                <para> QDomElement e = //...</para>
                <para> //...</para>
                <para> QDomAttr a = e.attributeNode("href");</para>
                <para> cout &lt;&lt; a.value() &lt;&lt; endl;                // prints "http://qt.nokia.com"</para>
                <para> a.setValue("http://qt.nokia.com/doc"); // change the node's attribute</para>
                <para> QDomAttr a2 = e.attributeNode("href");</para>
                <para> cout &lt;&lt; a2.value() &lt;&lt; endl;               // prints "http://qt.nokia.com/doc"</para>
                <para>This example also shows that changing an attribute received from an element changes the attribute of the element. If you do not want to change the value of the element's attribute you must use cloneNode() to get an independent copy of the attribute.</para>
                <para>QDomAttr can return the name() and value() of an attribute. An attribute's value is set with setValue(). If specified() returns true the value was set with setValue(). The node this attribute is attached to (if any) is returned by ownerElement().</para>
                <para>For further information about the Document Object Model see http://www.w3.org/TR/REC-DOM-Level-1/ and http://www.w3.org/TR/DOM-Level-2-Core/. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomAttr.#ctor">
            <summary>
                <para>Constructs an empty attribute.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomAttr.#ctor(QtXml.QDomAttr)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomAttr.Value">
            <summary>
                <para>Returns the value of the attribute or an empty string if the attribute has not been specified.</para>
                <para>Sets the attribute's value to v.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomAttr.Name">
            <summary>
                <para>Returns the attribute's name.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomAttr.nodeType">
            <summary>
                <para>Returns AttributeNode.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomAttr.OwnerElement">
            <summary>
                <para>Returns the element node this attribute is attached to or a null node if this attribute is not attached to any element.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomAttr.Specified">
            <summary>
                <para>Returns true if the attribute has been set by the user with setValue(). Returns false if the value hasn't been specified or set.</para>
                <para>See also setValue().</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomCDATASection">
            <summary>
            The QDomCDATASection class represents an XML CDATA section.
            </summary>
            <remarks>
                <para>
                </para>
                <para>CDATA sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. The only delimiter that is recognized in a CDATA section is the "]]&amp;gt;" string that terminates the CDATA section. CDATA sections cannot be nested. Their primary purpose is for including material such as XML fragments, without needing to escape all the delimiters.</para>
                <para>Adjacent QDomCDATASection nodes are not merged by the QDomNode::normalize() function.</para>
                <para>For further information about the Document Object Model see http://www.w3.org/TR/REC-DOM-Level-1/ and http://www.w3.org/TR/DOM-Level-2-Core/. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomCDATASection.#ctor">
            <summary>
                <para>Constructs an empty CDATA section. To create a CDATA section with content, use the QDomDocument::createCDATASection() function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCDATASection.#ctor(QtXml.QDomCDATASection)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomCDATASection.nodeType">
            <summary>
                <para>Returns CDATASection.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomCharacterData">
            <summary>
            The QDomCharacterData class represents a generic string in the DOM.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Character data as used in XML specifies a generic data string. More specialized versions of this class are QDomText, QDomComment and QDomCDATASection.</para>
                <para>The data string is set with setData() and retrieved with data(). You can retrieve a portion of the data string using substringData(). Extra data can be appended with appendData(), or inserted with insertData(). Portions of the data string can be deleted with deleteData() or replaced with replaceData(). The length of the data string is returned by length().</para>
                <para>The node type of the node containing this character data is returned by nodeType().</para>
                <para>
                </para>
                <para>See also QDomText, QDomComment, and QDomCDATASection.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomCharacterData.#ctor">
            <summary>
                <para>Constructs an empty character data object.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCharacterData.#ctor(QtXml.QDomCharacterData)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomCharacterData.Data">
            <summary>
                <para>Returns the string stored in this object.</para>
                <para>If the node is a null node, it will return an empty string.</para>
                <para>Sets this object's string to v.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomCharacterData.Length">
            <summary>
                <para>Returns the length of the stored string.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomCharacterData.nodeType">
            <summary>
                <para>Returns the type of node this object refers to (i.e. TextNode, CDATASectionNode, CommentNode or CharacterDataNode). For a null node, returns CharacterDataNode.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCharacterData.AppendData(System.String)">
            <summary>
                <para>Appends the string arg to the stored string.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCharacterData.DeleteData(NativeULong,NativeULong)">
            <summary>
                <para>Deletes a substring of length count from position offset.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCharacterData.InsertData(NativeULong,System.String)">
            <summary>
                <para>Inserts the string arg into the stored string at position offset.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCharacterData.ReplaceData(NativeULong,NativeULong,System.String)">
            <summary>
                <para>Replaces the substring of length count starting at position offset with the string arg.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomCharacterData.SubstringData(NativeULong,NativeULong)">
            <summary>
                <para>Returns the substring of length count from position offset.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomComment">
            <summary>
            The QDomComment class represents an XML comment.
            </summary>
            <remarks>
                <para>
                </para>
                <para>A comment in the parsed XML such as this:</para>
                <para> &lt;!-- this is a comment --&gt;</para>
                <para>is represented by QDomComment objects in the parsed Dom tree.</para>
                <para>For further information about the Document Object Model see http://www.w3.org/TR/REC-DOM-Level-1/ and http://www.w3.org/TR/DOM-Level-2-Core/. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomComment.#ctor">
            <summary>
                <para>Constructs an empty comment. To construct a comment with content, use the QDomDocument::createComment() function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomComment.#ctor(QtXml.QDomComment)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomComment.nodeType">
            <summary>
                <para>Returns CommentNode.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomDocument">
            <summary>
            The QDomDocument class represents an XML document.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The QDomDocument class represents the entire XML document. Conceptually, it is the root of the document tree, and provides the primary access to the document's data.</para>
                <para>Since elements, text nodes, comments, processing instructions, etc., cannot exist outside the context of a document, the document class also contains the factory functions needed to create these objects. The node objects created have an ownerDocument() function which associates them with the document within whose context they were created. The DOM classes that will be used most often are QDomNode, QDomDocument, QDomElement and QDomText.</para>
                <para>The parsed XML is represented internally by a tree of objects that can be accessed using the various QDom classes. All QDom classes only reference objects in the internal tree. The internal objects in the DOM tree will get deleted once the last QDom object referencing them and the QDomDocument itself are deleted.</para>
                <para>Creation of elements, text nodes, etc. is done using the various factory functions provided in this class. Using the default constructors of the QDom classes will only result in empty objects that cannot be manipulated or inserted into the Document.</para>
                <para>The QDomDocument class has several functions for creating document data, for example, createElement(), createTextNode(), createComment(), createCDATASection(), createProcessingInstruction(), createAttribute() and createEntityReference(). Some of these functions have versions that support namespaces, i.e. createElementNS() and createAttributeNS(). The createDocumentFragment() function is used to hold parts of the document; this is useful for manipulating for complex documents.</para>
                <para>The entire content of the document is set with setContent(). This function parses the string it is passed as an XML document and creates the DOM tree that represents the document. The root element is available using documentElement(). The textual representation of the document can be obtained using toString().</para>
                <para>Note: The DOM tree might end up reserving a lot of memory if the XML document is big. For big XML documents, the QXmlStreamReader or the QXmlQuery classes might be better solutions.</para>
                <para>It is possible to insert a node from another document into the document using importNode().</para>
                <para>You can obtain a list of all the elements that have a particular tag with elementsByTagName() or with elementsByTagNameNS().</para>
                <para>The QDom classes are typically used as follows:</para>
                <para> QDomDocument doc("mydocument");</para>
                <para> QFile file("mydocument.xml");</para>
                <para> if (!file.open(QIODevice::ReadOnly))</para>
                <para>     return;</para>
                <para> if (!doc.setContent(&amp;file)) {</para>
                <para>     file.close();</para>
                <para>     return;</para>
                <para> }</para>
                <para> file.close();</para>
                <para>
                </para>
                <para> // print out the element names of all elements that are direct children</para>
                <para> // of the outermost element.</para>
                <para> QDomElement docElem = doc.documentElement();</para>
                <para>
                </para>
                <para> QDomNode n = docElem.firstChild();</para>
                <para> while(!n.isNull()) {</para>
                <para>     QDomElement e = n.toElement(); // try to convert the node to an element.</para>
                <para>     if(!e.isNull()) {</para>
                <para>         cout &lt;&lt; qPrintable(e.tagName()) &lt;&lt; endl; // the node really is an element.</para>
                <para>     }</para>
                <para>     n = n.nextSibling();</para>
                <para> }</para>
                <para>
                </para>
                <para> // Here we append a new element to the end of the document</para>
                <para> QDomElement elem = doc.createElement("img");</para>
                <para> elem.setAttribute("src", "myimage.png");</para>
                <para> docElem.appendChild(elem);</para>
                <para>Once doc and elem go out of scope, the whole internal tree representing the XML document is deleted.</para>
                <para>To create a document using DOM use code like this:</para>
                <para> QDomDocument doc("MyML");</para>
                <para> QDomElement root = doc.createElement("MyML");</para>
                <para> doc.appendChild(root);</para>
                <para>
                </para>
                <para> QDomElement tag = doc.createElement("Greeting");</para>
                <para> root.appendChild(tag);</para>
                <para>
                </para>
                <para> QDomText t = doc.createTextNode("Hello World");</para>
                <para> tag.appendChild(t);</para>
                <para>
                </para>
                <para> QString xml = doc.toString();</para>
                <para>For further information about the Document Object Model see the Document Object Model (DOM) Level 1 and Level 2 Core Specifications.</para>
                <para>
                </para>
                <para>See also DOM Bookmarks Example and Simple DOM Model Example.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomDocument.#ctor">
            <summary>
                <para>Constructs an empty document.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.#ctor(QtXml.QDomDocumentType)">
            <summary>
                <para>Creates a document with the document type doctype.</para>
                <para>See also QDomImplementation::createDocumentType().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.#ctor(QtXml.QDomDocument)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.#ctor(System.String)">
            <summary>
                <para>Creates a document and sets the name of the document type to name.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocument.Doctype">
            <summary>
                <para>Returns the document type of this document.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocument.DocumentElement">
            <summary>
                <para>Returns the root element of the document.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocument.Implementation">
            <summary>
                <para>Returns a QDomImplementation object.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocument.nodeType">
            <summary>
                <para>Returns DocumentNode.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateAttribute(System.String)">
            <summary>
                <para>Creates a new attribute called name that can be inserted into an element, e.g. using QDomElement::setAttributeNode().</para>
                <para>If name is not a valid XML name, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also createAttributeNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateAttributeNS(System.String,System.String)">
            <summary>
                <para>Creates a new attribute with namespace support that can be inserted into an element. The name of the attribute is qName and the namespace URI is nsURI. This function also sets QDomNode::prefix() and QDomNode::localName() to appropriate values (depending on qName).</para>
                <para>If qName is not a valid XML name, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also createAttribute().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateCDATASection(System.String)">
            <summary>
                <para>Creates a new CDATA section for the string value that can be inserted into the document, e.g. using QDomNode::appendChild().</para>
                <para>If value contains characters which cannot be stored in a CDATA section, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also QDomNode::appendChild(), QDomNode::insertBefore(), and QDomNode::insertAfter().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateComment(System.String)">
            <summary>
                <para>Creates a new comment for the string value that can be inserted into the document, e.g. using QDomNode::appendChild().</para>
                <para>If value contains characters which cannot be stored in an XML comment, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also QDomNode::appendChild(), QDomNode::insertBefore(), and QDomNode::insertAfter().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateDocumentFragment">
            <summary>
                <para>Creates a new document fragment, that can be used to hold parts of the document, e.g. when doing complex manipulations of the document tree.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateElement(System.String)">
            <summary>
                <para>Creates a new element called tagName that can be inserted into the DOM tree, e.g. using QDomNode::appendChild().</para>
                <para>If tagName is not a valid XML name, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>QDomNode::insertAfter()</para>
                <para>See also createElementNS(), QDomNode::appendChild(), and QDomNode::insertBefore().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateElementNS(System.String,System.String)">
            <summary>
                <para>Creates a new element with namespace support that can be inserted into the DOM tree. The name of the element is qName and the namespace URI is nsURI. This function also sets QDomNode::prefix() and QDomNode::localName() to appropriate values (depending on qName).</para>
                <para>If qName is an empty string, returns a null element regardless of whether the invalid data policy is set.</para>
                <para>See also createElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateEntityReference(System.String)">
            <summary>
                <para>Creates a new entity reference called name that can be inserted into the document, e.g. using QDomNode::appendChild().</para>
                <para>If name is not a valid XML name, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also QDomNode::appendChild(), QDomNode::insertBefore(), and QDomNode::insertAfter().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateProcessingInstruction(System.String,System.String)">
            <summary>
                <para>Creates a new processing instruction that can be inserted into the document, e.g. using QDomNode::appendChild(). This function sets the target for the processing instruction to target and the data to data.</para>
                <para>If target is not a valid XML name, or data if contains characters which cannot appear in a processing instruction, the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also QDomNode::appendChild(), QDomNode::insertBefore(), and QDomNode::insertAfter().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.CreateTextNode(System.String)">
            <summary>
                <para>Creates a text node for the string value that can be inserted into the document tree, e.g. using QDomNode::appendChild().</para>
                <para>If value contains characters which cannot be stored as character data of an XML document (even in the form of character references), the behavior of this function is governed by QDomImplementation::InvalidDataPolicy.</para>
                <para>See also QDomNode::appendChild(), QDomNode::insertBefore(), and QDomNode::insertAfter().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ElementById(System.String)">
            <summary>
                <para>Returns the element whose ID is equal to elementId. If no element with the ID was found, this function returns a null element.</para>
                <para>Since the QDomClasses do not know which attributes are element IDs, this function returns always a null element. This may change in a future version.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ElementsByTagName(System.String)">
            <summary>
                <para>Returns a QDomNodeList, that contains all the elements in the document with the name tagname. The order of the node list is the order they are encountered in a preorder traversal of the element tree.</para>
                <para>See also elementsByTagNameNS() and QDomElement::elementsByTagName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ElementsByTagNameNS(System.String,System.String)">
            <summary>
                <para>Returns a QDomNodeList that contains all the elements in the document with the local name localName and a namespace URI of nsURI. The order of the node list is the order they are encountered in a preorder traversal of the element tree.</para>
                <para>See also elementsByTagName() and QDomElement::elementsByTagNameNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ImportNode(QtXml.QDomNode,System.Boolean)">
            <summary>
                <para>Imports the node importedNode from another document to this document. importedNode remains in the original document; this function creates a copy that can be used within this document.</para>
                <para>This function returns the imported node that belongs to this document. The returned node has no parent. It is not possible to import QDomDocument and QDomDocumentType nodes. In those cases this function returns a null node.</para>
                <para>If deep is true, this function imports not only the node importedNode but its whole subtree; if it is false, only the importedNode is imported. The argument deep has no effect on QDomAttr and QDomEntityReference nodes, since the descendants of QDomAttr nodes are always imported and those of QDomEntityReference nodes are never imported.</para>
                <para>The behavior of this function is slightly different depending on the node types:</para>
                <para>
                </para>
                <para>Node TypeBehavior</para>
                <para>QDomAttr	The owner element is set to 0 and the specified flag is set to true in the generated attribute. The whole subtree of importedNode is always imported for attribute nodes: deep has no effect.</para>
                <para>QDomDocument	Document nodes cannot be imported.</para>
                <para>QDomDocumentFragment	If deep is true, this function imports the whole document fragment; otherwise it only generates an empty document fragment.</para>
                <para>QDomDocumentType	Document type nodes cannot be imported.</para>
                <para>QDomElement	Attributes for which QDomAttr::specified() is true are also imported, other attributes are not imported. If deep is true, this function also imports the subtree of importedNode; otherwise it imports only the element node (and some attributes, see above).</para>
                <para>QDomEntity	Entity nodes can be imported, but at the moment there is no way to use them since the document type is read-only in DOM level 2.</para>
                <para>QDomEntityReference	Descendants of entity reference nodes are never imported: deep has no effect.</para>
                <para>QDomNotation	Notation nodes can be imported, but at the moment there is no way to use them since the document type is read-only in DOM level 2.</para>
                <para>QDomProcessingInstruction	The target and value of the processing instruction is copied to the new node.</para>
                <para>QDomText	The text is copied to the new node.</para>
                <para>QDomCDATASection	The text is copied to the new node.</para>
                <para>QDomComment	The text is copied to the new node.</para>
                <para>
                </para>
                <para>QDomNode::insertAfter() QDomNode::replaceChild() QDomNode::removeChild() QDomNode::appendChild()</para>
                <para>See also QDomElement::setAttribute() and QDomNode::insertBefore().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtXml.QXmlInputSource,QtXml.QXmlReader,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the QXmlInputSource source and parses it with the QXmlReader reader, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>This function doesn't change the features of the reader. If you want to use certain features for parsing you can use this function to set up the reader appropriately.</para>
                <para>See also QXmlSimpleReader.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtXml.QXmlInputSource,QtXml.QXmlReader,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the QXmlInputSource source and parses it with the QXmlReader reader, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>This function doesn't change the features of the reader. If you want to use certain features for parsing you can use this function to set up the reader appropriately.</para>
                <para>See also QXmlSimpleReader.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtXml.QXmlInputSource,QtXml.QXmlReader,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the QXmlInputSource source and parses it with the QXmlReader reader, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>This function doesn't change the features of the reader. If you want to use certain features for parsing you can use this function to set up the reader appropriately.</para>
                <para>See also QXmlSimpleReader.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QByteArray,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the byte array buffer, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>No namespace processing is performed.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QIODevice,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the IO device dev, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>No namespace processing is performed.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QByteArray,System.Boolean,System.Text.StringBuilder)">
            <summary>
                <para>This function parses the XML document from the byte array data and sets it as the content of the document. It tries to detect the encoding of the document as required by the XML specification.</para>
                <para>If namespaceProcessing is true, the parser recognizes namespaces in the XML file and sets the prefix name, local name and namespace URI to appropriate values. If namespaceProcessing is false, the parser does no namespace processing when it reads the XML file.</para>
                <para>If a parse error occurs, this function returns false and the error message is placed in *errorMsg, the line number in *errorLine and the column number in *errorColumn (unless the associated pointer is set to 0); otherwise this function returns true. The various error messages are described in the QXmlParseException class documentation. Note that, if you want to display these error messages to your application's users, they will be displayed in English unless they are explicitly translated.</para>
                <para>If namespaceProcessing is true, the function QDomNode::prefix() returns a string for all elements and attributes. It returns an empty string if the element or attribute has no prefix.</para>
                <para>Text nodes consisting only of whitespace are stripped and won't appear in the QDomDocument. If this behavior is not desired, one can use the setContent() overload that allows a QXmlReader to be supplied.</para>
                <para>If namespaceProcessing is false, the functions QDomNode::prefix(), QDomNode::localName() and QDomNode::namespaceURI() return an empty string.</para>
                <para>Entity references are handled as follows:</para>
                <para>
                </para>
                <para>References to internal general entities and character entities occurring in the content are included. The result is a QDomText node with the references replaced by their corresponding entity values.</para>
                <para>References to parameter entities occurring in the internal subset are included. The result is a QDomDocumentType node which contains entity and notation declarations with the references replaced by their corresponding entity values.</para>
                <para>Any general parsed entity reference which is not defined in the internal subset and which occurs in the content is represented as a QDomEntityReference node.</para>
                <para>Any parsed entity reference which is not defined in the internal subset and which occurs outside of the content is replaced with an empty string.</para>
                <para>Any unparsed entity reference is replaced with an empty string.</para>
                <para>
                </para>
                <para>QDomNode::prefix() QString::isNull() QString::isEmpty()</para>
                <para>Warning: This function is not reentrant.</para>
                <para>See also QDomNode::namespaceURI() and QDomNode::localName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QIODevice,System.Boolean,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the IO device dev, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtXml.QXmlInputSource,System.Boolean,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the QXmlInputSource source, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QByteArray,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the byte array buffer, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>No namespace processing is performed.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QIODevice,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the IO device dev, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>No namespace processing is performed.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QByteArray,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the byte array buffer, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>No namespace processing is performed.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QIODevice,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the IO device dev, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>No namespace processing is performed.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QByteArray,System.Boolean,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This function parses the XML document from the byte array data and sets it as the content of the document. It tries to detect the encoding of the document as required by the XML specification.</para>
                <para>If namespaceProcessing is true, the parser recognizes namespaces in the XML file and sets the prefix name, local name and namespace URI to appropriate values. If namespaceProcessing is false, the parser does no namespace processing when it reads the XML file.</para>
                <para>If a parse error occurs, this function returns false and the error message is placed in *errorMsg, the line number in *errorLine and the column number in *errorColumn (unless the associated pointer is set to 0); otherwise this function returns true. The various error messages are described in the QXmlParseException class documentation. Note that, if you want to display these error messages to your application's users, they will be displayed in English unless they are explicitly translated.</para>
                <para>If namespaceProcessing is true, the function QDomNode::prefix() returns a string for all elements and attributes. It returns an empty string if the element or attribute has no prefix.</para>
                <para>Text nodes consisting only of whitespace are stripped and won't appear in the QDomDocument. If this behavior is not desired, one can use the setContent() overload that allows a QXmlReader to be supplied.</para>
                <para>If namespaceProcessing is false, the functions QDomNode::prefix(), QDomNode::localName() and QDomNode::namespaceURI() return an empty string.</para>
                <para>Entity references are handled as follows:</para>
                <para>
                </para>
                <para>References to internal general entities and character entities occurring in the content are included. The result is a QDomText node with the references replaced by their corresponding entity values.</para>
                <para>References to parameter entities occurring in the internal subset are included. The result is a QDomDocumentType node which contains entity and notation declarations with the references replaced by their corresponding entity values.</para>
                <para>Any general parsed entity reference which is not defined in the internal subset and which occurs in the content is represented as a QDomEntityReference node.</para>
                <para>Any parsed entity reference which is not defined in the internal subset and which occurs outside of the content is replaced with an empty string.</para>
                <para>Any unparsed entity reference is replaced with an empty string.</para>
                <para>
                </para>
                <para>QDomNode::prefix() QString::isNull() QString::isEmpty()</para>
                <para>Warning: This function is not reentrant.</para>
                <para>See also QDomNode::namespaceURI() and QDomNode::localName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QIODevice,System.Boolean,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the IO device dev, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtXml.QXmlInputSource,System.Boolean,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the QXmlInputSource source, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QByteArray,System.Boolean,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This function parses the XML document from the byte array data and sets it as the content of the document. It tries to detect the encoding of the document as required by the XML specification.</para>
                <para>If namespaceProcessing is true, the parser recognizes namespaces in the XML file and sets the prefix name, local name and namespace URI to appropriate values. If namespaceProcessing is false, the parser does no namespace processing when it reads the XML file.</para>
                <para>If a parse error occurs, this function returns false and the error message is placed in *errorMsg, the line number in *errorLine and the column number in *errorColumn (unless the associated pointer is set to 0); otherwise this function returns true. The various error messages are described in the QXmlParseException class documentation. Note that, if you want to display these error messages to your application's users, they will be displayed in English unless they are explicitly translated.</para>
                <para>If namespaceProcessing is true, the function QDomNode::prefix() returns a string for all elements and attributes. It returns an empty string if the element or attribute has no prefix.</para>
                <para>Text nodes consisting only of whitespace are stripped and won't appear in the QDomDocument. If this behavior is not desired, one can use the setContent() overload that allows a QXmlReader to be supplied.</para>
                <para>If namespaceProcessing is false, the functions QDomNode::prefix(), QDomNode::localName() and QDomNode::namespaceURI() return an empty string.</para>
                <para>Entity references are handled as follows:</para>
                <para>
                </para>
                <para>References to internal general entities and character entities occurring in the content are included. The result is a QDomText node with the references replaced by their corresponding entity values.</para>
                <para>References to parameter entities occurring in the internal subset are included. The result is a QDomDocumentType node which contains entity and notation declarations with the references replaced by their corresponding entity values.</para>
                <para>Any general parsed entity reference which is not defined in the internal subset and which occurs in the content is represented as a QDomEntityReference node.</para>
                <para>Any parsed entity reference which is not defined in the internal subset and which occurs outside of the content is replaced with an empty string.</para>
                <para>Any unparsed entity reference is replaced with an empty string.</para>
                <para>
                </para>
                <para>QDomNode::prefix() QString::isNull() QString::isEmpty()</para>
                <para>Warning: This function is not reentrant.</para>
                <para>See also QDomNode::namespaceURI() and QDomNode::localName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtCore.QIODevice,System.Boolean,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the IO device dev, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(QtXml.QXmlInputSource,System.Boolean,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the QXmlInputSource source, returning true if the content was successfully parsed; otherwise returns false.</para>
                <para>This function was introduced in Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(System.String,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the string text, returning true if the content was successfully parsed; otherwise returns false. Since text is already a Unicode string, no encoding detection is performed.</para>
                <para>No namespace processing is performed either.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(System.String,System.Boolean,System.Text.StringBuilder)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the string text, returning true if the content was successfully parsed; otherwise returns false. Since text is already a Unicode string, no encoding detection is done.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(System.String,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the string text, returning true if the content was successfully parsed; otherwise returns false. Since text is already a Unicode string, no encoding detection is performed.</para>
                <para>No namespace processing is performed either.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(System.String,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the string text, returning true if the content was successfully parsed; otherwise returns false. Since text is already a Unicode string, no encoding detection is performed.</para>
                <para>No namespace processing is performed either.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(System.String,System.Boolean,System.Text.StringBuilder,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the string text, returning true if the content was successfully parsed; otherwise returns false. Since text is already a Unicode string, no encoding detection is done.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.SetContent(System.String,System.Boolean,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>This function reads the XML document from the string text, returning true if the content was successfully parsed; otherwise returns false. Since text is already a Unicode string, no encoding detection is done.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ToByteArray(System.Int32)">
            <summary>
                <para>Converts the parsed document back to its textual representation and returns a QByteArray containing the data encoded as UTF-8.</para>
                <para>This function uses indent as the amount of space to indent subelements.</para>
                <para>See also toString().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ToString">
            <summary>
                <para>Converts the parsed document back to its textual representation.</para>
                <para>This function uses indent as the amount of space to indent subelements.</para>
                <para>If indent is -1, no whitespace at all is added.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.ToString(System.Int32)">
            <summary>
                <para>Converts the parsed document back to its textual representation.</para>
                <para>This function uses indent as the amount of space to indent subelements.</para>
                <para>If indent is -1, no whitespace at all is added.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocument.Finalize">
            <summary>
                <para>Destroys the object and frees its resources.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomDocumentFragment">
            <summary>
            The QDomDocumentFragment class is a tree of QDomNodes which is not usually a complete QDomDocument.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If you want to do complex tree operations it is useful to have a lightweight class to store nodes and their relations. QDomDocumentFragment stores a subtree of a document which does not necessarily represent a well-formed XML document.</para>
                <para>QDomDocumentFragment is also useful if you want to group several nodes in a list and insert them all together as children of some node. In these cases QDomDocumentFragment can be used as a temporary container for this list of children.</para>
                <para>The most important feature of QDomDocumentFragment is that it is treated in a special way by QDomNode::insertAfter(), QDomNode::insertBefore(), QDomNode::replaceChild() and QDomNode::appendChild(): instead of inserting the fragment itself, all the fragment's children are inserted.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomDocumentFragment.#ctor">
            <summary>
                <para>Constructs an empty document fragment.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocumentFragment.#ctor(QtXml.QDomDocumentFragment)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentFragment.nodeType">
            <summary>
                <para>Returns DocumentFragment.</para>
                <para>See also isDocumentFragment() and QDomNode::toDocumentFragment().</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomDocumentType">
            <summary>
            The QDomDocumentType class is the representation of the DTD in the document tree.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The QDomDocumentType class allows read-only access to some of the data structures in the DTD: it can return a map of all entities() and notations(). In addition the function name() returns the name of the document type as specified in the &amp;lt;!DOCTYPE name&amp;gt; tag. This class also provides the publicId(), systemId() and internalSubset() functions.</para>
                <para>
                </para>
                <para>See also QDomDocument.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomDocumentType.#ctor">
            <summary>
                <para>Creates an empty QDomDocumentType object.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomDocumentType.#ctor(QtXml.QDomDocumentType)">
            <summary>
                <para>Constructs a copy of n.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.Entities">
            <summary>
                <para>Returns a map of all entities described in the DTD.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.InternalSubset">
            <summary>
                <para>Returns the internal subset of the document type or an empty string if there is no internal subset.</para>
                <para>See also publicId() and systemId().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.Name">
            <summary>
                <para>Returns the name of the document type as specified in the &amp;lt;!DOCTYPE name&amp;gt; tag.</para>
                <para>See also nodeName().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.nodeType">
            <summary>
                <para>Returns DocumentTypeNode.</para>
                <para>See also isDocumentType() and QDomNode::toDocumentType().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.Notations">
            <summary>
                <para>Returns a map of all notations described in the DTD.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.PublicId">
            <summary>
                <para>Returns the public identifier of the external DTD subset or an empty string if there is no public identifier.</para>
                <para>See also systemId(), internalSubset(), and QDomImplementation::createDocumentType().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomDocumentType.SystemId">
            <summary>
                <para>Returns the system identifier of the external DTD subset or an empty string if there is no system identifier.</para>
                <para>See also publicId(), internalSubset(), and QDomImplementation::createDocumentType().</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomElement">
            <summary>
            The QDomElement class represents one element in the DOM tree.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Elements have a tagName() and zero or more attributes associated with them. The tag name can be changed with setTagName().</para>
                <para>Element attributes are represented by QDomAttr objects that can be queried using the attribute() and attributeNode() functions. You can set attributes with the setAttribute() and setAttributeNode() functions. Attributes can be removed with removeAttribute(). There are namespace-aware equivalents to these functions, i.e. setAttributeNS(), setAttributeNodeNS() and removeAttributeNS().</para>
                <para>If you want to access the text of a node use text(), e.g.</para>
                <para> QDomElement e = //...</para>
                <para> //...</para>
                <para> QString s = e.text()</para>
                <para>The text() function operates recursively to find the text (since not all elements contain text). If you want to find all the text in all of a node's children, iterate over the children looking for QDomText nodes, e.g.</para>
                <para> QString text;</para>
                <para> QDomElement element = doc.documentElement();</para>
                <para> for(QDomNode n = element.firstChild(); !n.isNull(); n = n.nextSibling())</para>
                <para> {</para>
                <para>     QDomText t = n.toText();</para>
                <para>     if (!t.isNull())</para>
                <para>         text += t.data();</para>
                <para> }</para>
                <para>Note that we attempt to convert each node to a text node and use text() rather than using firstChild().toText().data() or n.toText().data() directly on the node, because the node may not be a text element.</para>
                <para>You can get a list of all the decendents of an element which have a specified tag name with elementsByTagName() or elementsByTagNameNS().</para>
                <para>To browse the elements of a dom document use firstChildElement(), lastChildElement(), nextSiblingElement() and previousSiblingElement(). For example, to iterate over all child elements called "entry" in a root element called "database", you can use:</para>
                <para> QDomDocument doc = // ...</para>
                <para> QDomElement root = doc.firstChildElement("database");</para>
                <para> QDomElement elt = root.firstChildElement("entry");</para>
                <para> for (; !elt.isNull(); elt = elt.nextSiblingElement("entry")) {</para>
                <para>     // ...</para>
                <para> }</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomElement.#ctor">
            <summary>
                <para>Constructs an empty element. Use the QDomDocument::createElement() function to construct elements with content.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.#ctor(QtXml.QDomElement)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomElement.TagName">
            <summary>
                <para>Returns the tag name of this element. For an XML element like this:</para>
                <para> &lt;img src="myimg.png"&gt;</para>
                <para>the tagname would return "img".</para>
                <para>Sets this element's tag name to name.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomElement.Attributes">
            <summary>
                <para>Returns a QDomNamedNodeMap containing all this element's attributes.</para>
                <para>See also attribute(), setAttribute(), attributeNode(), and setAttributeNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomElement.nodeType">
            <summary>
                <para>Returns ElementNode.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomElement.Text">
            <summary>
                <para>Returns the element's text or an empty string.</para>
                <para>Example:</para>
                <para> &lt;h1&gt;Hello &lt;b&gt;Qt&lt;/b&gt; &lt;![CDATA[&lt;xml is cool&gt;]]&gt;&lt;/h1&gt;</para>
                <para>The function text() of the QDomElement for the &lt;h1&gt; tag, will return the following text:</para>
                <para> Hello Qt &lt;xml is cool&gt;</para>
                <para>Comments are ignored by this function. It only evaluates QDomText and QDomCDATASection objects.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.Attribute(System.String,System.String)">
            <summary>
                <para>Returns the attribute called name. If the attribute does not exist defValue is returned.</para>
                <para>See also setAttribute(), attributeNode(), setAttributeNode(), and attributeNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.AttributeNS(System.String,System.String,System.String)">
            <summary>
                <para>Returns the attribute with the local name localName and the namespace URI nsURI. If the attribute does not exist defValue is returned.</para>
                <para>See also setAttributeNS(), attributeNodeNS(), setAttributeNodeNS(), and attribute().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.AttributeNode(System.String)">
            <summary>
                <para>Returns the QDomAttr object that corresponds to the attribute called name. If no such attribute exists a null attribute is returned.</para>
                <para>See also setAttributeNode(), attribute(), setAttribute(), and attributeNodeNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.AttributeNodeNS(System.String,System.String)">
            <summary>
                <para>Returns the QDomAttr object that corresponds to the attribute with the local name localName and the namespace URI nsURI. If no such attribute exists a null attribute is returned.</para>
                <para>See also setAttributeNodeNS(), setAttributeNode(), attribute(), and setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.ElementsByTagName(System.String)">
            <summary>
                <para>Returns a QDomNodeList containing all descendants of this element named tagname encountered during a preorder traversal of the element subtree with this element as its root. The order of the elements in the returned list is the order they are encountered during the preorder traversal.</para>
                <para>See also elementsByTagNameNS() and QDomDocument::elementsByTagName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.ElementsByTagNameNS(System.String,System.String)">
            <summary>
                <para>Returns a QDomNodeList containing all descendants of this element with local name localName and namespace URI nsURI encountered during a preorder traversal of the element subtree with this element as its root. The order of the elements in the returned list is the order they are encountered during the preorder traversal.</para>
                <para>See also elementsByTagName() and QDomDocument::elementsByTagNameNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.HasAttribute(System.String)">
            <summary>
                <para>Returns true if this element has an attribute called name; otherwise returns false.</para>
                <para>Note: This function does not take the presence of namespaces into account. As a result, the specified name will be tested against fully-qualified attribute names that include any namespace prefixes that may be present.</para>
                <para>Use hasAttributeNS() to explicitly test for attributes with specific namespaces and names.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.HasAttributeNS(System.String,System.String)">
            <summary>
                <para>Returns true if this element has an attribute with the local name localName and the namespace URI nsURI; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.RemoveAttribute(System.String)">
            <summary>
                <para>Removes the attribute called name name from this element.</para>
                <para>See also setAttribute(), attribute(), and removeAttributeNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.RemoveAttributeNS(System.String,System.String)">
            <summary>
                <para>Removes the attribute with the local name localName and the namespace URI nsURI from this element.</para>
                <para>See also setAttributeNS(), attributeNS(), and removeAttribute().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.RemoveAttributeNode(QtXml.QDomAttr)">
            <summary>
                <para>Removes the attribute oldAttr from the element and returns it.</para>
                <para>See also attributeNode() and setAttributeNode().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.String)">
            <summary>
                <para>Adds an attribute called name with value value. If an attribute with the same name exists, its value is replaced by value.</para>
                <para>See also attribute(), setAttributeNode(), and setAttributeNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.Int64)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The number is formatted according to the current locale.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.UInt64)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The number is formatted according to the current locale.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.Int32)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The number is formatted according to the current locale.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.UInt32)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The number is formatted according to the current locale.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.Single)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The number is formatted according to the current locale.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttribute(System.String,System.Double)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The number is formatted according to the current locale.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNS(System.String,System.String,System.String)">
            <summary>
                <para>Adds an attribute with the qualified name qName and the namespace URI nsURI with the value value. If an attribute with the same local name and namespace URI exists, its prefix is replaced by the prefix of qName and its value is repaced by value.</para>
                <para>Although qName is the qualified name, the local name is used to decide if an existing attribute's value should be replaced.</para>
                <para>See also attributeNS(), setAttributeNodeNS(), and setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNS(System.String,System.String,System.Int32)">
            <summary>
                <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNS(System.String,System.String,System.UInt32)">
            <summary>
                <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNS(System.String,System.String,System.Int64)">
            <summary>
                <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNS(System.String,System.String,System.UInt64)">
            <summary>
                <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNS(System.String,System.String,System.Double)">
            <summary>
                <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNode(QtXml.QDomAttr)">
            <summary>
                <para>Adds the attribute newAttr to this element.</para>
                <para>If the element has another attribute that has the same name as newAttr, this function replaces that attribute and returns it; otherwise the function returns a null attribute.</para>
                <para>See also attributeNode(), setAttribute(), and setAttributeNodeNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomElement.SetAttributeNodeNS(QtXml.QDomAttr)">
            <summary>
                <para>Adds the attribute newAttr to this element.</para>
                <para>If the element has another attribute that has the same local name and namespace URI as newAttr, this function replaces that attribute and returns it; otherwise the function returns a null attribute.</para>
                <para>See also attributeNodeNS(), setAttributeNS(), and setAttributeNode().</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomEntity">
            <summary>
            The QDomEntity class represents an XML entity.
            </summary>
            <remarks>
                <para>
                </para>
                <para>This class represents an entity in an XML document, either parsed or unparsed. Note that this models the entity itself not the entity declaration.</para>
                <para>DOM does not support editing entity nodes; if a user wants to make changes to the contents of an entity, every related QDomEntityReference node must be replaced in the DOM tree by a clone of the entity's contents, and then the desired changes must be made to each of the clones instead. All the descendants of an entity node are read-only.</para>
                <para>An entity node does not have any parent.</para>
                <para>You can access the entity's publicId(), systemId() and notationName() when available.</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomEntity.#ctor">
            <summary>
                <para>Constructs an empty entity.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomEntity.#ctor(QtXml.QDomEntity)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomEntity.nodeType">
            <summary>
                <para>Returns EntityNode.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomEntity.NotationName">
            <summary>
                <para>For unparsed entities this function returns the name of the notation for the entity. For parsed entities this function returns an empty string.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomEntity.PublicId">
            <summary>
                <para>Returns the public identifier associated with this entity. If the public identifier was not specified an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomEntity.SystemId">
            <summary>
                <para>Returns the system identifier associated with this entity. If the system identifier was not specified an empty string is returned.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomEntityReference">
            <summary>
            The QDomEntityReference class represents an XML entity reference.
            </summary>
            <remarks>
                <para>
                </para>
                <para>A QDomEntityReference object may be inserted into the DOM tree when an entity reference is in the source document, or when the user wishes to insert an entity reference.</para>
                <para>Note that character references and references to predefined entities are expanded by the XML processor so that characters are represented by their Unicode equivalent rather than by an entity reference.</para>
                <para>Moreover, the XML processor may completely expand references to entities while building the DOM tree, instead of providing QDomEntityReference objects.</para>
                <para>If it does provide such objects, then for a given entity reference node, it may be that there is no entity node representing the referenced entity; but if such an entity exists, then the child list of the entity reference node is the same as that of the entity node. As with the entity node, all descendants of the entity reference are read-only.</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomEntityReference.#ctor">
            <summary>
                <para>Constructs an empty entity reference. Use QDomDocument::createEntityReference() to create a entity reference with content.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomEntityReference.#ctor(QtXml.QDomEntityReference)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomEntityReference.nodeType">
            <summary>
                <para>Returns EntityReference.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomImplementation">
            <summary>
            The QDomImplementation class provides information about the features of the DOM implementation.
            </summary>
            <remarks>
                <para>
                </para>
                <para>This class describes the features that are supported by the DOM implementation. Currently the XML subset of DOM Level 1 and DOM Level 2 Core are supported.</para>
                <para>Normally you will use the function QDomDocument::implementation() to get the implementation object.</para>
                <para>You can create a new document type with createDocumentType() and a new document with createDocument().</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
                <para>The QDom classes have a few issues of nonconformance with the XML specifications that cannot be fixed in Qt 4 without breaking backward compatibility. The QtXmlPatterns module and the QXmlStreamReader and QXmlStreamWriter classes have a higher degree of a conformance.</para>
                <para>
                </para>
                <para>See also hasFeature().</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomImplementation.#ctor">
            <summary>
                <para>Constructs a QDomImplementation object.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.#ctor(QtXml.QDomImplementation)">
            <summary>
                <para>Constructs a copy of x.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomImplementation.InvalidDataPolicy">
            <summary>
                <para>This enum specifies what should be done when a factory function in QDomDocument is called with invalid data.</para>
                <para>See also setInvalidDataPolicy() and invalidDataPolicy().</para>
            </summary>
        </member>
        <member name="F:QtXml.QDomImplementation.InvalidDataPolicy.AcceptInvalidChars">
            <summary>
                <para>The data should be stored in the DOM object anyway. In this case the resulting XML document might not be well-formed. This is the default value and QDom's behavior in Qt &lt; 4.1.</para>
            </summary>
        </member>
        <member name="F:QtXml.QDomImplementation.InvalidDataPolicy.DropInvalidChars">
            <summary>
                <para>The invalid characters should be removed from the data.</para>
            </summary>
        </member>
        <member name="F:QtXml.QDomImplementation.InvalidDataPolicy.ReturnNullNode">
            <summary>
                <para>The factory function should return a null node.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomImplementation.invalidDataPolicy">
            <summary>
                <para>Returns the invalid data policy, which specifies what should be done when a factory function in QDomDocument is passed invalid data.</para>
                <para>Warning: This function is not reentrant.</para>
                <para>This function was introduced in Qt 4.1.</para>
                <para>Sets the invalid data policy, which specifies what should be done when a factory function in QDomDocument is passed invalid data.</para>
                <para>The policy is set for all instances of QDomDocument which already exist and which will be created in the future.</para>
                <para> QDomDocument doc;</para>
                <para> QDomImplementation impl;</para>
                <para>
                </para>
                <para> // This will create the element, but the resulting XML document will</para>
                <para> // be invalid, because '~' is not a valid character in a tag name.</para>
                <para> impl.setInvalidDataPolicy(QDomImplementation::AcceptInvalidData);</para>
                <para> QDomElement elt1 = doc.createElement("foo~bar");</para>
                <para>
                </para>
                <para> // This will create an element with the tag name "foobar".</para>
                <para> impl.setInvalidDataPolicy(QDomImplementation::DropInvalidData);</para>
                <para> QDomElement elt2 = doc.createElement("foo~bar");</para>
                <para>
                </para>
                <para> // This will create a null element.</para>
                <para> impl.setInvalidDataPolicy(QDomImplementation::ReturnNullNode);</para>
                <para> QDomElement elt3 = doc.createElement("foo~bar");</para>
                <para>Warning: This function is not reentrant.</para>
                <para>This function was introduced in Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomImplementation.IsNull">
            <summary>
                <para>Returns false if the object was created by QDomDocument::implementation(); otherwise returns true.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.CreateDocument(System.String,System.String,QtXml.QDomDocumentType)">
            <summary>
                <para>Creates a DOM document with the document type doctype. This function also adds a root element node with the qualified name qName and the namespace URI nsURI.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.CreateDocumentType(System.String,System.String,System.String)">
            <summary>
                <para>Creates a document type node for the name qName.</para>
                <para>publicId specifies the public identifier of the external subset. If you specify an empty string (QString()) as the publicId, this means that the document type has no public identifier.</para>
                <para>systemId specifies the system identifier of the external subset. If you specify an empty string as the systemId, this means that the document type has no system identifier.</para>
                <para>Since you cannot have a public identifier without a system identifier, the public identifier is set to an empty string if there is no system identifier.</para>
                <para>DOM level 2 does not support any other document type declaration features.</para>
                <para>The only way you can use a document type that was created this way, is in combination with the createDocument() function to create a QDomDocument with this document type.</para>
                <para>In the DOM specification, this is the only way to create a non-null document. For historical reasons, Qt also allows to create the document using the default empty constructor. The resulting document is null, but becomes non-null when a factory function, for example QDomDocument::createElement(), is called. The document also becomes non-null when setContent() is called.</para>
                <para>See also createDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.HasFeature(System.String,System.String)">
            <summary>
                <para>The function returns true if QDom implements the requested version of a feature; otherwise returns false.</para>
                <para>The currently supported features and their versions:</para>
                <para>
                </para>
                <para>FeatureVersion</para>
                <para>XML	1.0</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.Finalize">
            <summary>
                <para>Destroys the object and frees its resources.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.op_Inequality(QtXml.QDomImplementation,QtXml.QDomImplementation)">
            <summary>
                <para>Returns true if x and this DOM implementation object were created from different QDomDocuments; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomImplementation.op_Equality(QtXml.QDomImplementation,QtXml.QDomImplementation)">
            <summary>
                <para>Returns true if x and this DOM implementation object were created from the same QDomDocument; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomNamedNodeMap">
            <summary>
            The QDomNamedNodeMap class contains a collection of nodes that can be accessed by name.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Note that QDomNamedNodeMap does not inherit from QDomNodeList. QDomNamedNodeMaps do not provide any specific node ordering. Although nodes in a QDomNamedNodeMap may be accessed by an ordinal index, this is simply to allow a convenient enumeration of the contents of a QDomNamedNodeMap, and does not imply that the DOM specifies an ordering of the nodes.</para>
                <para>The QDomNamedNodeMap is used in three places:</para>
                <para>
                </para>
                <para>QDomDocumentType::entities() returns a map of all entities described in the DTD.</para>
                <para>QDomDocumentType::notations() returns a map of all notations described in the DTD.</para>
                <para>QDomNode::attributes() returns a map of all attributes of an element.</para>
                <para>
                </para>
                <para>Items in the map are identified by the name which QDomNode::name() returns. Nodes are retrieved using namedItem(), namedItemNS() or item(). New nodes are inserted with setNamedItem() or setNamedItemNS() and removed with removeNamedItem() or removeNamedItemNS(). Use contains() to see if an item with the given name is in the named node map. The number of items is returned by length().</para>
                <para>Terminology: in this class we use "item" and "node" interchangeably.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.#ctor">
            <summary>
                <para>Constructs an empty named node map.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.#ctor(QtXml.QDomNamedNodeMap)">
            <summary>
                <para>Constructs a copy of n.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNamedNodeMap.Count">
            <summary>
                <para>This function is provided for Qt API consistency. It is equivalent to length().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNamedNodeMap.IsEmpty">
            <summary>
                <para>Returns true if the map is empty; otherwise returns false. This function is provided for Qt API consistency.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNamedNodeMap.Length">
            <summary>
                <para>Returns the number of nodes in the map.</para>
                <para>See also item().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNamedNodeMap.Size">
            <summary>
                <para>This function is provided for Qt API consistency. It is equivalent to length().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.Contains(System.String)">
            <summary>
                <para>Returns true if the map contains a node called name; otherwise returns false.</para>
                <para>Note: This function does not take the presence of namespaces into account. Use namedItemNS() to test whether the map contains a node with a specific namespace URI and name.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.Item(System.Int32)">
            <summary>
                <para>Retrieves the node at position index.</para>
                <para>This can be used to iterate over the map. Note that the nodes in the map are ordered arbitrarily.</para>
                <para>See also length().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.NamedItem(System.String)">
            <summary>
                <para>Returns the node called name.</para>
                <para>If the named node map does not contain such a node, a null node is returned. A node's name is the name returned by QDomNode::nodeName().</para>
                <para>See also setNamedItem() and namedItemNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.NamedItemNS(System.String,System.String)">
            <summary>
                <para>Returns the node associated with the local name localName and the namespace URI nsURI.</para>
                <para>If the map does not contain such a node, a null node is returned.</para>
                <para>See also setNamedItemNS() and namedItem().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.RemoveNamedItem(System.String)">
            <summary>
                <para>Removes the node called name from the map.</para>
                <para>The function returns the removed node or a null node if the map did not contain a node called name.</para>
                <para>See also setNamedItem(), namedItem(), and removeNamedItemNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.RemoveNamedItemNS(System.String,System.String)">
            <summary>
                <para>Removes the node with the local name localName and the namespace URI nsURI from the map.</para>
                <para>The function returns the removed node or a null node if the map did not contain a node with the local name localName and the namespace URI nsURI.</para>
                <para>See also setNamedItemNS(), namedItemNS(), and removeNamedItem().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.SetNamedItem(QtXml.QDomNode)">
            <summary>
                <para>Inserts the node newNode into the named node map. The name used by the map is the node name of newNode as returned by QDomNode::nodeName().</para>
                <para>If the new node replaces an existing node, i.e. the map contains a node with the same name, the replaced node is returned.</para>
                <para>See also namedItem(), removeNamedItem(), and setNamedItemNS().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.SetNamedItemNS(QtXml.QDomNode)">
            <summary>
                <para>Inserts the node newNode in the map. If a node with the same namespace URI and the same local name already exists in the map, it is replaced by newNode. If the new node replaces an existing node, the replaced node is returned.</para>
                <para>See also namedItemNS(), removeNamedItemNS(), and setNamedItem().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.Finalize">
            <summary>
                <para>Destroys the object and frees its resources.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.op_Inequality(QtXml.QDomNamedNodeMap,QtXml.QDomNamedNodeMap)">
            <summary>
                <para>Returns true if n and this named node map are not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNamedNodeMap.op_Equality(QtXml.QDomNamedNodeMap,QtXml.QDomNamedNodeMap)">
            <summary>
                <para>Returns true if n and this named node map are equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomNode">
            <summary>
            The QDomNode class is the base class for all the nodes in a DOM tree.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Many functions in the DOM return a QDomNode.</para>
                <para>You can find out the type of a node using isAttr(), isCDATASection(), isDocumentFragment(), isDocument(), isDocumentType(), isElement(), isEntityReference(), isText(), isEntity(), isNotation(), isProcessingInstruction(), isCharacterData() and isComment().</para>
                <para>A QDomNode can be converted into one of its subclasses using toAttr(), toCDATASection(), toDocumentFragment(), toDocument(), toDocumentType(), toElement(), toEntityReference(), toText(), toEntity(), toNotation(), toProcessingInstruction(), toCharacterData() or toComment(). You can convert a node to a null node with clear().</para>
                <para>Copies of the QDomNode class share their data using explicit sharing. This means that modifying one node will change all copies. This is especially useful in combination with functions which return a QDomNode, e.g. firstChild(). You can make an independent (deep) copy of the node with cloneNode().</para>
                <para>A QDomNode can be null, much like a null pointer. Creating a copy of a null node results in another null node. It is not possible to modify a null node, but it is possible to assign another, possibly non-null node to it. In this case, the copy of the null node will remain null. You can check if a QDomNode is null by calling isNull(). The empty constructor of a QDomNode (or any of the derived classes) creates a null node.</para>
                <para>Nodes are inserted with insertBefore(), insertAfter() or appendChild(). You can replace one node with another using replaceChild() and remove a node with removeChild().</para>
                <para>To traverse nodes use firstChild() to get a node's first child (if any), and nextSibling() to traverse. QDomNode also provides lastChild(), previousSibling() and parentNode(). To find the first child node with a particular node name use namedItem().</para>
                <para>To find out if a node has children use hasChildNodes() and to get a list of all of a node's children use childNodes().</para>
                <para>The node's name and value (the meaning of which varies depending on its type) is returned by nodeName() and nodeValue() respectively. The node's type is returned by nodeType(). The node's value can be set with setNodeValue().</para>
                <para>The document to which the node belongs is returned by ownerDocument().</para>
                <para>Adjacent QDomText nodes can be merged into a single node with normalize().</para>
                <para>QDomElement nodes have attributes which can be retrieved with attributes().</para>
                <para>QDomElement and QDomAttr nodes can have namespaces which can be retrieved with namespaceURI(). Their local name is retrieved with localName(), and their prefix with prefix(). The prefix can be set with setPrefix().</para>
                <para>You can write the XML representation of the node to a text stream with save().</para>
                <para>The following example looks for the first element in an XML document and prints the names of all the elements that are its direct children.</para>
                <para> QDomDocument d;</para>
                <para> d.setContent(someXML);</para>
                <para> QDomNode n = d.firstChild();</para>
                <para> while (!n.isNull()) {</para>
                <para>     if (n.isElement()) {</para>
                <para>         QDomElement e = n.toElement();</para>
                <para>         cout &lt;&lt; "Element name: " &lt;&lt; e.tagName() &lt;&lt; endl;</para>
                <para>         break;</para>
                <para>     }</para>
                <para>     n = n.nextSibling();</para>
                <para> }</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomNode.#ctor">
            <summary>
                <para>Constructs a null node.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.#ctor(QtXml.QDomNode)">
            <summary>
                <para>Constructs a copy of n.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomNode.EncodingPolicy">
            <summary>
                <para>This enum specifies how QDomNode::save() determines what encoding to use when serializing.</para>
                <para>See also the overload of the save() function that takes an EncodingPolicy.</para>
                <para>This enum was introduced or modified in Qt 4.3.</para>
            </summary>
        </member>
        <member name="F:QtXml.QDomNode.EncodingPolicy.EncodingFromDocument">
            <summary>
                <para>The encoding is fetched from the document.</para>
            </summary>
        </member>
        <member name="F:QtXml.QDomNode.EncodingPolicy.EncodingFromTextStream">
            <summary>
                <para>The encoding is fetched from the QTextStream.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomNode.NodeType">
            <summary>
                <para>This enum defines the type of the node:</para>
            </summary>
        </member>
        <member name="F:QtXml.QDomNode.NodeType.BaseNode">
            <summary>
                <para>A QDomNode object, i.e. not a QDomNode subclass.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.NodeValue">
            <summary>
                <para>Returns the value of the node.</para>
                <para>The meaning of the value depends on the subclass:</para>
                <para>
                </para>
                <para>NameMeaning</para>
                <para>QDomAttr	The attribute value</para>
                <para>QDomCDATASection	The content of the CDATA section</para>
                <para>QDomComment	The comment</para>
                <para>QDomProcessingInstruction	The data of the processing instruction</para>
                <para>QDomText	The text</para>
                <para>
                </para>
                <para>All the other subclasses do not have a node value and will return an empty string.</para>
                <para>Sets the node's value to v.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.Prefix">
            <summary>
                <para>Returns the namespace prefix of the node or an empty string if the node has no namespace prefix.</para>
                <para>Only nodes of type ElementNode or AttributeNode can have namespaces. A namespace prefix must be specified at creation time. If a node was created with a namespace prefix, you can change it later with setPrefix().</para>
                <para>If you create an element or attribute with QDomDocument::createElement() or QDomDocument::createAttribute(), the prefix will be an empty string. If you use QDomDocument::createElementNS() or QDomDocument::createAttributeNS() instead, the prefix will not be an empty string; but it might be an empty string if the name does not have a prefix.</para>
                <para>QDomDocument::createElementNS() QDomDocument::createAttributeNS()</para>
                <para>If the node has a namespace prefix, this function changes the namespace prefix of the node to pre. Otherwise this function does nothing.</para>
                <para>Only nodes of type ElementNode or AttributeNode can have namespaces. A namespace prefix must have be specified at creation time; it is not possible to add a namespace prefix afterwards.</para>
                <para>QDomDocument::createElementNS() QDomDocument::createAttributeNS()</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.Attributes">
            <summary>
                <para>Returns a named node map of all attributes. Attributes are only provided for QDomElements.</para>
                <para>Changing the attributes in the map will also change the attributes of this QDomNode.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.ChildNodes">
            <summary>
                <para>Returns a list of all direct child nodes.</para>
                <para>Most often you will call this function on a QDomElement object.</para>
                <para>For example, if the XML document looks like this:</para>
                <para> &lt;body&gt;</para>
                <para> &lt;h1&gt;Heading&lt;/h1&gt;</para>
                <para> &lt;p&gt;Hello &lt;b&gt;you&lt;/b&gt;&lt;/p&gt;</para>
                <para> &lt;/body&gt;</para>
                <para>Then the list of child nodes for the "body"-element will contain the node created by the &amp;lt;h1&amp;gt; tag and the node created by the &amp;lt;p&amp;gt; tag.</para>
                <para>The nodes in the list are not copied; so changing the nodes in the list will also change the children of this node.</para>
                <para>See also firstChild() and lastChild().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.ColumnNumber">
            <summary>
                <para>For nodes created by QDomDocument::setContent(), this function returns the column number in the XML document where the node was parsed. Otherwise, -1 is returned.</para>
                <para>This function was introduced in Qt 4.1.</para>
                <para>See also lineNumber() and QDomDocument::setContent().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.FirstChild">
            <summary>
                <para>Returns the first child of the node. If there is no child node, a null node is returned. Changing the returned node will also change the node in the document tree.</para>
                <para>See also lastChild() and childNodes().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.HasAttributes">
            <summary>
                <para>Returns true if the node has attributes; otherwise returns false.</para>
                <para>See also attributes().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.HasChildNodes">
            <summary>
                <para>Returns true if the node has one or more children; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsAttr">
            <summary>
                <para>Returns true if the node is an attribute; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomAttribute; you can get the QDomAttribute with toAttribute().</para>
                <para>See also toAttr().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsCDATASection">
            <summary>
                <para>Returns true if the node is a CDATA section; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomCDATASection; you can get the QDomCDATASection with toCDATASection().</para>
                <para>See also toCDATASection().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsCharacterData">
            <summary>
                <para>Returns true if the node is a character data node; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomCharacterData; you can get the QDomCharacterData with toCharacterData().</para>
                <para>See also toCharacterData().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsComment">
            <summary>
                <para>Returns true if the node is a comment; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomComment; you can get the QDomComment with toComment().</para>
                <para>See also toComment().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsDocument">
            <summary>
                <para>Returns true if the node is a document; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomDocument; you can get the QDomDocument with toDocument().</para>
                <para>See also toDocument().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsDocumentFragment">
            <summary>
                <para>Returns true if the node is a document fragment; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomDocumentFragment; you can get the QDomDocumentFragment with toDocumentFragment().</para>
                <para>See also toDocumentFragment().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsDocumentType">
            <summary>
                <para>Returns true if the node is a document type; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomDocumentType; you can get the QDomDocumentType with toDocumentType().</para>
                <para>See also toDocumentType().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsElement">
            <summary>
                <para>Returns true if the node is an element; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomElement; you can get the QDomElement with toElement().</para>
                <para>See also toElement().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsEntity">
            <summary>
                <para>Returns true if the node is an entity; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomEntity; you can get the QDomEntity with toEntity().</para>
                <para>See also toEntity().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsEntityReference">
            <summary>
                <para>Returns true if the node is an entity reference; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomEntityReference; you can get the QDomEntityReference with toEntityReference().</para>
                <para>See also toEntityReference().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsNotation">
            <summary>
                <para>Returns true if the node is a notation; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomNotation; you can get the QDomNotation with toNotation().</para>
                <para>See also toNotation().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsNull">
            <summary>
                <para>Returns true if this node is null (i.e. if it has no type or contents); otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsProcessingInstruction">
            <summary>
                <para>Returns true if the node is a processing instruction; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomProcessingInstruction; you can get the QProcessingInstruction with toProcessingInstruction().</para>
                <para>See also toProcessingInstruction().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.IsText">
            <summary>
                <para>Returns true if the node is a text node; otherwise returns false.</para>
                <para>If this function returns true, it does not imply that this object is a QDomText; you can get the QDomText with toText().</para>
                <para>See also toText().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.LastChild">
            <summary>
                <para>Returns the last child of the node. If there is no child node, a null node is returned. Changing the returned node will also change the node in the document tree.</para>
                <para>See also firstChild() and childNodes().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.LineNumber">
            <summary>
                <para>For nodes created by QDomDocument::setContent(), this function returns the line number in the XML document where the node was parsed. Otherwise, -1 is returned.</para>
                <para>This function was introduced in Qt 4.1.</para>
                <para>See also columnNumber() and QDomDocument::setContent().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.LocalName">
            <summary>
                <para>If the node uses namespaces, this function returns the local name of the node; otherwise it returns an empty string.</para>
                <para>Only nodes of type ElementNode or AttributeNode can have namespaces. A namespace must have been specified at creation time; it is not possible to add a namespace afterwards.</para>
                <para>QDomDocument::createAttributeNS()</para>
                <para>See also prefix(), namespaceURI(), and QDomDocument::createElementNS().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.NamespaceURI">
            <summary>
                <para>Returns the namespace URI of this node or an empty string if the node has no namespace URI.</para>
                <para>Only nodes of type ElementNode or AttributeNode can have namespaces. A namespace URI must be specified at creation time and cannot be changed later.</para>
                <para>QDomDocument::createAttributeNS()</para>
                <para>See also prefix(), localName(), and QDomDocument::createElementNS().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.NextSibling">
            <summary>
                <para>Returns the next sibling in the document tree. Changing the returned node will also change the node in the document tree.</para>
                <para>If you have XML like this:</para>
                <para> &lt;h1&gt;Heading&lt;/h1&gt;</para>
                <para> &lt;p&gt;The text...&lt;/p&gt;</para>
                <para> &lt;h2&gt;Next heading&lt;/h2&gt;</para>
                <para>and this QDomNode represents the &lt;p&gt; tag, nextSibling() will return the node representing the &lt;h2&gt; tag.</para>
                <para>See also previousSibling().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.NodeName">
            <summary>
                <para>Returns the name of the node.</para>
                <para>The meaning of the name depends on the subclass:</para>
                <para>
                </para>
                <para>NameMeaning</para>
                <para>QDomAttr	The name of the attribute</para>
                <para>QDomCDATASection	The string "#cdata-section"</para>
                <para>QDomComment	The string "#comment"</para>
                <para>QDomDocument	The string "#document"</para>
                <para>QDomDocumentFragment	The string "#document-fragment"</para>
                <para>QDomDocumentType	The name of the document type</para>
                <para>QDomElement	The tag name</para>
                <para>QDomEntity	The name of the entity</para>
                <para>QDomEntityReference	The name of the referenced entity</para>
                <para>QDomNotation	The name of the notation</para>
                <para>QDomProcessingInstruction	The target of the processing instruction</para>
                <para>QDomText	The string "#text"</para>
                <para>
                </para>
                <para>Note: This function does not take the presence of namespaces into account when processing the names of element and attribute nodes. As a result, the returned name can contain any namespace prefix that may be present. To obtain the node name of an element or attribute, use localName(); to obtain the namespace prefix, use namespaceURI().</para>
                <para>See also nodeValue().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.nodeType">
            <summary>
                <para>Returns the type of the node.</para>
                <para>See also toAttr(), toCDATASection(), toDocumentFragment(), toDocument(), toDocumentType(), toElement(), toEntityReference(), toText(), toEntity(), toNotation(), toProcessingInstruction(), toCharacterData(), and toComment().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.OwnerDocument">
            <summary>
                <para>Returns the document to which this node belongs.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.ParentNode">
            <summary>
                <para>Returns the parent node. If this node has no parent, a null node is returned (i.e. a node for which isNull() returns true).</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNode.PreviousSibling">
            <summary>
                <para>Returns the previous sibling in the document tree. Changing the returned node will also change the node in the document tree.</para>
                <para>For example, if you have XML like this:</para>
                <para> &lt;h1&gt;Heading&lt;/h1&gt;</para>
                <para> &lt;p&gt;The text...&lt;/p&gt;</para>
                <para> &lt;h2&gt;Next heading&lt;/h2&gt;</para>
                <para>and this QDomNode represents the &amp;lt;p&amp;gt; tag, previousSibling() will return the node representing the &amp;lt;h1&amp;gt; tag.</para>
                <para>See also nextSibling().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.AppendChild(QtXml.QDomNode)">
            <summary>
                <para>Appends newChild as the node's last child.</para>
                <para>If newChild is the child of another node, it is reparented to this node. If newChild is a child of this node, then its position in the list of children is changed.</para>
                <para>If newChild is a QDomDocumentFragment, then the children of the fragment are removed from the fragment and appended.</para>
                <para>If newChild is a QDomElement and this node is a QDomDocument that already has an element node as a child, newChild is not added as a child and a null node is returned.</para>
                <para>Returns a new reference to newChild on success or a null node on failure.</para>
                <para>Calling this function on a null node(created, for example, with the default constructor) does nothing and returns a null node.</para>
                <para>The DOM specification disallow inserting attribute nodes, but for historical reasons, QDom accepts them anyway.</para>
                <para>See also insertBefore(), insertAfter(), replaceChild(), and removeChild().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.Clear">
            <summary>
                <para>Converts the node into a null node; if it was not a null node before, its type and contents are deleted.</para>
                <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.CloneNode(System.Boolean)">
            <summary>
                <para>Creates a deep (not shallow) copy of the QDomNode.</para>
                <para>If deep is true, then the cloning is done recursively which means that all the node's children are deep copied too. If deep is false only the node itself is copied and the copy will have no child nodes.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.FirstChildElement(System.String)">
            <summary>
                <para>Returns the first child element with tag name tagName if tagName is non-empty; otherwise returns the first child element. Returns a null element if no such child exists.</para>
                <para>See also lastChildElement(), previousSiblingElement(), and nextSiblingElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.InsertAfter(QtXml.QDomNode,QtXml.QDomNode)">
            <summary>
                <para>Inserts the node newChild after the child node refChild. refChild must be a direct child of this node. If refChild is null then newChild is appended as this node's last child.</para>
                <para>If newChild is the child of another node, it is reparented to this node. If newChild is a child of this node, then its position in the list of children is changed.</para>
                <para>If newChild is a QDomDocumentFragment, then the children of the fragment are removed from the fragment and inserted after refChild.</para>
                <para>Returns a new reference to newChild on success or a null node on failure.</para>
                <para>The DOM specification disallow inserting attribute nodes, but due to historical reasons QDom accept them nevertheless.</para>
                <para>See also insertBefore(), replaceChild(), removeChild(), and appendChild().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.InsertBefore(QtXml.QDomNode,QtXml.QDomNode)">
            <summary>
                <para>Inserts the node newChild before the child node refChild. refChild must be a direct child of this node. If refChild is null then newChild is inserted as the node's first child.</para>
                <para>If newChild is the child of another node, it is reparented to this node. If newChild is a child of this node, then its position in the list of children is changed.</para>
                <para>If newChild is a QDomDocumentFragment, then the children of the fragment are removed from the fragment and inserted before refChild.</para>
                <para>Returns a new reference to newChild on success or a null node on failure.</para>
                <para>The DOM specification disallow inserting attribute nodes, but due to historical reasons QDom accept them nevertheless.</para>
                <para>See also insertAfter(), replaceChild(), removeChild(), and appendChild().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.IsSupported(System.String,System.String)">
            <summary>
                <para>Returns true if the DOM implementation implements the feature feature and this feature is supported by this node in the version version; otherwise returns false.</para>
                <para>See also QDomImplementation::hasFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.LastChildElement(System.String)">
            <summary>
                <para>Returns the last child element with tag name tagName if tagName is non-empty; otherwise returns the last child element. Returns a null element if no such child exists.</para>
                <para>See also firstChildElement(), previousSiblingElement(), and nextSiblingElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.NamedItem(System.String)">
            <summary>
                <para>Returns the first direct child node for which nodeName() equals name.</para>
                <para>If no such direct child exists, a null node is returned.</para>
                <para>See also nodeName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.NextSiblingElement(System.String)">
            <summary>
                <para>Returns the next sibling element with tag name tagName if tagName is non-empty; otherwise returns any next sibling element. Returns a null element if no such sibling exists.</para>
                <para>See also firstChildElement(), previousSiblingElement(), and lastChildElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.Normalize">
            <summary>
                <para>Calling normalize() on an element converts all its children into a standard form. This means that adjacent QDomText objects will be merged into a single text object (QDomCDATASection nodes are not merged).</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.PreviousSiblingElement(System.String)">
            <summary>
                <para>Returns the previous sibilng element with tag name tagName if tagName is non-empty; otherwise returns any previous sibling element. Returns a null element if no such sibling exists.</para>
                <para>See also firstChildElement(), nextSiblingElement(), and lastChildElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.RemoveChild(QtXml.QDomNode)">
            <summary>
                <para>Removes oldChild from the list of children. oldChild must be a direct child of this node.</para>
                <para>Returns a new reference to oldChild on success or a null node on failure.</para>
                <para>See also insertBefore(), insertAfter(), replaceChild(), and appendChild().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ReplaceChild(QtXml.QDomNode,QtXml.QDomNode)">
            <summary>
                <para>Replaces oldChild with newChild. oldChild must be a direct child of this node.</para>
                <para>If newChild is the child of another node, it is reparented to this node. If newChild is a child of this node, then its position in the list of children is changed.</para>
                <para>If newChild is a QDomDocumentFragment, then oldChild is replaced by all of the children of the fragment.</para>
                <para>Returns a new reference to oldChild on success or a null node an failure.</para>
                <para>See also insertBefore(), insertAfter(), removeChild(), and appendChild().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.Save(QtCore.QTextStream,System.Int32)">
            <summary>
                <para>Writes the XML representation of the node and all its children to the stream str. This function uses indent as the amount of space to indent the node.</para>
                <para>If this node is a document node, the encoding of text stream str's encoding is set by treating a processing instruction by name "xml" as an XML declaration, if such a one exists, and otherwise defaults to UTF-8. XML declarations are not processing instructions, but this behavior exists for historical reasons. If this node is not a document node, the text stream's encoding is used.</para>
                <para>If the document contains invalid XML characters or characters that cannot be encoded in the given encoding, the result and behavior is undefined.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.Save(QtCore.QTextStream,System.Int32,QtXml.QDomNode.EncodingPolicy)">
            <summary>
                <para>If encodingPolicy is QDomNode::EncodingFromDocument, this function behaves as save(QTextStream &amp;str, int indent).</para>
                <para>If encodingPolicy is EncodingFromTextStream and this node is a document node, this function behaves as save(QTextStream &amp;str, int indent) with the exception that the encoding specified in the text stream str is used.</para>
                <para>If the document contains invalid XML characters or characters that cannot be encoded in the given encoding, the result and behavior is undefined.</para>
                <para>This function was introduced in Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToAttr">
            <summary>
                <para>Converts a QDomNode into a QDomAttr. If the node is not an attribute, the returned object will be null.</para>
                <para>See also isAttr().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToCDATASection">
            <summary>
                <para>Converts a QDomNode into a QDomCDATASection. If the node is not a CDATA section, the returned object will be null.</para>
                <para>See also isCDATASection().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToCharacterData">
            <summary>
                <para>Converts a QDomNode into a QDomCharacterData. If the node is not a character data node the returned object will be null.</para>
                <para>See also isCharacterData().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToComment">
            <summary>
                <para>Converts a QDomNode into a QDomComment. If the node is not a comment the returned object will be null.</para>
                <para>See also isComment().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToDocument">
            <summary>
                <para>Converts a QDomNode into a QDomDocument. If the node is not a document the returned object will be null.</para>
                <para>See also isDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToDocumentFragment">
            <summary>
                <para>Converts a QDomNode into a QDomDocumentFragment. If the node is not a document fragment the returned object will be null.</para>
                <para>See also isDocumentFragment().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToDocumentType">
            <summary>
                <para>Converts a QDomNode into a QDomDocumentType. If the node is not a document type the returned object will be null.</para>
                <para>See also isDocumentType().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToElement">
            <summary>
                <para>Converts a QDomNode into a QDomElement. If the node is not an element the returned object will be null.</para>
                <para>See also isElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToEntity">
            <summary>
                <para>Converts a QDomNode into a QDomEntity. If the node is not an entity the returned object will be null.</para>
                <para>See also isEntity().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToEntityReference">
            <summary>
                <para>Converts a QDomNode into a QDomEntityReference. If the node is not an entity reference, the returned object will be null.</para>
                <para>See also isEntityReference().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToNotation">
            <summary>
                <para>Converts a QDomNode into a QDomNotation. If the node is not a notation the returned object will be null.</para>
                <para>See also isNotation().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToProcessingInstruction">
            <summary>
                <para>Converts a QDomNode into a QDomProcessingInstruction. If the node is not a processing instruction the returned object will be null.</para>
                <para>See also isProcessingInstruction().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.ToText">
            <summary>
                <para>Converts a QDomNode into a QDomText. If the node is not a text, the returned object will be null.</para>
                <para>See also isText().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.Finalize">
            <summary>
                <para>Destroys the object and frees its resources.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.op_Inequality(QtXml.QDomNode,QtXml.QDomNode)">
            <summary>
                <para>Returns true if n and this DOM node are not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNode.op_Equality(QtXml.QDomNode,QtXml.QDomNode)">
            <summary>
                <para>Returns true if n and this DOM node are equal; otherwise returns false.</para>
                <para>Any instance of QDomNode acts as a reference to an underlying data structure in QDomDocument. The test for equality checks if the two references point to the same underlying node. For example:</para>
                <para> QDomDocument document;</para>
                <para> QDomElement element1 = document.documentElement();</para>
                <para> QDomElement element2 = element1;</para>
                <para>The two nodes (QDomElement is a QDomNode subclass) both refer to the document's root element, and element1 == element2 will return true. On the other hand:</para>
                <para> QDomElement element3 = document.createElement("MyElement");</para>
                <para> QDomElement element4 = document.createElement("MyElement");</para>
                <para>Even though both nodes are empty elements carrying the same name, element3 == element4 will return false because they refer to two different nodes in the underlying data structure.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomNodeList">
            <summary>
            The QDomNodeList class is a list of QDomNode objects.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Lists can be obtained by QDomDocument::elementsByTagName() and QDomNode::childNodes(). The Document Object Model (DOM) requires these lists to be "live": whenever you change the underlying document, the contents of the list will get updated.</para>
                <para>You can get a particular node from the list with item(). The number of items in the list is returned by length().</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
                <para>
                </para>
                <para>See also QDomNode::childNodes() and QDomDocument::elementsByTagName().</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomNodeList.#ctor">
            <summary>
                <para>Creates an empty node list.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNodeList.#ctor(QtXml.QDomNodeList)">
            <summary>
                <para>Constructs a copy of n.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNodeList.Count">
            <summary>
                <para>This function is provided for Qt API consistency. It is equivalent to length().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNodeList.IsEmpty">
            <summary>
                <para>Returns true if the list contains no items; otherwise returns false. This function is provided for Qt API consistency.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNodeList.Length">
            <summary>
                <para>Returns the number of nodes in the list.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNodeList.Size">
            <summary>
                <para>This function is provided for Qt API consistency. It is equivalent to length().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNodeList.At(System.Int32)">
            <summary>
                <para>This function is provided for Qt API consistency. It is equivalent to item().</para>
                <para>If index is negative or if index &gt;= length() then a null node is returned (i.e. a node for which QDomNode::isNull() returns true).</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNodeList.Item(System.Int32)">
            <summary>
                <para>Returns the node at position index.</para>
                <para>If index is negative or if index &gt;= length() then a null node is returned (i.e. a node for which QDomNode::isNull() returns true).</para>
                <para>See also length().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNodeList.Finalize">
            <summary>
                <para>Destroys the object and frees its resources.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNodeList.op_Inequality(QtXml.QDomNodeList,QtXml.QDomNodeList)">
            <summary>
                <para>Returns true the node list n and this node list are not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNodeList.op_Equality(QtXml.QDomNodeList,QtXml.QDomNodeList)">
            <summary>
                <para>Returns true if the node list n and this node list are equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomNotation">
            <summary>
            The QDomNotation class represents an XML notation.
            </summary>
            <remarks>
                <para>
                </para>
                <para>A notation either declares, by name, the format of an unparsed entity (see section 4.7 of the XML 1.0 specification), or is used for formal declaration of processing instruction targets (see section 2.6 of the XML 1.0 specification).</para>
                <para>DOM does not support editing notation nodes; they are therefore read-only.</para>
                <para>A notation node does not have any parent.</para>
                <para>You can retrieve the publicId() and systemId() from a notation node.</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomNotation.#ctor">
            <summary>
                <para>Constructor.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomNotation.#ctor(QtXml.QDomNotation)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNotation.nodeType">
            <summary>
                <para>Returns NotationNode.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNotation.PublicId">
            <summary>
                <para>Returns the public identifier of this notation.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomNotation.SystemId">
            <summary>
                <para>Returns the system identifier of this notation.</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomProcessingInstruction">
            <summary>
            The QDomProcessingInstruction class represents an XML processing instruction.
            </summary>
            <remarks>
                <para>
                </para>
                <para>Processing instructions are used in XML to keep processor-specific information in the text of the document.</para>
                <para>The XML declaration that appears at the top of an XML document, typically &lt;?xml version='1.0' encoding='UTF-8'?&gt;, is treated by QDom as a processing instruction. This is unfortunate, since the XML declaration is not a processing instruction; among other differences, it cannot be inserted into a document anywhere but on the first line.</para>
                <para>Do not use this function to create an xml declaration, since although it has the same syntax as a processing instruction, it isn't, and might not be treated by QDom as such.</para>
                <para>The content of the processing instruction is retrieved with data() and set with setData(). The processing instruction's target is retrieved with target().</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomProcessingInstruction.#ctor">
            <summary>
                <para>Constructs an empty processing instruction. Use QDomDocument::createProcessingInstruction() to create a processing instruction with content.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomProcessingInstruction.#ctor(QtXml.QDomProcessingInstruction)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomProcessingInstruction.Data">
            <summary>
                <para>Returns the content of this processing instruction.</para>
                <para>Sets the data contained in the processing instruction to d.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomProcessingInstruction.nodeType">
            <summary>
                <para>Returns ProcessingInstructionNode.</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomProcessingInstruction.Target">
            <summary>
                <para>Returns the target of this processing instruction.</para>
                <para>See also data().</para>
            </summary>
        </member>
        <member name="T:QtXml.QDomText">
            <summary>
            The QDomText class represents text data in the parsed XML document.
            </summary>
            <remarks>
                <para>
                </para>
                <para>You can split the text in a QDomText object over two QDomText objecs with splitText().</para>
                <para>For further information about the Document Object Model see Level 1 and Level 2 Core. For a more general introduction of the DOM implementation see the QDomDocument documentation.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QDomText.#ctor">
            <summary>
                <para>Constructs an empty QDomText object.</para>
                <para>To construct a QDomText with content, use QDomDocument::createTextNode().</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomText.#ctor(QtXml.QDomText)">
            <summary>
                <para>Constructs a copy of x.</para>
                <para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use cloneNode().</para>
            </summary>
        </member>
        <member name="P:QtXml.QDomText.nodeType">
            <summary>
                <para>Returns TextNode.</para>
            </summary>
        </member>
        <member name="M:QtXml.QDomText.SplitText(System.Int32)">
            <summary>
                <para>Splits this DOM text object into two QDomText objects. This object keeps its first offset characters and the second (newly created) object is inserted into the document tree after this object with the remaining characters.</para>
                <para>The function returns the newly created object.</para>
                <para>See also QDomNode::normalize().</para>
            </summary>
        </member>
        <member name="P:QtXml.Global.QVersion">
            <summary>
                <para>Returns the version number of Qt at run-time as a string (for example, "4.1.2"). This may be a different version than the version the application was compiled against.</para>
                <para>See also QT_VERSION_STR.</para>
            </summary>
        </member>
        <member name="P:QtXml.Global.Qrand">
            <summary>
                <para>Thread-safe version of the standard C++ rand() function.</para>
                <para>Returns a value between 0 and RAND_MAX (defined in &lt;cstdlib&gt; and &lt;stdlib.h&gt;), the next number in the current sequence of pseudo-random integers.</para>
                <para>Use qsrand() to initialize the pseudo-random number generator with a seed value.</para>
                <para>This function was introduced in Qt 4.2.</para>
                <para>See also qsrand().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.Write(QtCore.QTextStream,QtXml.QDomNode)">
            <summary>
                <para>Writes the XML representation of the node node and all its children to the stream str.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.Write(QtCore.QDataStream,System.Collections.Generic.List{System.String})">
            <summary>
                <para>Writes the given string list to the specified out stream.</para>
                <para>See also Serializing Qt Data Types.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.Read(QtCore.QDataStream,System.Collections.Generic.List{System.String})">
            <summary>
                <para>Reads a string list from the given in stream into the specified list.</para>
                <para>See also Serializing Qt Data Types.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QAcos(System.Double)">
            <summary>
                <para>Returns the arccosine of v as an angle in radians. Arccosine is the inverse operation of cosine.</para>
                <para>See also qAtan(), qAsin(), and qCos().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QAsin(System.Double)">
            <summary>
                <para>Returns the arcsine of v as an angle in radians. Arcsine is the inverse operation of sine.</para>
                <para>See also qSin(), qAtan(), and qAcos().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QAtan(System.Double)">
            <summary>
                <para>Returns the arctangent of v as an angle in radians. Arctangent is the inverse operation of tangent.</para>
                <para>See also qTan(), qAcos(), and qAsin().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QAtan2(System.Double,System.Double)">
            <summary>
                <para>Returns the arctangent of a point specified by the coordinates x and y. This function will return the angle and its direction.</para>
                <para>See also qAtan().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QCeil(System.Double)">
            <summary>
                <para>Return the ceiling of the value v.</para>
                <para>The ceiling is the smallest integer that is not less than v. For example, if v is 41.2, then the ceiling is 42.</para>
                <para>See also qFloor().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QCos(System.Double)">
            <summary>
                <para>Returns the cosine of an angle v in radians.</para>
                <para>See also qSin() and qTan().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QExp(System.Double)">
            <summary>
                <para>Returns the exponential function of e to the power of v.</para>
                <para>See also qLn().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QFloor(System.Double)">
            <summary>
                <para>Return the floor of the value v.</para>
                <para>The floor is the largest integer that is not greater than v. For example, if v is 41.2, then the floor is 41.</para>
                <para>See also qCeil().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QFuzzyCompare(System.Double,System.Double)">
            <summary>
                <para>Compares the floating point value p1 and p2 and returns true if they are considered equal, otherwise false.</para>
                <para>Note that comparing values where either p1 or p2 is 0.0 will not work. The solution to this is to compare against values greater than or equal to 1.0.</para>
                <para>         // Instead of comparing with 0.0</para>
                <para>                 qFuzzyCompare(0.0,1.0e-200); // This will return false</para>
                <para>         // Compare adding 1 to both values will fix the problem</para>
                <para>                 qFuzzyCompare(1 + 0.0, 1 + 1.0e-200); // This will return true</para>
                <para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</para>
                <para>Note: This function is thread-safe.</para>
                <para>This function was introduced in Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QFuzzyCompare(System.Single,System.Single)">
            <summary>
                <para>Compares the floating point value p1 and p2 and returns true if they are considered equal, otherwise false.</para>
                <para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</para>
                <para>Note: This function is thread-safe.</para>
                <para>This function was introduced in Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(QtCore.QBitArray)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(QtCore.QChar)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(QtCore.QByteArray)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.UInt32)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.Char)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.Byte)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.Int16)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(NativeLong)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.UInt16)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.Int64)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.UInt64)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.Int32)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(System.String)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QHash(NativeULong)">
            <summary>
                <para>Returns the hash value for the key.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QInstallMsgHandler(QtXml.Global.ActionQtMsgTypeString)">
            <summary>
                <para>Installs a Qt message handler which has been defined previously. Returns a pointer to the previous message handler (which may be 0).</para>
                <para>The message handler is a function that prints out debug messages, warnings, critical and fatal error messages. The Qt library (debug mode) contains hundreds of warning messages that are printed when internal errors (usually invalid function arguments) occur. Qt built in release mode also contains such warnings unless QT_NO_WARNING_OUTPUT and/or QT_NO_DEBUG_OUTPUT have been set during compilation. If you implement your own message handler, you get total control of these messages.</para>
                <para>The default message handler prints the message to the standard output under X11 or to the debugger under Windows. If it is a fatal message, the application aborts immediately.</para>
                <para>Only one message handler can be defined, since this is usually done on an application-wide basis to control debug output.</para>
                <para>To restore the message handler, call qInstallMsgHandler(0).</para>
                <para>Example:</para>
                <para> #include &lt;qapplication.h&gt;</para>
                <para> #include &lt;stdio.h&gt;</para>
                <para> #include &lt;stdlib.h&gt;</para>
                <para>
                </para>
                <para> void myMessageOutput(QtMsgType type, const char *msg)</para>
                <para> {</para>
                <para>     switch (type) {</para>
                <para>     case QtDebugMsg:</para>
                <para>         fprintf(stderr, "Debug: %s\\n", msg);</para>
                <para>         break;</para>
                <para>     case QtWarningMsg:</para>
                <para>         fprintf(stderr, "Warning: %s\\n", msg);</para>
                <para>         break;</para>
                <para>     case QtCriticalMsg:</para>
                <para>         fprintf(stderr, "Critical: %s\\n", msg);</para>
                <para>         break;</para>
                <para>     case QtFatalMsg:</para>
                <para>         fprintf(stderr, "Fatal: %s\\n", msg);</para>
                <para>         abort();</para>
                <para>     }</para>
                <para> }</para>
                <para>
                </para>
                <para> int main(int argc, char **argv)</para>
                <para> {</para>
                <para>     qInstallMsgHandler(myMessageOutput);</para>
                <para>     QApplication app(argc, argv);</para>
                <para>     ...</para>
                <para>     return app.exec();</para>
                <para> }</para>
                <para>See also qDebug(), qWarning(), qCritical(), qFatal(), QtMsgType, and Debugging Techniques.</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QLn(System.Double)">
            <summary>
                <para>Returns the natural logarithm of v. Natural logarithm uses base e.</para>
                <para>See also qExp().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QPow(System.Double,System.Double)">
            <summary>
                <para>Returns the value of x raised to the power of y. That is, x is the base and y is the exponent.</para>
                <para>See also qSqrt().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QRound(System.Double)">
            <summary>
                <para>Rounds value to the nearest integer.</para>
                <para>Example:</para>
                <para> qreal valueA = 2.3;</para>
                <para> qreal valueB = 2.7;</para>
                <para>
                </para>
                <para> int roundedValueA = qRound(valueA);</para>
                <para> // roundedValueA = 2</para>
                <para> int roundedValueB = qRound(valueB);</para>
                <para> // roundedValueB = 3</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QRound64(System.Double)">
            <summary>
                <para>Rounds value to the nearest 64-bit integer.</para>
                <para>Example:</para>
                <para> qreal valueA = 42949672960.3;</para>
                <para> qreal valueB = 42949672960.7;</para>
                <para>
                </para>
                <para> int roundedValueA = qRound(valueA);</para>
                <para> // roundedValueA = 42949672960</para>
                <para> int roundedValueB = qRound(valueB);</para>
                <para> // roundedValueB = 42949672961</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QSin(System.Double)">
            <summary>
                <para>Returns the sine of the angle v in radians.</para>
                <para>See also qCos() and qTan().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QSqrt(System.Double)">
            <summary>
                <para>Returns the square root of v. This function returns a NaN if v is a negative number.</para>
                <para>See also qPow().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QTan(System.Double)">
            <summary>
                <para>Returns the tangent of an angle v in radians.</para>
                <para>See also qSin() and qCos().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.Qgetenv(System.String)">
            <summary>
                <para>Returns the value of the environment variable with name varName. To get the variable string, use QByteArray::constData().</para>
                <para>Note: qgetenv() was introduced because getenv() from the standard C library was deprecated in VC2005 (and later versions). qgetenv() uses the new replacement function in VC, and calls the standard C library's implementation on all other platforms.</para>
                <para>See also qputenv().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.Qputenv(System.String,QtCore.QByteArray)">
            <summary>
                <para>This function sets the value of the environment variable named varName. It will create the variable if it does not exist. It returns 0 if the variable could not be set.</para>
                <para>Note: qputenv() was introduced because putenv() from the standard C library was deprecated in VC2005 (and later versions). qputenv() uses the replacement function in VC, and calls the standard C library's implementation on all other platforms.</para>
                <para>See also qgetenv().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.Qsrand(System.UInt32)">
            <summary>
                <para>Thread-safe version of the standard C++ srand() function.</para>
                <para>Sets the argument seed to be used to generate a new random number sequence of pseudo random integers to be returned by qrand().</para>
                <para>The sequence of random numbers generated is deterministic per thread. For example, if two threads call qsrand(1) and subsequently calls qrand(), the threads will get the same random number sequence.</para>
                <para>This function was introduced in Qt 4.2.</para>
                <para>See also qrand().</para>
            </summary>
        </member>
        <member name="M:QtXml.Global.QtTrId(System.String,System.Int32)">
            <summary>
                <para>The qtTrId function finds and returns a translated string.</para>
                <para>Returns a translated string identified by id. If no matching string is found, the id itself is returned. This should not happen under normal conditions.</para>
                <para>If n &gt;= 0, all occurrences of %n in the resulting string are replaced with a decimal representation of n. In addition, depending on n's value, the translation text may vary.</para>
                <para>Meta data and comments can be passed as documented for QObject::tr(). In addition, it is possible to supply a source string template like that:</para>
                <para>//% &lt;C string&gt;</para>
                <para>or</para>
                <para>/*% &lt;C string&gt; */</para>
                <para>Example:</para>
                <para>     //% "%n fooish bar(s) found.\\n"</para>
                <para>     //% "Do you want to continue?"</para>
                <para>     QString text = qtTrId("qtn_foo_bar", n);</para>
                <para>Creating QM files suitable for use with this function requires passing the -idbased option to the lrelease tool.</para>
                <para>Warning: This method is reentrant only if all translators are installed before calling this method. Installing or removing translators while performing translations is not supported. Doing so will probably result in crashes or other undesirable behavior.</para>
                <para>Note: This function is reentrant.</para>
                <para>This function was introduced in Qt 4.6.</para>
                <para>See also QObject::tr(), QCoreApplication::translate(), and Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlAttributes">
            <summary>
            The QXmlAttributes class provides XML attributes.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If attributes are reported by QXmlContentHandler::startElement() this class is used to pass the attribute values.</para>
                <para>Use index() to locate the position of an attribute in the list, count() to retrieve the number of attributes, and clear() to remove the attributes. New attributes can be added with append(). Use type() to get an attribute's type and value() to get its value. The attribute's name is available from localName() or qName(), and its namespace URI from uri().</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlAttributes.#ctor">
            <summary>
                <para>Constructs an empty attribute list.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlAttributes.Count">
            <summary>
                <para>Returns the number of attributes in the list. This function is equivalent to length().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlAttributes.Length">
            <summary>
                <para>Returns the number of attributes in the list.</para>
                <para>See also count().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Append(System.String,System.String,System.String,System.String)">
            <summary>
                <para>Appends a new attribute entry to the list of attributes. The qualified name of the attribute is qName, the namespace URI is uri and the local name is localPart. The value of the attribute is value.</para>
                <para>See also qName(), uri(), localName(), and value().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Clear">
            <summary>
                <para>Clears the list of attributes.</para>
                <para>See also append().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Index(QtCore.QLatin1String)">
            <summary>
                <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Index(System.String)">
            <summary>
                <para>Looks up the index of an attribute by the qualified name qName.</para>
                <para>Returns the index of the attribute or -1 if it wasn't found.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Index(System.String,System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Looks up the index of an attribute by a namespace name.</para>
                <para>uri specifies the namespace URI, or an empty string if the name has no namespace URI. localPart specifies the attribute's local name.</para>
                <para>Returns the index of the attribute, or -1 if it wasn't found.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.LocalName(System.Int32)">
            <summary>
                <para>Looks up an attribute's local name for the attribute at position index. If no namespace processing is done, the local name is an empty string.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.QName(System.Int32)">
            <summary>
                <para>Looks up an attribute's XML 1.0 qualified name for the attribute at position index.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Type(System.Int32)">
            <summary>
                <para>Looks up an attribute's type for the attribute at position index.</para>
                <para>Currently only "CDATA" is returned.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Type(System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Looks up an attribute's type for the qualified name qName.</para>
                <para>Currently only "CDATA" is returned.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Type(System.String,System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Looks up an attribute's type by namespace name.</para>
                <para>uri specifies the namespace URI and localName specifies the local name. If the name has no namespace URI, use an empty string for uri.</para>
                <para>Currently only "CDATA" is returned.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Uri(System.Int32)">
            <summary>
                <para>Looks up an attribute's namespace URI for the attribute at position index. If no namespace processing is done or if the attribute has no namespace, the namespace URI is an empty string.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Value(QtCore.QLatin1String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Returns an attribute's value for the qualified name qName, or an empty string if no attribute exists for the name given.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Value(System.Int32)">
            <summary>
                <para>Returns an attribute's value for the attribute at position index. The index must be a valid position (i.e., 0 &lt;= index &lt; count()).</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Value(System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Returns an attribute's value for the qualified name qName, or an empty string if no attribute exists for the name given.</para>
                <para>See also Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Value(System.String,System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Returns an attribute's value by namespace name.</para>
                <para>uri specifies the namespace URI, or an empty string if the name has no namespace URI. localName specifies the attribute's local name.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlAttributes.Finalize">
            <summary>
                <para>Destroys the attributes object.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlContentHandler">
            <summary>
            The QXmlContentHandler class provides an interface to report the logical content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If the application needs to be informed of basic parsing events, it can implement this interface and activate it using QXmlReader::setContentHandler(). The reader can then report basic document-related events like the start and end of elements and character data through this interface.</para>
                <para>The order of events in this interface is very important, and mirrors the order of information in the document itself. For example, all of an element's content (character data, processing instructions, and sub-elements) appears, in order, between the startElement() event and the corresponding endElement() event.</para>
                <para>The class QXmlDefaultHandler provides a default implementation for this interface; subclassing from the QXmlDefaultHandler class is very convenient if you only want to be informed of some parsing events.</para>
                <para>The startDocument() function is called at the start of the document, and endDocument() is called at the end. Before parsing begins setDocumentLocator() is called. For each element startElement() is called, with endElement() being called at the end of each element. The characters() function is called with chunks of character data; ignorableWhitespace() is called with chunks of whitespace and processingInstruction() is called with processing instructions. If an entity is skipped skippedEntity() is called. At the beginning of prefix-URI scopes startPrefixMapping() is called.</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlEntityResolver, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlContentHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string, e.g. if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.Characters(System.String)">
            <summary>
                <para>The reader calls this function when it has parsed a chunk of character data (either normal character data or character data inside a CDATA section; if you need to distinguish between those two types you must use QXmlLexicalHandler::startCDATA() and QXmlLexicalHandler::endCDATA()). The character data is reported in ch.</para>
                <para>Some readers report whitespace in element content using the ignorableWhitespace() function rather than using this one.</para>
                <para>A reader may report the character data of an element in more than one chunk; e.g. a reader might want to report "a&lt;b" in three characters() events ("a ", "&lt;" and " b").</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.EndDocument">
            <summary>
                <para>The reader calls this function after it has finished parsing. It is called just once, and is the last handler function called. It is called after the reader has read all input or has abandoned parsing because of a fatal error.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.EndElement(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function when it has parsed an end element tag with the qualified name qName, the local name localName and the namespace URI namespaceURI.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startElement() and Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.EndPrefixMapping(System.String)">
            <summary>
                <para>The reader calls this function to signal the end of a prefix mapping for the prefix prefix.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startPrefixMapping() and Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.IgnorableWhitespace(System.String)">
            <summary>
                <para>Some readers may use this function to report each chunk of whitespace in element content. The whitespace is reported in ch.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.ProcessingInstruction(System.String,System.String)">
            <summary>
                <para>The reader calls this function when it has parsed a processing instruction.</para>
                <para>target is the target name of the processing instruction and data is the data in the processing instruction.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.SetDocumentLocator(QtXml.QXmlLocator)">
            <summary>
                <para>The reader calls this function before it starts parsing the document. The argument locator is a pointer to a QXmlLocator which allows the application to get the parsing position within the document.</para>
                <para>Do not destroy the locator; it is destroyed when the reader is destroyed. (Do not use the locator after the reader is destroyed).</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.SkippedEntity(System.String)">
            <summary>
                <para>Some readers may skip entities if they have not seen the declarations (e.g. because they are in an external DTD). If they do so they report that they skipped the entity called name by calling this function.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.StartDocument">
            <summary>
                <para>The reader calls this function when it starts parsing the document. The reader calls this function just once, after the call to setDocumentLocator(), and before any other functions in this class or in the QXmlDTDHandler class are called.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.StartElement(System.String,System.String,System.String,QtXml.QXmlAttributes)">
            <summary>
                <para>The reader calls this function when it has parsed a start element tag.</para>
                <para>There is a corresponding endElement() call when the corresponding end element tag is read. The startElement() and endElement() calls are always nested correctly. Empty element tags (e.g. &lt;x/&gt;) cause a startElement() call to be immediately followed by an endElement() call.</para>
                <para>The attribute list provided only contains attributes with explicit values. The attribute list contains attributes used for namespace declaration (i.e. attributes starting with xmlns) only if the namespace-prefix property of the reader is true.</para>
                <para>The argument namespaceURI is the namespace URI, or an empty string if the element has no namespace URI or if no namespace processing is done. localName is the local name (without prefix), or an empty string if no namespace processing is done, qName is the qualified name (with prefix) and atts are the attributes attached to the element. If there are no attributes, atts is an empty attributes object.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endElement() and Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.StartPrefixMapping(System.String,System.String)">
            <summary>
                <para>The reader calls this function to signal the begin of a prefix-URI namespace mapping scope. This information is not necessary for normal namespace processing since the reader automatically replaces prefixes for element and attribute names.</para>
                <para>Note that startPrefixMapping() and endPrefixMapping() calls are not guaranteed to be properly nested relative to each other: all startPrefixMapping() events occur before the corresponding startElement() event, and all endPrefixMapping() events occur after the corresponding endElement() event, but their order is not otherwise guaranteed.</para>
                <para>The argument prefix is the namespace prefix being declared and the argument uri is the namespace URI the prefix is mapped to.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endPrefixMapping() and Namespace Support via Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlContentHandler.Finalize">
            <summary>
                <para>Destroys the content handler.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlDTDHandler">
            <summary>
            The QXmlDTDHandler class provides an interface to report DTD content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If an application needs information about notations and unparsed entities, it can implement this interface and register an instance with QXmlReader::setDTDHandler().</para>
                <para>Note that this interface includes only those DTD events that the XML recommendation requires processors to report, i.e. notation and unparsed entity declarations using notationDecl() and unparsedEntityDecl() respectively.</para>
                <para>
                </para>
                <para>See also QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlDTDHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDTDHandler.NotationDecl(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function when it has parsed a notation declaration.</para>
                <para>The argument name is the notation name, publicId is the notation's public identifier and systemId is the notation's system identifier.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDTDHandler.UnparsedEntityDecl(System.String,System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function when it finds an unparsed entity declaration.</para>
                <para>The argument name is the unparsed entity's name, publicId is the entity's public identifier, systemId is the entity's system identifier and notationName is the name of the associated notation.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDTDHandler.Finalize">
            <summary>
                <para>Destroys the DTD handler.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlDeclHandler">
            <summary>
            The QXmlDeclHandler class provides an interface to report declaration content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>You can set the declaration handler with QXmlReader::setDeclHandler().</para>
                <para>This interface is based on the SAX2 extension DeclHandler.</para>
                <para>The interface provides attributeDecl(), internalEntityDecl() and externalEntityDecl() functions.</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlDeclHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDeclHandler.AttributeDecl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function to report an attribute type declaration. Only the effective (first) declaration for an attribute is reported.</para>
                <para>The reader passes the name of the associated element in eName and the name of the attribute in aName. It passes a string that represents the attribute type in type and a string that represents the attribute default in valueDefault. This string is one of "#IMPLIED", "#REQUIRED", "#FIXED" or an empty string (if none of the others applies). The reader passes the attribute's default value in value. If no default value is specified in the XML file, value is an empty string.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDeclHandler.ExternalEntityDecl(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function to report a parsed external entity declaration. Only the effective (first) declaration for each entity is reported.</para>
                <para>The reader passes the name of the entity in name, the public identifier in publicId and the system identifier in systemId. If there is no public identifier specified, it passes an empty string in publicId.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDeclHandler.InternalEntityDecl(System.String,System.String)">
            <summary>
                <para>The reader calls this function to report an internal entity declaration. Only the effective (first) declaration is reported.</para>
                <para>The reader passes the name of the entity in name and the value of the entity in value.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDeclHandler.Finalize">
            <summary>
                <para>Destroys the declaration handler.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlDefaultHandler">
            <summary>
            The QXmlDefaultHandler class provides a default implementation of all the XML handler classes.
            </summary>
            <remarks>
                <para>
                </para>
                <para>This class gathers together the features of the specialized handler classes, making it a convenient starting point when implementing custom handlers for subclasses of QXmlReader, particularly QXmlSimpleReader. The virtual functions from each of the base classes are reimplemented in this class, providing sensible default behavior for many common cases. By subclassing this class, and overriding these functions, you can concentrate on implementing the parts of the handler relevant to your application.</para>
                <para>The XML reader must be told which handler to use for different kinds of events during parsing. This means that, although QXmlDefaultHandler provides default implementations of functions inherited from all its base classes, we can still use specialized handlers for particular kinds of events.</para>
                <para>For example, QXmlDefaultHandler subclasses both QXmlContentHandler and QXmlErrorHandler, so by subclassing it we can use the same handler for both of the following reader functions:</para>
                <para>     xmlReader.setContentHandler(handler);</para>
                <para>     xmlReader.setErrorHandler(handler);</para>
                <para>Since the reader will inform the handler of parsing errors, it is necessary to reimplement QXmlErrorHandler::fatalError() if, for example, we want to stop parsing when such an error occurs:</para>
                <para> bool Handler::fatalError (const QXmlParseException &amp; exception)</para>
                <para> {</para>
                <para>     qWarning() &lt;&lt; "Fatal error on line" &lt;&lt; exception.lineNumber()</para>
                <para>                &lt;&lt; ", column" &lt;&lt; exception.columnNumber() &lt;&lt; ":"</para>
                <para>                &lt;&lt; exception.message();</para>
                <para>
                </para>
                <para>     return false;</para>
                <para> }</para>
                <para>The above function returns false, which tells the reader to stop parsing. To continue to use the same reader, it is necessary to create a new handler instance, and set up the reader to use it in the manner described above.</para>
                <para>It is useful to examine some of the functions inherited by QXmlDefaultHandler, and consider why they might be reimplemented in a custom handler. Custom handlers will typically reimplement QXmlContentHandler::startDocument() to prepare the handler for new content. Document elements and the text within them can be processed by reimplementing QXmlContentHandler::startElement(), QXmlContentHandler::endElement(), and QXmlContentHandler::characters(). You may want to reimplement QXmlContentHandler::endDocument() to perform some finalization or validation on the content once the document has been read completely.</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.#ctor">
            <summary>
                <para>Constructs a handler for use with subclasses of QXmlReader.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlDefaultHandler.ErrorString">
            <summary>
                <para>Reimplemented from QXmlContentHandler::errorString().</para>
                <para>Returns the default error string.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.AttributeDecl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlDeclHandler::attributeDecl().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.Characters(System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::characters().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.Comment(System.String)">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::comment().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.EndCDATA">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::endCDATA().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.EndDTD">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::endDTD().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.EndDocument">
            <summary>
                <para>Reimplemented from QXmlContentHandler::endDocument().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.EndElement(System.String,System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::endElement().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.EndEntity(System.String)">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::endEntity().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.EndPrefixMapping(System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::endPrefixMapping().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.Error(QtXml.QXmlParseException)">
            <summary>
                <para>Reimplemented from QXmlErrorHandler::error().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.ExternalEntityDecl(System.String,System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlDeclHandler::externalEntityDecl().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.FatalError(QtXml.QXmlParseException)">
            <summary>
                <para>Reimplemented from QXmlErrorHandler::fatalError().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.IgnorableWhitespace(System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::ignorableWhitespace().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.InternalEntityDecl(System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlDeclHandler::internalEntityDecl().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.NotationDecl(System.String,System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlDTDHandler::notationDecl().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.ProcessingInstruction(System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::processingInstruction().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.ResolveEntity(System.String,System.String,QtXml.QXmlInputSource)">
            <summary>
                <para>Reimplemented from QXmlEntityResolver::resolveEntity().</para>
                <para>Sets ret to 0, so that the reader uses the system identifier provided in the XML document.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.SetDocumentLocator(QtXml.QXmlLocator)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::setDocumentLocator().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.SkippedEntity(System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::skippedEntity().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.StartCDATA">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::startCDATA().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.StartDTD(System.String,System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::startDTD().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.StartDocument">
            <summary>
                <para>Reimplemented from QXmlContentHandler::startDocument().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.StartElement(System.String,System.String,System.String,QtXml.QXmlAttributes)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::startElement().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.StartEntity(System.String)">
            <summary>
                <para>Reimplemented from QXmlLexicalHandler::startEntity().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.StartPrefixMapping(System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlContentHandler::startPrefixMapping().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.UnparsedEntityDecl(System.String,System.String,System.String,System.String)">
            <summary>
                <para>Reimplemented from QXmlDTDHandler::unparsedEntityDecl().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.Warning(QtXml.QXmlParseException)">
            <summary>
                <para>Reimplemented from QXmlErrorHandler::warning().</para>
                <para>This reimplementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlDefaultHandler.Finalize">
            <summary>
                <para>Destroys the handler.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlEntityResolver">
            <summary>
            The QXmlEntityResolver class provides an interface to resolve external entities contained in XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If an application needs to implement customized handling for external entities, it must implement this interface, i.e. resolveEntity(), and register it with QXmlReader::setEntityResolver().</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlEntityResolver.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlEntityResolver.ResolveEntity(System.String,System.String,QtXml.QXmlInputSource)">
            <summary>
                <para>The reader calls this function before it opens any external entity, except the top-level document entity. The application may request the reader to resolve the entity itself (ret is 0) or to use an entirely different input source (ret points to the input source).</para>
                <para>The reader deletes the input source ret when it no longer needs it, so you should allocate it on the heap with new.</para>
                <para>The argument publicId is the public identifier of the external entity, systemId is the system identifier of the external entity and ret is the return value of this function. If ret is 0 the reader should resolve the entity itself, if it is non-zero it must point to an input source which the reader uses instead.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlEntityResolver.Finalize">
            <summary>
                <para>Destroys the entity resolver.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlErrorHandler">
            <summary>
            The QXmlErrorHandler class provides an interface to report errors in XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If you want your application to report errors to the user or to perform customized error handling, you should subclass this class.</para>
                <para>You can set the error handler with QXmlReader::setErrorHandler().</para>
                <para>Errors can be reported using warning(), error() and fatalError(), with the error text being reported with errorString().</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlErrorHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlErrorHandler.Error(QtXml.QXmlParseException)">
            <summary>
                <para>A reader might use this function to report a recoverable error. A recoverable error corresponds to the definiton of "error" in section 1.2 of the XML 1.0 specification. Details of the error are stored in exception.</para>
                <para>The reader must continue to provide normal parsing events after invoking this function.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlErrorHandler.FatalError(QtXml.QXmlParseException)">
            <summary>
                <para>A reader must use this function to report a non-recoverable error. Details of the error are stored in exception.</para>
                <para>If this function returns true the reader might try to go on parsing and reporting further errors, but no regular parsing events are reported.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlErrorHandler.Warning(QtXml.QXmlParseException)">
            <summary>
                <para>A reader might use this function to report a warning. Warnings are conditions that are not errors or fatal errors as defined by the XML 1.0 specification. Details of the warning are stored in exception.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlErrorHandler.Finalize">
            <summary>
                <para>Destroys the error handler.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlInputSource">
            <summary>
            The QXmlInputSource class provides the input data for the QXmlReader subclasses.
            </summary>
            <remarks>
                <para>
                </para>
                <para>All subclasses of QXmlReader read the input XML document from this class.</para>
                <para>This class recognizes the encoding of the data by reading the encoding declaration in the XML file if it finds one, and reading the data using the corresponding encoding. If it does not find an encoding declaration, then it assumes that the data is either in UTF-8 or UTF-16, depending on whether it can find a byte-order mark.</para>
                <para>There are two ways to populate the input source with data: you can construct it with a QIODevice* so that the input source reads the data from that device. Or you can set the data explicitly with one of the setData() functions.</para>
                <para>Usually you either construct a QXmlInputSource that works on a QIODevice* or you construct an empty QXmlInputSource and set the data with setData(). There are only rare occasions where you would want to mix both methods.</para>
                <para>The QXmlReader subclasses use the next() function to read the input character by character. If you want to start from the beginning again, use reset().</para>
                <para>The functions data() and fetchData() are useful if you want to do something with the data other than parsing, e.g. displaying the raw XML file. The benefit of using the QXmlInputClass in such cases is that it tries to use the correct encoding.</para>
                <para>
                </para>
                <para>See also QXmlReader and QXmlSimpleReader.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlInputSource.#ctor">
            <summary>
                <para>Constructs an input source which contains no data.</para>
                <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlInputSource.#ctor(QtCore.QIODevice)">
            <summary>
                <para>Constructs an input source and gets the data from device dev. If dev is not open, it is opened in read-only mode. If dev is 0 or it is not possible to read from the device, the input source will contain no data.</para>
                <para>See also setData(), fetchData(), and QIODevice.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlInputSource.Data">
            <summary>
                <para>Returns the data the input source contains or an empty string if the input source does not contain any data.</para>
                <para>Sets the data of the input source to dat.</para>
                <para>If the input source already contains data, this function deletes that data first.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlInputSource.Next">
            <summary>
                <para>Returns the next character of the input source. If this function reaches the end of available data, it returns QXmlInputSource::EndOfData. If you call next() after that, it tries to fetch more data by calling fetchData(). If the fetchData() call results in new data, this function returns the first character of that data; otherwise it returns QXmlInputSource::EndOfDocument.</para>
                <para>Readers, such as QXmlSimpleReader, will assume that the end of the XML document has been reached if the this function returns QXmlInputSource::EndOfDocument, and will check that the supplied input is well-formed. Therefore, when reimplementing this function, it is important to ensure that this behavior is duplicated.</para>
                <para>See also reset(), fetchData(), QXmlSimpleReader::parse(), and QXmlSimpleReader::parseContinue().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlInputSource.FetchData">
            <summary>
                <para>This function reads more data from the device that was set during construction. If the input source already contained data, this function deletes that data first.</para>
                <para>This object contains no data after a call to this function if the object was constructed without a device to read data from or if this function was not able to get more data from the device.</para>
                <para>There are two occasions where a fetch is done implicitly by another function call: during construction (so that the object starts out with some initial data where available), and during a call to next() (if the data had run out).</para>
                <para>You don't normally need to use this function if you use next().</para>
                <para>See also data(), next(), and QXmlInputSource().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlInputSource.FromRawData(QtCore.QByteArray,System.Boolean)">
            <summary>
                <para>This function reads the XML file from data and tries to recognize the encoding. It converts the raw data data into a QString and returns it. It tries its best to get the correct encoding for the XML file.</para>
                <para>If beginning is true, this function assumes that the data starts at the beginning of a new XML document and looks for an encoding declaration. If beginning is false, it converts the raw data using the encoding determined from prior calls.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlInputSource.Reset">
            <summary>
                <para>This function sets the position used by next() to the beginning of the data returned by data(). This is useful if you want to use the input source for more than one parse.</para>
                <para>Note: In the case that the underlying data source is a QIODevice, the current position in the device is not automatically set to the start of input. Call QIODevice::seek(0) on the device to do this.</para>
                <para>See also next().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlInputSource.SetData(QtCore.QByteArray)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>The data dat is passed through the correct text-codec, before it is set.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlInputSource.Finalize">
            <summary>
                <para>Destructor.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlLexicalHandler">
            <summary>
            The QXmlLexicalHandler class provides an interface to report the lexical content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events appear between the content handler's startDocument and endDocument events.</para>
                <para>You can set the lexical handler with QXmlReader::setLexicalHandler().</para>
                <para>This interface's design is based on the SAX2 extension LexicalHandler.</para>
                <para>The interface provides the startDTD(), endDTD(), startEntity(), endEntity(), startCDATA(), endCDATA() and comment() functions.</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlLexicalHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.Comment(System.String)">
            <summary>
                <para>The reader calls this function to report an XML comment anywhere in the document. It reports the text of the comment in ch.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.EndCDATA">
            <summary>
                <para>The reader calls this function to report the end of a CDATA section.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startCDATA() and QXmlContentHandler::characters().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.EndDTD">
            <summary>
                <para>The reader calls this function to report the end of a DTD declaration, if any.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startDTD().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.EndEntity(System.String)">
            <summary>
                <para>The reader calls this function to report the end of an entity called name.</para>
                <para>For every startEntity() call, there is a corresponding endEntity() call. The calls to startEntity() and endEntity() are properly nested.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startEntity(), QXmlContentHandler::skippedEntity(), and QXmlSimpleReader::setFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.StartCDATA">
            <summary>
                <para>The reader calls this function to report the start of a CDATA section. The content of the CDATA section is reported through the QXmlContentHandler::characters() function. This function is intended only to report the boundary.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endCDATA().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.StartDTD(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function to report the start of a DTD declaration, if any. It reports the name of the document type in name, the public identifier in publicId and the system identifier in systemId.</para>
                <para>If the public identifier is missing, publicId is set to an empty string. If the system identifier is missing, systemId is set to an empty string. Note that it is not valid XML to have a public identifier but no system identifier; in such cases a parse error will occur.</para>
                <para>All declarations reported through QXmlDTDHandler or QXmlDeclHandler appear between the startDTD() and endDTD() calls.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endDTD().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.StartEntity(System.String)">
            <summary>
                <para>The reader calls this function to report the start of an entity called name.</para>
                <para>Note that if the entity is unknown, the reader reports it through QXmlContentHandler::skippedEntity() and not through this function.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endEntity() and QXmlSimpleReader::setFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLexicalHandler.Finalize">
            <summary>
                <para>Destroys the lexical handler.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlLocator">
            <summary>
            The QXmlLocator class provides the XML handler classes with information about the parsing position within a file.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The reader reports a QXmlLocator to the content handler before it starts to parse the document. This is done with the QXmlContentHandler::setDocumentLocator() function. The handler classes can now use this locator to get the position (lineNumber() and columnNumber()) that the reader has reached.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlLocator.#ctor">
            <summary>
                <para>Constructor.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlLocator.ColumnNumber">
            <summary>
                <para>Returns the column number (starting at 1) or -1 if there is no column number available.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlLocator.LineNumber">
            <summary>
                <para>Returns the line number (starting at 1) or -1 if there is no line number available.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlLocator.Finalize">
            <summary>
                <para>Destructor.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlNamespaceSupport">
            <summary>
            The QXmlNamespaceSupport class is a helper class for XML readers which want to include namespace support.
            </summary>
            <remarks>
                <para>
                </para>
                <para>You can set the prefix for the current namespace with setPrefix(), and get the list of current prefixes (or those for a given URI) with prefixes(). The namespace URI is available from uri(). Use pushContext() to start a new namespace context, and popContext() to return to the previous namespace context. Use splitName() or processName() to split a name into its prefix and local name.</para>
                <para>
                </para>
                <para>See also Namespace Support via Features.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.#ctor">
            <summary>
                <para>Constructs a QXmlNamespaceSupport.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.PopContext">
            <summary>
                <para>Reverts to the previous namespace context.</para>
                <para>Normally, you should pop the context at the end of each XML element. After popping the context, all namespace prefix mappings that were previously in force are restored.</para>
                <para>See also pushContext().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.Prefix(System.String)">
            <summary>
                <para>Returns one of the prefixes mapped to the namespace URI uri.</para>
                <para>If more than one prefix is currently mapped to the same URI, this function makes an arbitrary selection; if you want all of the prefixes, use prefixes() instead.</para>
                <para>Note: to check for a default prefix, use the uri() function with an argument of "".</para>
                <para>See also setPrefix().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.Prefixes">
            <summary>
                <para>Returns a list of all the prefixes currently declared.</para>
                <para>If there is a default prefix, this function does not return it in the list; check for the default prefix using uri() with an argument of "".</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.Prefixes(System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Returns a list of all prefixes currently declared for the namespace URI uri.</para>
                <para>The "xml:" prefix is included. If you only want one prefix that is mapped to the namespace URI, and you don't care which one you get, use the prefix() function instead.</para>
                <para>Note: The empty (default) prefix is never included in this list; to check for the presence of a default namespace, call uri() with "" as the argument.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.ProcessName(System.String,System.Boolean,System.String,System.String)">
            <summary>
                <para>Processes a raw XML 1.0 name in the current context by removing the prefix and looking it up among the prefixes currently declared.</para>
                <para>qname is the raw XML 1.0 name to be processed. isAttribute is true if the name is an attribute name.</para>
                <para>This function stores the namespace URI in nsuri (which will be set to an empty string if the raw name has an undeclared prefix), and stores the local name (without prefix) in localname (which will be set to an empty string if no namespace is in use).</para>
                <para>Note that attribute names are processed differently than element names: an unprefixed element name gets the default namespace (if any), while an unprefixed attribute name does not.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.PushContext">
            <summary>
                <para>Starts a new namespace context.</para>
                <para>Normally, you should push a new context at the beginning of each XML element: the new context automatically inherits the declarations of its parent context, and it also keeps track of which declarations were made within this context.</para>
                <para>See also popContext().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.Reset">
            <summary>
                <para>Resets this namespace support object ready for reuse.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.SetPrefix(System.String,System.String)">
            <summary>
                <para>This function declares a prefix pre in the current namespace context to be the namespace URI uri. The prefix remains in force until this context is popped, unless it is shadowed in a descendant context.</para>
                <para>Note that there is an asymmetry in this library. prefix() does not return the default "" prefix, even if you have declared one; to check for a default prefix, you must look it up explicitly using uri(). This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.</para>
                <para>See also prefix().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.SplitName(System.String,System.String,System.String)">
            <summary>
                <para>Splits the name qname at the ':' and returns the prefix in prefix and the local name in localname.</para>
                <para>See also processName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.Uri(System.String)">
            <summary>
                <para>Looks up the prefix prefix in the current context and returns the currently-mapped namespace URI. Use the empty string ("") for the default namespace.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlNamespaceSupport.Finalize">
            <summary>
                <para>Destroys a QXmlNamespaceSupport.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlParseException">
            <summary>
            The QXmlParseException class is used to report errors with the QXmlErrorHandler interface.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The XML subsystem constructs an instance of this class when it detects an error. You can retrieve the place where the error occurred using systemId(), publicId(), lineNumber() and columnNumber(), along with the error message(). The possible error messages are:</para>
                <para>
                </para>
                <para>"no error occurred"</para>
                <para>"error triggered by consumer"</para>
                <para>"unexpected end of file"</para>
                <para>"more than one document type definition"</para>
                <para>"error occurred while parsing element"</para>
                <para>"tag mismatch"</para>
                <para>"error occurred while parsing content"</para>
                <para>"unexpected character"</para>
                <para>"invalid name for processing instruction"</para>
                <para>"version expected while reading the XML declaration"</para>
                <para>"wrong value for standalone declaration"</para>
                <para>"encoding declaration or standalone declaration expected while reading the XML declaration"</para>
                <para>"standalone declaration expected while reading the XML declaration"</para>
                <para>"error occurred while parsing document type definition"</para>
                <para>"letter is expected"</para>
                <para>"error occurred while parsing comment"</para>
                <para>"error occurred while parsing reference"</para>
                <para>"internal general entity reference not allowed in DTD"</para>
                <para>"external parsed general entity reference not allowed in attribute value"</para>
                <para>"external parsed general entity reference not allowed in DTD"</para>
                <para>"unparsed entity reference n wrong context"</para>
                <para>"recursive entities"</para>
                <para>"error in the text declaration of an external entity"</para>
                <para>
                </para>
                <para>Note that, if you want to display these error messages to your application's users, they will be displayed in English unless they are explicitly translated.</para>
                <para>
                </para>
                <para>See also QXmlErrorHandler and QXmlReader.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlParseException.#ctor(QtXml.QXmlParseException)">
            <summary>
                <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlParseException.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
                <para>Constructs a parse exception with the error string name for column c and line l for the public identifier p and the system identifier s.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlParseException.ColumnNumber">
            <summary>
                <para>Returns the column number where the error occurred.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlParseException.LineNumber">
            <summary>
                <para>Returns the line number where the error occurred.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlParseException.Message">
            <summary>
                <para>Returns the error message.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlParseException.PublicId">
            <summary>
                <para>Returns the public identifier where the error occurred.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlParseException.SystemId">
            <summary>
                <para>Returns the system identifier where the error occurred.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlParseException.Finalize">
            <summary>
                <para>Destroys the QXmlParseException.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlReader">
            <summary>
            The QXmlReader class provides an interface for XML readers (i.e. parsers).
            </summary>
            <remarks>
                <para>
                </para>
                <para>This abstract class provides an interface for all of Qt's XML readers. Currently there is only one implementation of a reader included in Qt's XML module: QXmlSimpleReader. In future releases there might be more readers with different properties available (e.g. a validating parser).</para>
                <para>The design of the XML classes follows the SAX2 Java interface, with the names adapted to fit Qt naming conventions. It should be very easy for anybody who has worked with SAX2 to get started with the Qt XML classes.</para>
                <para>All readers use the class QXmlInputSource to read the input document. Since you are normally interested in particular content in the XML document, the reader reports the content through special handler classes (QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler and QXmlLexicalHandler), which you must subclass, if you want to process the contents.</para>
                <para>Since the handler classes only describe interfaces you must implement all the functions. We provide the QXmlDefaultHandler class to make this easier: it implements a default behavior (do nothing) for all functions, so you can subclass it and just implement the functions you are interested in.</para>
                <para>Features and properties of the reader can be set with setFeature() and setProperty() respectively. You can set the reader to use your own subclasses with setEntityResolver(), setDTDHandler(), setContentHandler(), setErrorHandler(), setLexicalHandler() and setDeclHandler(). The parse itself is started with a call to parse().</para>
                <para>
                </para>
                <para>See also QXmlSimpleReader.</para>
            </remarks>
        </member>
        <member name="P:QtXml.QXmlReader.ContentHandler">
            <summary>
                <para>Returns the content handler or 0 if none was set.</para>
                <para>Sets the content handler to handler.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlReader.DTDHandler">
            <summary>
                <para>Returns the DTD handler or 0 if none was set.</para>
                <para>Sets the DTD handler to handler.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlReader.DeclHandler">
            <summary>
                <para>Returns the declaration handler or 0 if none was set.</para>
                <para>Sets the declaration handler to handler.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlReader.EntityResolver">
            <summary>
                <para>Returns the entity resolver or 0 if none was set.</para>
                <para>Sets the entity resolver to handler.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlReader.ErrorHandler">
            <summary>
                <para>Returns the error handler or 0 if none is set.</para>
                <para>Sets the error handler to handler. Clears the error handler if handler is 0.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlReader.LexicalHandler">
            <summary>
                <para>Returns the lexical handler or 0 if none was set.</para>
                <para>Sets the lexical handler to handler.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlReader.Feature(System.String)">
            <summary>
                <para>If the reader has the feature called name, the feature's value is returned. If no such feature exists the return value is undefined.</para>
                <para>If ok is not 0: *ok is set to true if the reader has the feature called name; otherwise *ok is set to false.</para>
                <para>See also setFeature() and hasFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlReader.Feature(System.String,System.Boolean@)">
            <summary>
                <para>If the reader has the feature called name, the feature's value is returned. If no such feature exists the return value is undefined.</para>
                <para>If ok is not 0: *ok is set to true if the reader has the feature called name; otherwise *ok is set to false.</para>
                <para>See also setFeature() and hasFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlReader.HasFeature(System.String)">
            <summary>
                <para>Returns true if the reader has the feature called name; otherwise returns false.</para>
                <para>See also feature() and setFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlReader.HasProperty(System.String)">
            <summary>
                <para>Returns true if the reader has the property name; otherwise returns false.</para>
                <para>See also property() and setProperty().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlReader.SetFeature(System.String,System.Boolean)">
            <summary>
                <para>Sets the feature called name to the given value. If the reader doesn't have the feature nothing happens.</para>
                <para>See also feature() and hasFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlReader.Finalize">
            <summary>
                <para>Destroys the reader.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlSimpleReader">
            <summary>
            The QXmlSimpleReader class provides an implementation of a simple XML parser.
            </summary>
            <remarks>
                <para>
                </para>
                <para>This XML reader is suitable for a wide range of applications. It is able to parse well-formed XML and can report the namespaces of elements to a content handler; however, it does not parse any external entities. For historical reasons, Attribute Value Normalization and End-of-Line Handling as described in the XML 1.0 specification is not performed.</para>
                <para>The easiest pattern of use for this class is to create a reader instance, define an input source, specify the handlers to be used by the reader, and parse the data.</para>
                <para>For example, we could use a QFile to supply the input. Here, we create a reader, and define an input source to be used by the reader:</para>
                <para>     QXmlSimpleReader xmlReader;</para>
                <para>     QXmlInputSource *source = new QXmlInputSource(file);</para>
                <para>A handler lets us perform actions when the reader encounters certain types of content, or if errors in the input are found. The reader must be told which handler to use for each type of event. For many common applications, we can create a custom handler by subclassing QXmlDefaultHandler, and use this to handle both error and content events:</para>
                <para>     Handler *handler = new Handler;</para>
                <para>     xmlReader.setContentHandler(handler);</para>
                <para>     xmlReader.setErrorHandler(handler);</para>
                <para>If you don't set at least the content and error handlers, the parser will fall back on its default behavior---and will do nothing.</para>
                <para>The most convenient way to handle the input is to read it in a single pass using the parse() function with an argument that specifies the input source:</para>
                <para>     bool ok = xmlReader.parse(source);</para>
                <para>
                </para>
                <para>     if (!ok)</para>
                <para>         std::cout &lt;&lt; "Parsing failed." &lt;&lt; std::endl;</para>
                <para>If you can't parse the entire input in one go (for example, it is huge, or is being delivered over a network connection), data can be fed to the parser in pieces. This is achieved by telling parse() to work incrementally, and making subsequent calls to the parseContinue() function, until all the data has been processed.</para>
                <para>A common way to perform incremental parsing is to connect the readyRead() signal of a network reply a slot, and handle the incoming data there. See QNetworkAccessManager.</para>
                <para>Aspects of the parsing behavior can be adapted using setFeature() and setProperty().</para>
                <para> xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes", true);</para>
                <para>QXmlSimpleReader is not reentrant. If you want to use the class in threaded code, lock the code using QXmlSimpleReader with a locking mechanism, such as a QMutex.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.#ctor">
            <summary>
                <para>Constructs a simple XML reader.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlSimpleReader.ContentHandler">
            <summary>
                <para>Reimplemented from QXmlReader::contentHandler().</para>
                <para>Reimplemented from QXmlReader::setContentHandler().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlSimpleReader.DTDHandler">
            <summary>
                <para>Reimplemented from QXmlReader::DTDHandler().</para>
                <para>Reimplemented from QXmlReader::setDTDHandler().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlSimpleReader.DeclHandler">
            <summary>
                <para>Reimplemented from QXmlReader::declHandler().</para>
                <para>Reimplemented from QXmlReader::setDeclHandler().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlSimpleReader.EntityResolver">
            <summary>
                <para>Reimplemented from QXmlReader::entityResolver().</para>
                <para>Reimplemented from QXmlReader::setEntityResolver().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlSimpleReader.ErrorHandler">
            <summary>
                <para>Reimplemented from QXmlReader::errorHandler().</para>
                <para>Reimplemented from QXmlReader::setErrorHandler().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlSimpleReader.LexicalHandler">
            <summary>
                <para>Reimplemented from QXmlReader::lexicalHandler().</para>
                <para>Reimplemented from QXmlReader::setLexicalHandler().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.Feature(System.String)">
            <summary>
                <para>Reimplemented from QXmlReader::feature().</para>
                <para>See also setFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.Feature(System.String,System.Boolean@)">
            <summary>
                <para>Reimplemented from QXmlReader::feature().</para>
                <para>See also setFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.HasFeature(System.String)">
            <summary>
                <para>Reimplemented from QXmlReader::hasFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.HasProperty(System.String)">
            <summary>
                <para>Reimplemented from QXmlReader::hasProperty().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.Parse(QtXml.QXmlInputSource)">
            <summary>
                <para>Reimplemented from QXmlReader::parse().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.Parse(QtXml.QXmlInputSource,System.Boolean)">
            <summary>
                <para>Reads an XML document from input and parses it. Returns true if the parsing is completed successfully; otherwise returns false, indicating that an error occurred.</para>
                <para>If incremental is false, this function will return false if the XML file is not read completely. The parsing cannot be continued in this case.</para>
                <para>If incremental is true, the parser does not return false if it reaches the end of the input before reaching the end of the XML file. Instead, it stores the state of the parser so that parsing can be continued later when more data is available. In such a case, you can use the function parseContinue() to continue with parsing. This class stores a pointer to the input source input and the parseContinue() function tries to read from that input source. Therefore, you should not delete the input source input until you no longer need to call parseContinue().</para>
                <para>If this function is called with incremental set to true while an incremental parse is in progress, a new parsing session will be started, and the previous session will be lost.</para>
                <para>See also parseContinue() and QTcpSocket.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.ParseContinue">
            <summary>
                <para>Continues incremental parsing, taking input from the QXmlInputSource that was specified with the most recent call to parse(). To use this function, you must have called parse() with the incremental argument set to true.</para>
                <para>Returns false if a parsing error occurs; otherwise returns true, even if the end of the XML file has not been reached. You can continue parsing at a later stage by calling this function again when there is more data available to parse.</para>
                <para>Calling this function when there is no data available in the input source indicates to the reader that the end of the XML file has been reached. If the input supplied up to this point was not well-formed then a parsing error occurs, and false is returned. If the input supplied was well-formed, true is returned. It is important to end the input in this way because it allows you to reuse the reader to parse other XML files.</para>
                <para>Calling this function after the end of file has been reached, but without available data will cause false to be returned whether the previous input was well-formed or not.</para>
                <para>See also parse(), QXmlInputSource::data(), and QXmlInputSource::next().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.SetFeature(System.String,System.Boolean)">
            <summary>
                <para>Reimplemented from QXmlReader::setFeature().</para>
                <para>Turns on the feature name if enable is true; otherwise turns it off.</para>
                <para>The name parameter must be one of the following strings:</para>
                <para>
                </para>
                <para>FeatureDefaultNotes</para>
                <para>http://xml.org/sax/features/namespaces	true	If enabled, namespaces are reported to the content handler.</para>
                <para>http://xml.org/sax/features/namespace-prefixes	false	If enabled, the original prefixed names and attributes used for namespace declarations are reported.</para>
                <para>http://trolltech.com/xml/features/report-whitespace-only-CharData	true	If enabled, CharData that consist of only whitespace characters are reported using QXmlContentHandler::characters(). If disabled, whitespace is silently discarded.</para>
                <para>http://trolltech.com/xml/features/report-start-end-entity	false	If enabled, the parser reports QXmlContentHandler::startEntity() and QXmlContentHandler::endEntity() events, so character data might be reported in chunks. If disabled, the parser does not report these events, but silently substitutes the entities, and reports the character data in one chunk.</para>
                <para>
                </para>
                <para>See also feature(), hasFeature(), and SAX2 Features.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlSimpleReader.Finalize">
            <summary>
                <para>Destroys the simple XML reader.</para>
            </summary>
        </member>
        <member name="T:QtXml.QXmlStreamWriter">
            <summary>
            The QXmlStreamWriter class provides an XML writer with a simple streaming API.
            </summary>
            <remarks>
                <para>
                </para>
                <para>QXmlStreamWriter is the counterpart to QXmlStreamReader for writing XML. Like its related class, it operates on a QIODevice specified with setDevice(). The API is simple and straightforward: for every XML token or event you want to write, the writer provides a specialized function.</para>
                <para>You start a document with writeStartDocument() and end it with writeEndDocument(). This will implicitly close all remaining open tags.</para>
                <para>Element tags are opened with writeStartElement() followed by writeAttribute() or writeAttributes(), element content, and then writeEndElement(). A shorter form writeEmptyElement() can be used to write empty elements, followed by writeAttributes().</para>
                <para>Element content consists of either characters, entity references or nested elements. It is written with writeCharacters(), which also takes care of escaping all forbidden characters and character sequences, writeEntityReference(), or subsequent calls to writeStartElement(). A convenience method writeTextElement() can be used for writing terminal elements that contain nothing but text.</para>
                <para>The following abridged code snippet shows the basic use of the class to write formatted XML with indentation:</para>
                <para>     QXmlStreamWriter stream(&amp;output);</para>
                <para>     stream.setAutoFormatting(true);</para>
                <para>     stream.writeStartDocument();</para>
                <para>     ...</para>
                <para>     stream.writeStartElement("bookmark");</para>
                <para>     stream.writeAttribute("href", "http://qt.nokia.com/");</para>
                <para>     stream.writeTextElement("title", "Qt Home");</para>
                <para>     stream.writeEndElement(); // bookmark</para>
                <para>     ...</para>
                <para>     stream.writeEndDocument();</para>
                <para>QXmlStreamWriter takes care of prefixing namespaces, all you have to do is specify the namespaceUri when writing elements or attributes. If you must conform to certain prefixes, you can force the writer to use them by declaring the namespaces manually with either writeNamespace() or writeDefaultNamespace(). Alternatively, you can bypass the stream writer's namespace support and use overloaded methods that take a qualified name instead. The namespace http://www.w3.org/XML/1998/namespace is implicit and mapped to the prefix xml.</para>
                <para>The stream writer can automatically format the generated XML data by adding line-breaks and indentation to empty sections between elements, making the XML data more readable for humans and easier to work with for most source code management systems. The feature can be turned on with the autoFormatting property, and customized with the autoFormattingIndent property.</para>
                <para>Other functions are writeCDATA(), writeComment(), writeProcessingInstruction(), and writeDTD(). Chaining of XML streams is supported with writeCurrentToken().</para>
                <para>By default, QXmlStreamWriter encodes XML in UTF-8. Different encodings can be enforced using setCodec().</para>
                <para>If an error occurs while writing to the underlying device, hasError() starts returning true and subsequent writes are ignored.</para>
                <para>The QXmlStream Bookmarks Example illustrates how to use a stream writer to write an XML bookmark file (XBEL) that was previously read in by a QXmlStreamReader.</para>
            </remarks>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.#ctor">
            <summary>
                <para>Constructs a stream writer.</para>
                <para>See also setDevice().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.#ctor(QtCore.QIODevice)">
            <summary>
                <para>Constructs a stream writer that writes into device;</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.#ctor(QtCore.QByteArray)">
            <summary>
                <para>Constructs a stream writer that writes into array. This is the same as creating an xml writer that operates on a QBuffer device which in turn operates on array.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.#ctor(System.Text.StringBuilder)">
            <summary>
                <para>Constructs a stream writer that writes into string.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlStreamWriter.Codec">
            <summary>
                <para>Returns the codec that is currently assigned to the stream.</para>
                <para>Sets the codec for this stream to codec. The codec is used for encoding any data that is written. By default, QXmlStreamWriter uses UTF-8.</para>
                <para>The encoding information is stored in the initial xml tag which gets written when you call writeStartDocument(). Call this function before calling writeStartDocument().</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlStreamWriter.Device">
            <summary>
                <para>Returns the current device associated with the QXmlStreamWriter, or 0 if no device has been assigned.</para>
                <para>Sets the current device to device. If you want the stream to write into a QByteArray, you can create a QBuffer device.</para>
            </summary>
        </member>
        <member name="P:QtXml.QXmlStreamWriter.HasError">
            <summary>
                <para>Returns true if the stream failed to write to the underlying device; otherwise returns false.</para>
                <para>The error status is never reset. Writes happening after the error occurred are ignored, even if the error condition is cleared.</para>
                <para>This function was introduced in Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.SetCodec(System.String)">
            <summary>
                <para>Sets the codec for this stream to the QTextCodec for the encoding specified by codecName. Common values for codecName include "ISO 8859-1", "UTF-8", and "UTF-16". If the encoding isn't recognized, nothing happens.</para>
                <para>See also QTextCodec::codecForName().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteAttribute(QtCore.QXmlStreamAttribute)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Writes the attribute.</para>
                <para>This function can only be called after writeStartElement() before any content is written, or after writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteAttribute(System.String,System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Writes an attribute with qualifiedName and value.</para>
                <para>This function can only be called after writeStartElement() before any content is written, or after writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteAttribute(System.String,System.String,System.String)">
            <summary>
                <para>Writes an attribute with name and value, prefixed for the specified namespaceUri. If the namespace has not been declared yet, QXmlStreamWriter will generate a namespace declaration for it.</para>
                <para>This function can only be called after writeStartElement() before any content is written, or after writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteAttributes(QtCore.QXmlStreamAttributes)">
            <summary>
                <para>Writes the attribute vector attributes. If a namespace referenced in an attribute not been declared yet, QXmlStreamWriter will generate a namespace declaration for it.</para>
                <para>This function can only be called after writeStartElement() before any content is written, or after writeEmptyElement().</para>
                <para>See also writeAttribute() and writeNamespace().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteCDATA(System.String)">
            <summary>
                <para>Writes text as CDATA section. If text contains the forbidden character sequence "]]&gt;", it is split into different CDATA sections.</para>
                <para>This function mainly exists for completeness. Normally you should not need use it, because writeCharacters() automatically escapes all non-content characters.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteCharacters(System.String)">
            <summary>
                <para>Writes text. The characters "&lt;", "&amp;", and """ are escaped as entity references "&amp;lt;", "&amp;amp;, and "&amp;quot;". To avoid the forbidden sequence "]]&gt;", "&gt;" is also escaped as "&amp;gt;".</para>
                <para>See also writeEntityReference().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteComment(System.String)">
            <summary>
                <para>Writes text as XML comment, where text must not contain the forbidden sequence "--" or end with "-". Note that XML does not provide any way to escape "-" in a comment.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteCurrentToken(QtCore.QXmlStreamReader)">
            <summary>
                <para>Writes the current state of the reader. All possible valid states are supported.</para>
                <para>The purpose of this function is to support chained processing of XML data.</para>
                <para>See also QXmlStreamReader::tokenType().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteDTD(System.String)">
            <summary>
                <para>Writes a DTD section. The dtd represents the entire doctypedecl production from the XML 1.0 specification.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteDefaultNamespace(System.String)">
            <summary>
                <para>Writes a default namespace declaration for namespaceUri.</para>
                <para>If writeStartElement() or writeEmptyElement() was called, the declaration applies to the current element; otherwise it applies to the next child element.</para>
                <para>Note that the namespaces http://www.w3.org/XML/1998/namespace (bound to xmlns) and http://www.w3.org/2000/xmlns/ (bound to xml) by definition cannot be declared as default.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteEmptyElement(System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Writes an empty element with qualified name qualifiedName. Subsequent calls to writeAttribute() will add attributes to this element.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteEmptyElement(System.String,System.String)">
            <summary>
                <para>Writes an empty element with name, prefixed for the specified namespaceUri. If the namespace has not been declared, QXmlStreamWriter will generate a namespace declaration for it. Subsequent calls to writeAttribute() will add attributes to this element.</para>
                <para>See also writeNamespace().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteEndDocument">
            <summary>
                <para>Closes all remaining open start elements and writes a newline.</para>
                <para>See also writeStartDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteEndElement">
            <summary>
                <para>Closes the previous start element.</para>
                <para>See also writeStartElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteEntityReference(System.String)">
            <summary>
                <para>Writes the entity reference name to the stream, as "&amp;name;".</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteNamespace(System.String,System.String)">
            <summary>
                <para>Writes a namespace declaration for namespaceUri with prefix. If prefix is empty, QXmlStreamWriter assigns a unique prefix consisting of the letter 'n' followed by a number.</para>
                <para>If writeStartElement() or writeEmptyElement() was called, the declaration applies to the current element; otherwise it applies to the next child element.</para>
                <para>Note that the prefix xml is both predefined and reserved for http://www.w3.org/XML/1998/namespace, which in turn cannot be bound to any other prefix. The prefix xmlns and its URI http://www.w3.org/2000/xmlns/ are used for the namespace mechanism itself and thus completely forbidden in declarations.</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
                <para>Writes an XML processing instruction with target and data, where data must not contain the sequence "?&gt;".</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteStartDocument">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Writes a document start with XML version number "1.0". This also writes the encoding information.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also writeEndDocument() and setCodec().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteStartDocument(System.String)">
            <summary>
                <para>Writes a document start with the XML version number version.</para>
                <para>See also writeEndDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteStartDocument(System.String,System.Boolean)">
            <summary>
                <para>Writes a document start with the XML version number version and a standalone attribute standalone.</para>
                <para>This function was introduced in Qt 4.5.</para>
                <para>See also writeEndDocument().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteStartElement(System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Writes a start element with qualifiedName. Subsequent calls to writeAttribute() will add attributes to this element.</para>
                <para>See also writeEndElement() and writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteStartElement(System.String,System.String)">
            <summary>
                <para>Writes a start element with name, prefixed for the specified namespaceUri. If the namespace has not been declared yet, QXmlStreamWriter will generate a namespace declaration for it. Subsequent calls to writeAttribute() will add attributes to this element.</para>
                <para>See also writeNamespace(), writeEndElement(), and writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteTextElement(System.String,System.String)">
            <summary>
                <para>This is an overloaded function.</para>
                <para>Writes a text element with qualifiedName and text.</para>
                <para>This is a convenience function equivalent to:</para>
                <para>         writeStartElement(qualifiedName);</para>
                <para>         writeCharacters(text);</para>
                <para>         writeEndElement();</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.WriteTextElement(System.String,System.String,System.String)">
            <summary>
                <para>Writes a text element with name, prefixed for the specified namespaceUri, and text. If the namespace has not been declared, QXmlStreamWriter will generate a namespace declaration for it.</para>
                <para>This is a convenience function equivalent to:</para>
                <para>         writeStartElement(namespaceUri, name);</para>
                <para>         writeCharacters(text);</para>
                <para>         writeEndElement();</para>
            </summary>
        </member>
        <member name="M:QtXml.QXmlStreamWriter.Finalize">
            <summary>
                <para>Destructor.</para>
            </summary>
        </member>
        <member name="T:QtXml.QtMsgType">
            <summary>
                <para>This enum describes the messages that can be sent to a message handler (QtMsgHandler). You can use the enum to identify and associate the various message types with the appropriate actions.</para>
                <para>See also QtMsgHandler and qInstallMsgHandler().</para>
            </summary>
        </member>
        <member name="F:QtXml.QtMsgType.QtCriticalMsg">
            <summary>
                <para>A message generated by the qCritical() function.</para>
            </summary>
        </member>
        <member name="F:QtXml.QtMsgType.QtDebugMsg">
            <summary>
                <para>A message generated by the qDebug() function.</para>
            </summary>
        </member>
        <member name="F:QtXml.QtMsgType.QtFatalMsg">
            <summary>
                <para>A message generated by the qFatal() function.</para>
            </summary>
        </member>
        <member name="F:QtXml.QtMsgType.QtWarningMsg">
            <summary>
                <para>A message generated by the qWarning() function.</para>
            </summary>
        </member>
        <member name="T:QtXml.IQXmlErrorHandler">
            <summary>
            The QXmlErrorHandler class provides an interface to report errors in XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If you want your application to report errors to the user or to perform customized error handling, you should subclass this class.</para>
                <para>You can set the error handler with QXmlReader::setErrorHandler().</para>
                <para>Errors can be reported using warning(), error() and fatalError(), with the error text being reported with errorString().</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.IQXmlErrorHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlErrorHandler.Error(QtXml.QXmlParseException)">
            <summary>
                <para>A reader might use this function to report a recoverable error. A recoverable error corresponds to the definiton of "error" in section 1.2 of the XML 1.0 specification. Details of the error are stored in exception.</para>
                <para>The reader must continue to provide normal parsing events after invoking this function.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlErrorHandler.FatalError(QtXml.QXmlParseException)">
            <summary>
                <para>A reader must use this function to report a non-recoverable error. Details of the error are stored in exception.</para>
                <para>If this function returns true the reader might try to go on parsing and reporting further errors, but no regular parsing events are reported.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlErrorHandler.Warning(QtXml.QXmlParseException)">
            <summary>
                <para>A reader might use this function to report a warning. Warnings are conditions that are not errors or fatal errors as defined by the XML 1.0 specification. Details of the warning are stored in exception.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="T:QtXml.IQXmlDTDHandler">
            <summary>
            The QXmlDTDHandler class provides an interface to report DTD content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If an application needs information about notations and unparsed entities, it can implement this interface and register an instance with QXmlReader::setDTDHandler().</para>
                <para>Note that this interface includes only those DTD events that the XML recommendation requires processors to report, i.e. notation and unparsed entity declarations using notationDecl() and unparsedEntityDecl() respectively.</para>
                <para>
                </para>
                <para>See also QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.IQXmlDTDHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlDTDHandler.NotationDecl(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function when it has parsed a notation declaration.</para>
                <para>The argument name is the notation name, publicId is the notation's public identifier and systemId is the notation's system identifier.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlDTDHandler.UnparsedEntityDecl(System.String,System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function when it finds an unparsed entity declaration.</para>
                <para>The argument name is the unparsed entity's name, publicId is the entity's public identifier, systemId is the entity's system identifier and notationName is the name of the associated notation.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="T:QtXml.IQXmlEntityResolver">
            <summary>
            The QXmlEntityResolver class provides an interface to resolve external entities contained in XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>If an application needs to implement customized handling for external entities, it must implement this interface, i.e. resolveEntity(), and register it with QXmlReader::setEntityResolver().</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.IQXmlEntityResolver.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlEntityResolver.ResolveEntity(System.String,System.String,QtXml.QXmlInputSource)">
            <summary>
                <para>The reader calls this function before it opens any external entity, except the top-level document entity. The application may request the reader to resolve the entity itself (ret is 0) or to use an entirely different input source (ret points to the input source).</para>
                <para>The reader deletes the input source ret when it no longer needs it, so you should allocate it on the heap with new.</para>
                <para>The argument publicId is the public identifier of the external entity, systemId is the system identifier of the external entity and ret is the return value of this function. If ret is 0 the reader should resolve the entity itself, if it is non-zero it must point to an input source which the reader uses instead.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="T:QtXml.IQXmlLexicalHandler">
            <summary>
            The QXmlLexicalHandler class provides an interface to report the lexical content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events appear between the content handler's startDocument and endDocument events.</para>
                <para>You can set the lexical handler with QXmlReader::setLexicalHandler().</para>
                <para>This interface's design is based on the SAX2 extension LexicalHandler.</para>
                <para>The interface provides the startDTD(), endDTD(), startEntity(), endEntity(), startCDATA(), endCDATA() and comment() functions.</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlDeclHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.IQXmlLexicalHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.Comment(System.String)">
            <summary>
                <para>The reader calls this function to report an XML comment anywhere in the document. It reports the text of the comment in ch.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.EndCDATA">
            <summary>
                <para>The reader calls this function to report the end of a CDATA section.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startCDATA() and QXmlContentHandler::characters().</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.EndDTD">
            <summary>
                <para>The reader calls this function to report the end of a DTD declaration, if any.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startDTD().</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.EndEntity(System.String)">
            <summary>
                <para>The reader calls this function to report the end of an entity called name.</para>
                <para>For every startEntity() call, there is a corresponding endEntity() call. The calls to startEntity() and endEntity() are properly nested.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also startEntity(), QXmlContentHandler::skippedEntity(), and QXmlSimpleReader::setFeature().</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.StartCDATA">
            <summary>
                <para>The reader calls this function to report the start of a CDATA section. The content of the CDATA section is reported through the QXmlContentHandler::characters() function. This function is intended only to report the boundary.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endCDATA().</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.StartDTD(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function to report the start of a DTD declaration, if any. It reports the name of the document type in name, the public identifier in publicId and the system identifier in systemId.</para>
                <para>If the public identifier is missing, publicId is set to an empty string. If the system identifier is missing, systemId is set to an empty string. Note that it is not valid XML to have a public identifier but no system identifier; in such cases a parse error will occur.</para>
                <para>All declarations reported through QXmlDTDHandler or QXmlDeclHandler appear between the startDTD() and endDTD() calls.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endDTD().</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlLexicalHandler.StartEntity(System.String)">
            <summary>
                <para>The reader calls this function to report the start of an entity called name.</para>
                <para>Note that if the entity is unknown, the reader reports it through QXmlContentHandler::skippedEntity() and not through this function.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
                <para>See also endEntity() and QXmlSimpleReader::setFeature().</para>
            </summary>
        </member>
        <member name="T:QtXml.IQXmlDeclHandler">
            <summary>
            The QXmlDeclHandler class provides an interface to report declaration content of XML data.
            </summary>
            <remarks>
                <para>
                </para>
                <para>You can set the declaration handler with QXmlReader::setDeclHandler().</para>
                <para>This interface is based on the SAX2 extension DeclHandler.</para>
                <para>The interface provides attributeDecl(), internalEntityDecl() and externalEntityDecl() functions.</para>
                <para>
                </para>
                <para>See also QXmlDTDHandler, QXmlContentHandler, QXmlEntityResolver, QXmlErrorHandler, QXmlLexicalHandler, and Introduction to SAX2.</para>
            </remarks>
        </member>
        <member name="P:QtXml.IQXmlDeclHandler.ErrorString">
            <summary>
                <para>The reader calls this function to get an error string if any of the handler functions returns false.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlDeclHandler.AttributeDecl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function to report an attribute type declaration. Only the effective (first) declaration for an attribute is reported.</para>
                <para>The reader passes the name of the associated element in eName and the name of the attribute in aName. It passes a string that represents the attribute type in type and a string that represents the attribute default in valueDefault. This string is one of "#IMPLIED", "#REQUIRED", "#FIXED" or an empty string (if none of the others applies). The reader passes the attribute's default value in value. If no default value is specified in the XML file, value is an empty string.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlDeclHandler.ExternalEntityDecl(System.String,System.String,System.String)">
            <summary>
                <para>The reader calls this function to report a parsed external entity declaration. Only the effective (first) declaration for each entity is reported.</para>
                <para>The reader passes the name of the entity in name, the public identifier in publicId and the system identifier in systemId. If there is no public identifier specified, it passes an empty string in publicId.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
        <member name="M:QtXml.IQXmlDeclHandler.InternalEntityDecl(System.String,System.String)">
            <summary>
                <para>The reader calls this function to report an internal entity declaration. Only the effective (first) declaration is reported.</para>
                <para>The reader passes the name of the entity in name and the value of the entity in value.</para>
                <para>If this function returns false the reader stops parsing and reports an error. The reader uses the function errorString() to get the error message.</para>
            </summary>
        </member>
    </members>
</doc>
